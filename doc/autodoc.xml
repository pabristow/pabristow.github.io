<?xml version="1.0" standalone="yes"?>
<library-reference id="boost_svg_plot_c___reference"><title>Boost.SVG plot C++ Reference</title><header name="boost/svg_plot/detail/auto_axes.hpp">
<para>Scalable Vector Graphic (SVG) autoscaling of axes. </para><para>Inspect container or data values to find minimum and maximum, avoiding values that are NaN and/or 'at limit'. Scale axis using max and min values (calculated or user provided), optionally to include the orgin, and to set the ticks. Provide fine control over any overlap at the edges of the axes to avoid a tiny amount over the limit resulting in an ugly extra major tick. Also allow optional forcing of the ticks to be multiples of 1, 2, 5, 10. <para/>
</para><namespace name="boost">
<namespace name="math">
<function name="isfinite"><type>bool</type><template>
          <template-type-parameter name="FPT"><purpose><para>floating-point type (float, double, long double, or user-defined). </para></purpose></template-type-parameter>
        </template><parameter name="t"><paramtype>FPT</paramtype><description><para>floating-point value to test if finite. </para></description></parameter><purpose>If a floating-point value is finite, return true. </purpose><description><para>


</para></description><returns><para><computeroutput>true</computeroutput> if is finite, false if + or - infinite, or any NaN. </para></returns></function>
</namespace>
<namespace name="svg">







<function name="mnmx"><type>int</type><template>
          <template-type-parameter name="Iter"/>
        </template><parameter name="begin"><paramtype>Iter</paramtype><description><para>Iterator to chosen first item in container. </para></description></parameter><parameter name="end"><paramtype>Iter</paramtype><description><para>Iterator to chosen last item in container. </para></description></parameter><parameter name="min"><paramtype>double *</paramtype><description><para>Updated with Minimum value found (not 'at limit'). </para></description></parameter><parameter name="max"><paramtype>double *</paramtype><description><para>Updated with Maximum value found (not 'at limit'). </para></description></parameter><purpose>Inspect values to find min and max. </purpose><description><para>Inspect all values between begin and (one before) end to work out and update min and max. Similar to boost::minmax_element, but ignoring at 'limit': non-finite, +-infinity, max &amp; min, &amp; NaN). If can't find a max and a min, then throw a runtime_error exception. 


</para></description><returns><para>number of normal values (not 'at limit' neither too big, NaN nor infinite). </para></returns></function>




















<function name="range_all"><type>std::pair&lt; double, double &gt;</type><template>
          <template-type-parameter name="T"/>
        </template><parameter name="containers"><paramtype>const T &amp;</paramtype></parameter><description><para>

</para></description><returns><para>minimum and maximum of a container containing STL containers. </para></returns></function>
<function name="range_mx"><type>std::pair&lt; double, double &gt;</type><template>
          <template-type-parameter name="T"><purpose><para>an STL container: array, vector, set, map ... </para></purpose></template-type-parameter>
        </template><parameter name="container"><paramtype>const T &amp;</paramtype><description><para>Container Data series. </para></description></parameter><description><para>Calculate minimum and maximum from data in a container. 


</para></description><returns><para>minimum and maximum of an STL container as a <computeroutput>std::pair</computeroutput>. </para></returns></function>
<function name="rounddown10"><type>double</type><parameter name="value"><paramtype>double</paramtype></parameter><description><para>Round down to nearest multiple of 10. Decimal scaling steps, so value is 0.1, 0.2, 0.5, 1., 2., 5. or 1., 10., 20., 100. ... 
</para></description><returns><para>Rounded down value. </para></returns></function>
<function name="rounddown2"><type>double</type><parameter name="value"><paramtype>double</paramtype></parameter><description><para>Binary scaling steps, so return 0.1, 0.2, 0.4, 0.6, 0.8, 1.0, 2, 4, 6, 8, 10, 20, 40 60, 80, 100.. 
</para></description><returns><para>Rounded down value. </para></returns></function>
<function name="rounddown5"><type>double</type><parameter name="value"><paramtype>double</paramtype></parameter><description><para>Semi-decimal scaling, so return 0.1, 0.5, 1, 5, 10, 50, 100 ... 
</para></description><returns><para>Rounded down value. </para></returns></function>
<function name="roundup10"><type>double</type><parameter name="value"><paramtype>double</paramtype></parameter><description><para>Round up to nearest multiple of 10. Decimal scaling steps, so value is 0.1, 0.2, 0.5, 1., 2., 5. or 1., 10., 20., 100. ... 
</para></description><returns><para>Rounded up value. </para></returns></function>
<function name="roundup2"><type>double</type><parameter name="value"><paramtype>double</paramtype></parameter><description><para>Binary scaling steps, so return 0.1, 0.2, 0.4, 0.6, 0.8, 1.0, 2, 4, 6, 8, 10, 20, 40 60, 80, 100.. 
</para></description><returns><para>Rounded up value. </para></returns></function>
<function name="roundup5"><type>double</type><parameter name="value"><paramtype>double</paramtype></parameter><description><para>Semi-decimal scaling, so return 0.1, 0.5, 1, 5, 10, 50, 100 ... 
</para></description><returns><para>rounded up value. </para></returns></function>
<function name="scale_axis"><type>void</type><parameter name="min_value"><paramtype>double</paramtype><description><para>Scale axis from explicit input range minimum. </para></description></parameter><parameter name="max_value"><paramtype>double</paramtype><description><para>Scale axis from explicit input range maximum.</para></description></parameter><parameter name="axis_min_value"><paramtype>double *</paramtype><description><para>Computed minimum value for the axis, updated by scale_axis. </para></description></parameter><parameter name="axis_max_value"><paramtype>double *</paramtype><description><para>Computed maximum value for the axis, updated by scale_axis. </para></description></parameter><parameter name="axis_tick_increment"><paramtype>double *</paramtype><description><para>Computed tick increment for the axis, updated by scale_axis. </para></description></parameter><parameter name="auto_ticks"><paramtype>int *</paramtype><description><para>Computed number of ticks, updated by scale_axis. </para></description></parameter><parameter name="origin"><paramtype>bool</paramtype><default>false</default><description><para>If false, do not include the origin unless the range <computeroutput>min_value</computeroutput> to <computeroutput>max_value</computeroutput> includes zero. </para></description></parameter><parameter name="tight"><paramtype>double</paramtype><default>0.</default><description><para>Fraction of overrun allowed before another tick used. For a good visual effect, up to about 0.001 might suit a 1000 pixel wide image, allowing values just 1 pixel over the tick to be shown. </para></description></parameter><parameter name="min_ticks"><paramtype>int</paramtype><default>6</default><description><para>Minimum number of major ticks. </para></description></parameter><parameter name="steps"><paramtype>int</paramtype><default>0</default><description><para>0, or 2 for 2, 4, 6, 8, 10, 5 for 1, 5, 10, or 10 (2, 5, 10). </para></description></parameter><description><para>Scale axis and update min and max axis values, and tick increment and number of ticks.</para><para>
</para></description></function>
<function name="scale_axis"><type>void</type><parameter name="min_value"><paramtype>double</paramtype><description><para>Scale axis from explicit input minimum. </para></description></parameter><parameter name="max_value"><paramtype>double</paramtype><description><para>Scale axis from explicit input maximum.</para></description></parameter><parameter name="axis_min_value"><paramtype>double *</paramtype><description><para>Computed minimum value for the axis, updated by scale_axis. </para></description></parameter><parameter name="axis_max_value"><paramtype>double *</paramtype><description><para>Computed maximum value for the axis, updated by scale_axis. </para></description></parameter><parameter name="axis_tick_increment"><paramtype>double *</paramtype><description><para>Computed tick increment for the axis, updated by scale_axis. </para></description></parameter><parameter name="auto_ticks"><paramtype>int *</paramtype><description><para>Computed number of ticks, updated by scale_axis. </para></description></parameter><parameter name="check_limits"><paramtype>bool</paramtype><default>true</default><description><para>If true then check all values for infinity, NaN etc. </para></description></parameter><parameter name="autoscale_plusminus"><paramtype>double</paramtype><default>2.</default><description><para>Multiplier of uncertainty or standard deviations to allow for confidence ellipses. </para></description></parameter><parameter name="origin"><paramtype>bool</paramtype><default>false</default><description><para>If true, ensures that zero is a tick value. </para></description></parameter><parameter name="tight"><paramtype>double</paramtype><default>0.</default><description><para>Allows user to avoid a small fraction over a tick using another tick. </para></description></parameter><parameter name="min_ticks"><paramtype>int</paramtype><default>6</default><description><para>Minimum number of major ticks. </para></description></parameter><parameter name="steps"><paramtype>int</paramtype><default>0</default><description><para>Round up and down to 2, 4, 6, 8, 10, or 5, 10 or 2, 5, 10 systems. </para></description></parameter><description><para>Scale axis function to define axis marker ticks based on min &amp; max parameters values (handling uncertainty).</para><para>
</para></description></function>
<function name="scale_axis"><type>void</type><template>
          <template-type-parameter name="Iter"><purpose><para>Type of interator into STL container type: <computeroutput>array</computeroutput>, <computeroutput>vector</computeroutput> ...</para></purpose></template-type-parameter>
        </template><parameter name="begin"><paramtype>Iter</paramtype><description><para>First item in container to use to calculate autoscale mimimum or maximum. </para></description></parameter><parameter name="end"><paramtype>Iter</paramtype><description><para>Last item in container to use to calculate autoscale mimimum or maximum. </para></description></parameter><parameter name="axis_min_value"><paramtype>double *</paramtype><description><para>Computed minimum value for the axis, updated by scale_axis. </para></description></parameter><parameter name="axis_max_value"><paramtype>double *</paramtype><description><para>Computed maximum value for the axis, updated by scale_axis. </para></description></parameter><parameter name="axis_tick_increment"><paramtype>double *</paramtype><description><para>Computed tick increment for the axis, updated by scale_axis. </para></description></parameter><parameter name="auto_ticks"><paramtype>int *</paramtype><description><para>Computed number of ticks, updated by scale_axis. </para></description></parameter><parameter name="check_limits"><paramtype>bool</paramtype><description><para>Whether to check all values for infinity, NaN etc. </para></description></parameter><parameter name="autoscale_plusminus"><paramtype>double</paramtype><description><para>Multiplier of uncertainty or standard deviations to allow for confidence ellipses. </para></description></parameter><parameter name="origin"><paramtype>bool</paramtype><default>false</default><description><para>If false, do not include the origin unless the range min_value &lt;= 0 &lt;= max_value. </para></description></parameter><parameter name="tight"><paramtype>double</paramtype><default>0.</default><description><para>fraction of 'overrun' allowed before another tick used. For visual effect up to about 0.001 might suit a 1000 pixel wide image, allowing values just 1 pixel over the tick to be shown. </para></description></parameter><parameter name="min_ticks"><paramtype>int</paramtype><default>6</default><description><para>Minimum number of major ticks. </para></description></parameter><parameter name="steps"><paramtype>int</paramtype><default>0</default><description><para>0, or 2 for 2, 4, 6, 8, 10, 5 for 1, 5, 10, or 10 (2, 5, 10). </para></description></parameter><description><para>Scale axis from data series (usually to plot), perhaps only part of container.</para><para>

</para></description></function>
<function name="scale_axis"><type>void</type><template>
          <template-type-parameter name="C"><purpose><para>STL container type: <computeroutput>array</computeroutput>, <computeroutput>vector</computeroutput> ...</para></purpose></template-type-parameter>
        </template><parameter name="container"><paramtype>const C &amp;</paramtype><description><para>STL container, usually of a data series. </para></description></parameter><parameter name="axis_min_value"><paramtype>double *</paramtype><description><para>Computed minimum value for the axis, updated by scale_axis. </para></description></parameter><parameter name="axis_max_value"><paramtype>double *</paramtype><description><para>Computed maximum value for the axis, updated by scale_axis. </para></description></parameter><parameter name="axis_tick_increment"><paramtype>double *</paramtype><description><para>Computed tick increment for the axis, updated by scale_axis. </para></description></parameter><parameter name="auto_ticks"><paramtype>int *</paramtype><description><para>Computed number of ticks, updated by scale_axis. </para></description></parameter><parameter name="check_limits"><paramtype>bool</paramtype><description><para>Whether to check all values for infinity, NaN etc. </para></description></parameter><parameter name="autoscale_plusminus"><paramtype>double</paramtype><default>3.</default><description><para>Multiplier of uncertainty or standard deviations to allow for confidence ellipses. </para></description></parameter><parameter name="origin"><paramtype>bool</paramtype><default>false</default><description><para>If false, do not include the origin unless the range min_value &lt;= 0 &lt;= max_value. </para></description></parameter><parameter name="tight"><paramtype>double</paramtype><default>0.</default><description><para>fraction of overrun allowed before another tick used. For visual effect up to about 0.001 might suit a 1000 pixel wide image, allowing values just 1 pixel over the tick to be shown. </para></description></parameter><parameter name="min_ticks"><paramtype>int</paramtype><default>6</default><description><para>Minimum number of major ticks. </para></description></parameter><parameter name="steps"><paramtype>int</paramtype><default>0</default><description><para>0, or 2 for 2, 4, 6, 8, 10, 5 for 1, 5, 10, or 10 (2, 5, 10). </para></description></parameter><purpose>Scale axis using an <emphasis role="bold">entire</emphasis> Container of a Data series, usually to plot (not necessarily ordered, so will find minimum and maximum). </purpose><description><para>

</para></description></function>
<function name="scale_axis"><type>void</type><template>
          <template-type-parameter name="C"><purpose><para>STL container holding 2D pairs of X and Y.</para></purpose></template-type-parameter>
        </template><parameter name="container"><paramtype>const C &amp;</paramtype><description><para>Data series to plot - entire 2D container. </para></description></parameter><parameter name="x_axis_min_value"><paramtype>double *</paramtype><description><para>Computed minimum value for the X-axis, updated by scale_axis. </para></description></parameter><parameter name="x_axis_max_value"><paramtype>double *</paramtype><description><para>Computed minimum value for the X-axis, updated by scale_axis. </para></description></parameter><parameter name="x_axis_tick_increment"><paramtype>double *</paramtype><description><para>Computed tick increment for the axis, updated by scale_axis. </para></description></parameter><parameter name="x_auto_ticks"><paramtype>int *</paramtype><description><para>Computed number of ticks, updated by scale_axis. </para></description></parameter><parameter name="y_axis_min_value"><paramtype>double *</paramtype><description><para>Computed minimum value for the Y-axis, updated by scale_axis. </para></description></parameter><parameter name="y_axis_max_value"><paramtype>double *</paramtype><description><para>Computed maximum value for the Y-axis, updated by scale_axis. </para></description></parameter><parameter name="y_axis_tick_increment"><paramtype>double *</paramtype><description><para>Updated with Y-axis tick increment. </para></description></parameter><parameter name="y_auto_ticks"><paramtype>int *</paramtype><description><para>Computed number of Y-axis ticks, updated by scale_axis. </para></description></parameter><parameter name="check_limits"><paramtype>bool</paramtype><default>true</default><description><para>Whether to check all values for infinity, NaN etc. </para></description></parameter><parameter name="autoscale_plusminus"><paramtype>double</paramtype><default>3.</default><description><para>Multiplier of uncertainty or standard deviations to allow for confidence ellipses. </para></description></parameter><parameter name="x_origin"><paramtype>bool</paramtype><default>false</default><description><para>Do not include the origin unless the range min_value &lt;= 0 &lt;= max_value. </para></description></parameter><parameter name="x_tight"><paramtype>double</paramtype><default>0.</default><description><para>Fraction of 'overrun' allowed before another tick used. For visual effect up to about 0.001 might suit a 1000 pixel wide image, allowing values just 1 pixel over the tick to be shown. </para></description></parameter><parameter name="x_min_ticks"><paramtype>int</paramtype><default>6</default><description><para>Minimum number of X-axis major ticks. </para></description></parameter><parameter name="x_steps"><paramtype>int</paramtype><default>0</default><description><para>0, or 2 for 2, 4, 6, 8, 10, 5 for 1, 5, 10, or 10 (2, 5, 10). </para></description></parameter><parameter name="y_origin"><paramtype>bool</paramtype><default>false</default><description><para>Do not include the origin unless the range min_value to max_value contains zero. </para></description></parameter><parameter name="y_tight"><paramtype>double</paramtype><default>0.</default><description><para>Fraction of 'overrun' allowed before another tick used. For visual effect up to about 0.001 might suit a 1000 pixel wide image, allowing values just 1 pixel over the tick to be shown. </para></description></parameter><parameter name="y_min_ticks"><paramtype>int</paramtype><default>6</default><description><para>Minimum number of Y axis major ticks. </para></description></parameter><parameter name="y_steps"><paramtype>int</paramtype><default>0</default><description><para>0, or 2 for 2, 4, 6, 8, 10, 5 for 1, 5, 10, or 10 (2, 5, 10). </para></description></parameter><description><para>Scale X and Y axis using a 2D STL container: <computeroutput>std::array</computeroutput> of <computeroutput>std::pairs</computeroutput>, <computeroutput>std::vector</computeroutput> of <computeroutput>std::pairs</computeroutput>, ...</para><para>

</para></description></function>
<function name="show"><type>size_t</type><template>
          <template-type-parameter name="T"/>
        </template><parameter name="container"><paramtype>const T &amp;</paramtype></parameter><description><para>Utility functions to display STL containers. </para></description></function>
<function name="show"><type>size_t</type><template>
          <template-type-parameter name="iter"/>
        </template><parameter name="begin"><paramtype>iter</paramtype></parameter><parameter name="end"><paramtype>iter</paramtype></parameter><description><para>Utility function to display STL containers. </para></description></function>


<function name="show_all"><type>size_t</type><template>
          <template-type-parameter name="T"/>
        </template><parameter name="containers"><paramtype>const T &amp;</paramtype></parameter><description><para>Show all the containers values. </para></description></function>















</namespace>
</namespace>
</header>
<header name="boost/svg_plot/detail/axis_plot_frame.hpp">
<para>SVG Plot functions common to 1D, 2D and Boxplots. </para><para>Functions are derived from base class <computeroutput>axis_plot_frame</computeroutput>. <para>Jacob Voytko and Paul A. Bristow </para>
</para><namespace name="boost">
<namespace name="svg">
<enum name="legend_places"><enumvalue name="nowhere"><default>= 0</default><purpose>Placing of legend box not requested or not calculated yet. </purpose></enumvalue><enumvalue name="inside"><default>= -1</default><purpose>Default place for inside is top left of plot window, (exact location controlled by legend_top_left()). </purpose></enumvalue><enumvalue name="outside_left"><default>= 1</default><purpose>Outside on the left of the graph. </purpose></enumvalue><enumvalue name="outside_right"><default>= +2</default><purpose>Outside right (Default). </purpose></enumvalue><enumvalue name="outside_top"><default>= +3</default><purpose>Outside at top. </purpose></enumvalue><enumvalue name="outside_bottom"><default>= +4</default><purpose>Outside at bottom. </purpose></enumvalue><enumvalue name="somewhere"><default>= +5</default><purpose>legend_top_left(x, y) </purpose></enumvalue><purpose>Placing of legend box, if requested by legend_on == true. </purpose></enum>
<enum name="x_axis_intersect"><enumvalue name="bottom"><default>= -1</default><purpose>X-axis free below bottom of end of Y-axis (case of all Y definitely &lt; 0). </purpose></enumvalue><enumvalue name="x_intersects_y"><default>= 0</default><purpose>x_intersects_y when Y values include zero, so X intersects the Y axis. </purpose></enumvalue><enumvalue name="top"><default>= +1</default><purpose>X-axis free above top of X-axis (case of all Y definitely &gt; 0). </purpose></enumvalue><purpose>If and how the X axes intersects Y axis. </purpose></enum>
<enum name="y_axis_intersect"><enumvalue name="left"><default>= -1</default><purpose>Y-axis free to left of end of X-axis (case of all X definitely &lt; 0). </purpose></enumvalue><enumvalue name="y_intersects_x"><default>= 0</default><purpose>y_intersects_x when X values include zero, so intersects the X axis. </purpose></enumvalue><enumvalue name="right"><default>= +1</default><purpose>Y-axis free to left of end of X-axis (case of all X definitely &gt; 0). </purpose></enumvalue><purpose>If and how the Y axes intersects X axis. </purpose></enum>
<data-member name="reducer" specifiers="static"><type>const double</type><purpose>To make uncertainty and degrees of freedom estimates a bit smaller font to help distinguish from value. </purpose></data-member>
<data-member name="sin45" specifiers="static"><type>const double</type><purpose>Used to calculate 'length' if axis value labels are sloping. </purpose></data-member>
<data-member name="text_plusminus" specifiers="static"><type>const double</type><description><para>Number of standard deviations used for text_plusminus text display.<sbr/>
Nominal factor of 2 (strictly 1.96) corresponds to 95% confidence limit. </para></description></data-member>





























































</namespace>
</namespace>
</header>
<header name="boost/svg_plot/detail/fp_compare.hpp">
<para>Class for comparing floating point values to see if nearly equal. </para><para>Two types of comparison are provided: FPC_STRONG, "Very close" - Knuth equation 1', the default. FPC_WEAK "Close enough" - equation 2'. equations in Dougles E. Knuth, Seminumerical algorithms (3rd Ed) section 4.2.4, Vol II, pp 213-225, Addison-Wesley, 1997, ISBN: 0201896842.</para><para>Strong requires closeness relative to BOTH values being compared, Weak only requires only closeness to EITHER ONE value.</para><para>This permits one to avoid some of the problems that can arise from comparing floating-point values by circumnavigating the assumption that floating point operations always give exactly the same result.</para><para>See <ulink url="http://hal.archives-ouvertes.fr/docs/00/28/14/29/PDF/floating-point-article.pdf">http://hal.archives-ouvertes.fr/docs/00/28/14/29/PDF/floating-point-article.pdf</ulink> for more about the pitfalls.</para><para><para>Paul A. Bristow </para>
<para>Aug 2009 </para>
</para><class name="close_to"><template>
      <template-type-parameter name="FPT"><default>double</default></template-type-parameter>
    </template><purpose>Check two floating-point values are close within a chosen tolerance. </purpose><method-group name="public member functions">
<method name="operator()" cv="const"><type>bool</type><parameter name="left"><paramtype>FPT</paramtype></parameter><parameter name="right"><paramtype>FPT</paramtype></parameter><description><para>Compare two floating point values 
</para></description><returns><para>true if they are effectively equal (approximately) within tolerance &amp; comparison strength. </para></returns></method>
<method name="size"><type>FPT</type><description><para>
</para></description><returns><para>fraction tolerance. </para></returns></method>
<method name="strength"><type>floating_point_comparison_type</type><description><para>
</para></description><returns><para>floating_point comparison type strength, FPC_STRONG or FPC_WEAK </para></returns></method>
</method-group>
<constructor specifiers="explicit"><template>
          <template-type-parameter name="T"/>
        </template><parameter name="tolerance"><paramtype>T</paramtype></parameter><parameter name="fpc_type"><paramtype>floating_point_comparison_type</paramtype><default>FPC_STRONG</default></parameter><description><para>Constructor for fraction tolerance and strength of comparison. Checks that tolerance isn't negative - which does not make sense, and can be assumed to be a programmer error? </para></description></constructor>
<constructor><description><para>Default constructor is strong comparison to twice numeric_limits&lt;double&gt;::epsilon(). </para></description></constructor>
</class><class name="smallest"><template>
      <template-type-parameter name="FPT"><default>double</default></template-type-parameter>
    </template><purpose>Check floating-point value is smaller than a chosen small value. </purpose><method-group name="public member functions">
<method name="operator()"><type>bool</type><template>
          <template-type-parameter name="T"/>
        </template><parameter name="fp_value"><paramtype>T</paramtype></parameter><parameter name="s"><paramtype>T</paramtype></parameter><description><para>&lt; 
</para></description><returns><para>true if smaller than the given small value. </para></returns></method>
<method name="operator()"><type>bool</type><template>
          <template-type-parameter name="T"/>
        </template><parameter name="fp_value"><paramtype>T</paramtype></parameter><description><para>&lt; 
</para></description><returns><para>true if smaller than the defined smallest effectively-zero value. </para></returns></method>
<method name="size"><type>FPT</type><description><para>&lt; 
</para></description><returns><para>smallest value that will be counted as effectively zero. </para></returns></method>
</method-group>
<constructor specifiers="explicit"><template>
          <template-type-parameter name="T"/>
        </template><parameter name="s"><paramtype>T</paramtype></parameter><description><para>&lt;</para><para>David Monniaux, <ulink url="http://arxiv.org/abs/cs/0701192v4,">http://arxiv.org/abs/cs/0701192v4,</ulink> It is somewhat common for beginners to add a comparison check to 0 before computing a division, in order to avoid possible division-by-zero exceptions or the generation of infinite results. A first objection to this practise is that, anyway, computing 1/x for x very close to zero will generate very large numbers that will most probably result in overflows later. Another objection, which few programmers know about and that we wish to draw attention to, is that it may actually fail to work, depending on what the compiler does - that is, the program may actually test that x 6= 0, then, further down, find that x = 0 without any apparent change to x! </para></description></constructor>
<constructor><description><para>&lt; Default Constructor. Default smallest_ = 2. * boost::math::tools::min_value&lt;double&gt;(); multiplier m = 2 (must be integer or static_cast&lt;FPT&gt;()) is chosen to allow for a few bits of computation error. Pessimistic multiplier is the number of arithmetic operations, assuming every operation causes a 1 least significant bit error, but a more realistic average would be half this.</para></description></constructor>
</class><typedef name="neareq"><purpose>A shorthand for twice std::numeric_limits&lt;double&gt;::epsilon(), often 2e-16. </purpose><type><classname>close_to</classname>&lt; double &gt;</type></typedef>
<typedef name="tiny"><purpose>A shorthand for twice std::numeric_limits&lt;double&gt;::min_value(), often 4.4e-308. </purpose><type><classname>smallest</classname>&lt; double &gt;</type></typedef>
<function name="epsilon"><type>T</type><template>
          <template-type-parameter name="T"/>
        </template><parameter name=""><paramtype>T</paramtype></parameter><purpose>std::numeric_limits&lt;&gt;::epsilon() or similar. </purpose></function>
<function name="fpt_abs"><type>FPT</type><template>
          <template-type-parameter name="FPT"/>
        </template><parameter name="arg"><paramtype>FPT</paramtype></parameter><description><para>abs function (just in case abs is not defined for FPT). </para></description></function>
<function name="max_value"><type>T</type><template>
          <template-type-parameter name="T"/>
        </template><parameter name=""><paramtype>T</paramtype></parameter><purpose>std::numeric_limits&lt;&gt;::max() or similar. </purpose></function>
<function name="min_value"><type>T</type><template>
          <template-type-parameter name="T"/>
        </template><parameter name=""><paramtype>T</paramtype></parameter><purpose>std::numeric_limits&lt;&gt;::min() or similar. </purpose></function>
<function name="safe_fpt_division"><type>FPT</type><template>
          <template-type-parameter name="FPT"/>
        </template><parameter name="f1"><paramtype>FPT</paramtype></parameter><parameter name="f2"><paramtype>FPT</paramtype></parameter><description><para>Safe from under and overflow. Both f1 and f2 must be unsigned here. </para></description></function>
</header>
<header name="boost/svg_plot/detail/functors.hpp">
<para>Functors to convert data to doubles. </para><para>SVG plot assumes all data are convertible to double or uncertain value type unc before being plotted. The functors are used to convert both 1D and 2D (pairs of data values) to be converted. Note that uncertain value class unc only holds double precision and long double data will therefore lose information. This seems reasonable design decision as any real data to be plotted is unlikely to have more than double precision (about 16 decimal digits).</para><para><para>Jacob Voytko and Paul A. Bristow </para>
<para>Mar 2009 </para>
</para><namespace name="boost">
<namespace name="svg">





























































</namespace>
</namespace>
</header>
<header name="boost/svg_plot/detail/numeric_limits_handling.hpp">
<para>Functions to check if data values are NaN or infinity or denormalised. </para><para>Since only double is used, template versions are not needed, and TR1 should provide max, min, denorm_min, infinity and isnan, but older compilers and libraries may not provide all these.</para><para><para>Jacob Voytko and Paul A. Bristow </para>
</para><namespace name="boost">
<namespace name="svg">





























































</namespace>
</namespace>
</header>
<header name="boost/svg_plot/detail/pair.hpp">
<para>Provides a private implementation of <computeroutput>operator&lt;&lt;</computeroutput> for <computeroutput>std::pair</computeroutput> that outputs pairs with a comma-separated format, for example: "1.2, 3.4". </para><para>Hidden in namespace <computeroutput>detail</computeroutput> to avoid clashes with other potential implementations of <computeroutput>std::pair</computeroutput> <computeroutput>operator&lt;&lt;</computeroutput>. <para>Paul A. Bristow </para>
</para><namespace name="boost">
<namespace name="svg">





























































</namespace>
</namespace>
</header>
<header name="boost/svg_plot/detail/svg_boxplot_detail.hpp">
<para>Boost.Plot SVG Box plot Implemention details. </para><para>See svg_boxplot.hpp for user functions. See also svg_style_detail.hpp for enum plot_doc_structure. Caution: these two enum and ids must match because the enum value is used to index the array of id strings. void set_ids() copies all strings to matching image.get_g_element(i).id() So add any new id items to both!</para><para><para>Jacob Voytko and Paul A. Bristow </para>
</para><namespace name="boost">
<namespace name="svg">
<namespace name="boxplot">
<enum name="boxplot_doc_structure"><enumvalue name="PLOT_BACKGROUND"><default>= 0</default><purpose>the whole svg image. (Must be zero to index array document_ids_[]) </purpose></enumvalue><enumvalue name="PLOT_WINDOW_BACKGROUND"><purpose>the smaller plot window (if used). </purpose></enumvalue><enumvalue name="X_AXIS"><purpose>X axis group element. </purpose></enumvalue><enumvalue name="Y_AXIS"><purpose>Y axis group element. </purpose></enumvalue><enumvalue name="X_TICKS"><purpose>X ticks group element. </purpose></enumvalue><enumvalue name="Y_MAJOR_TICKS"><purpose>Y majro ticks group element. </purpose></enumvalue><enumvalue name="Y_MINOR_TICKS"><purpose>Y minor ticks group element. </purpose></enumvalue><enumvalue name="Y_MAJOR_GRID"><purpose>Y major grid group element. </purpose></enumvalue><enumvalue name="Y_MINOR_GRID"><purpose>Y minor grid group element. </purpose></enumvalue><enumvalue name="VALUE_LABELS"><purpose>axis values labels group element. </purpose></enumvalue><enumvalue name="Y_LABEL"><purpose>Y labels group element. </purpose></enumvalue><enumvalue name="X_LABEL"><purpose>X labels group element. </purpose></enumvalue><enumvalue name="BOX_AXIS"><purpose>Box axis group element. </purpose></enumvalue><enumvalue name="BOX"><purpose>box group element. </purpose></enumvalue><enumvalue name="MEDIAN"><purpose>median group element. </purpose></enumvalue><enumvalue name="WHISKER"><purpose>whisker group element. </purpose></enumvalue><enumvalue name="MILD_OUTLIERS"><purpose>mild outliers group element. </purpose></enumvalue><enumvalue name="EXTREME_OUTLIERS"><purpose>extreme outliers group element. </purpose></enumvalue><enumvalue name="DATA_VALUE_LABELS"><purpose>Data values labels group element. </purpose></enumvalue><enumvalue name="PLOT_TITLE"><purpose>Whole plot title text group element. </purpose></enumvalue><enumvalue name="PLOT_NOTES"><purpose>Free text and shapes to annotate diagram. </purpose></enumvalue><enumvalue name="BOXPLOT_DOC_CHILDREN"/><purpose>groups that form the boxplot svg document structure. Order controls the painting order, later ones overwriting earlier layers. </purpose></enum>
<data-member name="document_ids_"><type>std::string</type><purpose>String descriptors used in SVG XML (matching enum boxplot_doc_structure). </purpose></data-member>
</namespace>





























































</namespace>
</namespace>
</header>
<header name="boost/svg_plot/detail/svg_style_detail.hpp">
<para>Plot document structure whose order controls the painting order, later layers overwriting earlier layers. </para><namespace name="boost">
<namespace name="svg">





























































</namespace>
</namespace>
</header>
<header name="boost/svg_plot/detail/svg_tag.hpp">
<para>Boost.Plot SVG plot Implemention details. </para><para>See svg.hpp etc for user functions. svg_tag.hpp defines all classes that can occur in the SVG parse tree.</para><para><para>Jacob Voytko and Paul A. Bristow </para>
</para><namespace name="boost">
<namespace name="svg">
<struct name="a_path"><inherit access="public">boost::svg::path_point</inherit><purpose>Draws a elliptical arc from the current point to (x,y), using two radii, axis rotation, and two control flags. </purpose><description><para>See 8.3.8 The elliptical arc curve commands.! Useful for pie charts, etc. </para></description><data-member name="large_arc"><type>bool</type><purpose>true if arc &gt;= 180 degrees wanted. </purpose></data-member>
<data-member name="relative"><type>bool</type><purpose>If true relative else absolute. </purpose></data-member>
<data-member name="rx"><type>double</type><purpose>X radius. </purpose></data-member>
<data-member name="ry"><type>double</type><purpose>Y radius. </purpose></data-member>
<data-member name="sweep"><type>bool</type><purpose>true if to draw in positive-angle direction </purpose></data-member>
<data-member name="x"><type>double</type><purpose>X End of arc from current point. </purpose></data-member>
<data-member name="x_axis_rotation"><type>double</type><purpose>Any rotation of the X axis. </purpose></data-member>
<data-member name="y"><type>double</type><purpose>Y End of arc from current point. </purpose></data-member>
<method-group name="public member functions">
<method name="write" specifiers="virtual"><type>void</type><parameter name="rhs"><paramtype>std::ostream &amp;</paramtype></parameter><purpose>write functions output SVG commands like "M1.2, 3.4", </purpose><description><para>Write elliptical arc path XML to ostream. </para></description></method>
</method-group>
<constructor><parameter name="x"><paramtype>double</paramtype></parameter><parameter name="y"><paramtype>double</paramtype></parameter><parameter name="rx"><paramtype>double</paramtype></parameter><parameter name="ry"><paramtype>double</paramtype></parameter><parameter name="x_axis_rotation"><paramtype>double</paramtype></parameter><parameter name="large_arc"><paramtype>bool</paramtype><default>false</default></parameter><parameter name="sweep"><paramtype>bool</paramtype><default>false</default></parameter><parameter name="relative"><paramtype>bool</paramtype><default>false</default></parameter><purpose>Construct elliptic arc path. </purpose></constructor>
</struct><struct name="c_path"><inherit access="public">boost::svg::path_point</inherit><purpose>Draws a cubic Bezier curve from the current point to (x, y) using (x1, y1). </purpose><description><para>8.3.5 The curve commands: C, Q &amp; A. </para></description><data-member name="relative"><type>bool</type><purpose>If true relative else absolute. </purpose></data-member>
<data-member name="x"><type>double</type><purpose>Current (start point). </purpose></data-member>
<data-member name="x1"><type>double</type><purpose>Middle of curve. </purpose></data-member>
<data-member name="x2"><type>double</type><purpose>End point. </purpose></data-member>
<data-member name="y"><type>double</type><purpose>Current (start point). </purpose></data-member>
<data-member name="y1"><type>double</type><purpose>Middle of curve. </purpose></data-member>
<data-member name="y2"><type>double</type><purpose>End point. </purpose></data-member>
<method-group name="public member functions">
<method name="write" specifiers="virtual"><type>void</type><parameter name="rhs"><paramtype>std::ostream &amp;</paramtype></parameter><purpose>write functions output SVG commands like "M1.2, 3.4", </purpose><description><para>&lt; Write a cubic Bezier curve SVG XML to ostream. </para></description></method>
</method-group>
<constructor><parameter name="x1"><paramtype>double</paramtype></parameter><parameter name="y1"><paramtype>double</paramtype></parameter><parameter name="x2"><paramtype>double</paramtype></parameter><parameter name="y2"><paramtype>double</paramtype></parameter><parameter name="x"><paramtype>double</paramtype></parameter><parameter name="y"><paramtype>double</paramtype></parameter><parameter name="relative"><paramtype>bool</paramtype><default>false</default></parameter><description><para>&lt; Constructor defines all member variables. </para></description></constructor>
</struct><class name="circle_element"><inherit access="public">boost::svg::svg_element</inherit><purpose>Circle from center coordinate, and radius. </purpose><description><para>Represents a single circle. <ulink url="http://www.w3.org/TR/SVG/shapes.html#CircleElement">http://www.w3.org/TR/SVG/shapes.html#CircleElement</ulink> </para></description><method-group name="public member functions">
<method name="class_id"><type>void</type><parameter name="class_id"><paramtype>const std::string &amp;</paramtype></parameter><description><para>Class class id, non-unique identifier for an element.</para><para><ulink url="http://www.w3.org/TR/2001/REC-SVG-20010904/styling.html#ClassAttribute">http://www.w3.org/TR/2001/REC-SVG-20010904/styling.html#ClassAttribute</ulink> 6.12 Attributes common to all elements: id and xml:base Example: class="info"</para></description></method>
<method name="class_id"><type>std::string</type><description><para>Class id, non-unique identifier for an element. </para></description></method>
<method name="clip_id"><type>void</type><parameter name="id"><paramtype>const std::string &amp;</paramtype></parameter><description><para>Set name of a clip path, for example: g_ptr.clip_id(plot_window_clip_); </para></description></method>
<method name="clip_id"><type>std::string</type><description><para>
</para></description><returns><para>name of a clip path, for example: g_ptr.clip_id(plot_window_clip_); </para></returns></method>
<method name="id"><type>void</type><parameter name="id"><paramtype>const std::string &amp;</paramtype></parameter><description><para>Provide a unique name for an element. Example: id="plotBackground"</para><para>See <ulink url="http://www.w3.org/TR/SVG/struct.html#IDAttribute">http://www.w3.org/TR/SVG/struct.html#IDAttribute</ulink> 5.10.1 Attributes common to all elements: id and xml:base The id and xml:base attributes are available on all SVG elements: Attribute definitions: id = "name" Standard XML attribute for assigning a unique name to an element. Refer to the "Extensible Markup Language (XML) 1.0" Recommendation [XML10]. xml:base = "&lt;uri&gt;" Specifies a base URI other than the base URI of the document or external entity. Refer to the "XML Base" specification [XML-BASE]. A group of elements, as well as individual objects, can be given a name using the id attribute. Named groups are needed for several purposes such as animation and re-usable objects.</para></description></method>
<method name="id"><type>std::string</type><description><para>
</para></description><returns><para>the unique name for an element, for example id() ="plotBackground". </para></returns></method>
<method name="operator!="><type>bool</type><parameter name="lhs"><paramtype>const <classname>svg_element</classname> &amp;</paramtype></parameter><description><para>Compare svg_elements for inequality, useful for Boost.Test. </para></description></method>
<method name="operator=="><type>bool</type><parameter name="lhs"><paramtype>const <classname>svg_element</classname> &amp;</paramtype></parameter><description><para>Compare svg_elements, useful for Boost.Test. </para></description></method>
<method name="style"><type><classname>svg_style</classname> &amp;</type><description><para>
</para></description><returns><para>reference to <classname alt="boost::svg::svg_style">svg_style</classname> to provide indirect access to colors &amp; width via style().stroke_color(), fill_color(), width() </para></returns></method>
<method name="style" cv="const"><type>const <classname>svg_style</classname> &amp;</type><description><para>
</para></description><returns><para>reference to const <classname alt="boost::svg::svg_style">svg_style</classname> to provide indirect access to colors &amp; width via style().stroke_color(), fill_color(), width() (const version). </para></returns></method>
<method name="write" specifiers="virtual"><type>void</type><parameter name="rhs"><paramtype>std::ostream &amp;</paramtype></parameter><purpose>write functions output SVG commands. </purpose><description><para>Output SVG XML    Example: &lt;circle cx="9.78571" cy="185" r="5"/&gt;
</para></description></method>
</method-group>
<constructor><parameter name="x"><paramtype>double</paramtype></parameter><parameter name="y"><paramtype>double</paramtype></parameter><parameter name="radius"><paramtype>double</paramtype><default>5</default></parameter><description><para>Constructor defines all private data (default radius only). </para></description></constructor>
<constructor><parameter name="x"><paramtype>double</paramtype></parameter><parameter name="y"><paramtype>double</paramtype></parameter><parameter name="radius"><paramtype>double</paramtype></parameter><parameter name="style_info"><paramtype>const <classname>svg_style</classname> &amp;</paramtype></parameter><parameter name="id_name"><paramtype>const std::string &amp;</paramtype><default>""</default></parameter><parameter name="class_name"><paramtype>const std::string &amp;</paramtype><default>""</default></parameter><parameter name="clip_name"><paramtype>const std::string &amp;</paramtype><default>""</default></parameter><description><para>Constructor defines all private data. </para></description></constructor>
<method-group name="protected member functions">
<method name="write_attributes"><type>void</type><parameter name="s_out"><paramtype>std::ostream &amp;</paramtype></parameter><description><para>Output group_element id and clip-path.</para><para>Classes inherited from <classname alt="boost::svg::svg_element">svg_element</classname> add other references, 5.3.1, like color, fill, stroke, gradients...</para></description></method>
</method-group>
</class><class name="clip_path_element"><inherit access="public">boost::svg::svg_element</inherit><purpose>The clipping path restricts the region to which paint can be applied. </purpose><description><para>14.3 Clipping paths <ulink url="http://www.w3.org/TR/SVG/masking.html#ClipPathProperty">http://www.w3.org/TR/SVG/masking.html#ClipPathProperty</ulink>. </para></description><data-member name="element_id"><type>std::string</type><purpose>SVG element id. </purpose></data-member>
<data-member name="rect"><type><classname>rect_element</classname></type><purpose>Clipping rectangle. </purpose></data-member>
<method-group name="public member functions">
<method name="class_id"><type>void</type><parameter name="class_id"><paramtype>const std::string &amp;</paramtype></parameter><description><para>Class class id, non-unique identifier for an element.</para><para><ulink url="http://www.w3.org/TR/2001/REC-SVG-20010904/styling.html#ClassAttribute">http://www.w3.org/TR/2001/REC-SVG-20010904/styling.html#ClassAttribute</ulink> 6.12 Attributes common to all elements: id and xml:base Example: class="info"</para></description></method>
<method name="class_id"><type>std::string</type><description><para>Class id, non-unique identifier for an element. </para></description></method>
<method name="clip_id"><type>void</type><parameter name="id"><paramtype>const std::string &amp;</paramtype></parameter><description><para>Set name of a clip path, for example: g_ptr.clip_id(plot_window_clip_); </para></description></method>
<method name="clip_id"><type>std::string</type><description><para>
</para></description><returns><para>name of a clip path, for example: g_ptr.clip_id(plot_window_clip_); </para></returns></method>
<method name="id"><type>void</type><parameter name="id"><paramtype>const std::string &amp;</paramtype></parameter><description><para>Provide a unique name for an element. Example: id="plotBackground"</para><para>See <ulink url="http://www.w3.org/TR/SVG/struct.html#IDAttribute">http://www.w3.org/TR/SVG/struct.html#IDAttribute</ulink> 5.10.1 Attributes common to all elements: id and xml:base The id and xml:base attributes are available on all SVG elements: Attribute definitions: id = "name" Standard XML attribute for assigning a unique name to an element. Refer to the "Extensible Markup Language (XML) 1.0" Recommendation [XML10]. xml:base = "&lt;uri&gt;" Specifies a base URI other than the base URI of the document or external entity. Refer to the "XML Base" specification [XML-BASE]. A group of elements, as well as individual objects, can be given a name using the id attribute. Named groups are needed for several purposes such as animation and re-usable objects.</para></description></method>
<method name="id"><type>std::string</type><description><para>
</para></description><returns><para>the unique name for an element, for example id() ="plotBackground". </para></returns></method>
<method name="operator!="><type>bool</type><parameter name="lhs"><paramtype>const <classname>svg_element</classname> &amp;</paramtype></parameter><description><para>Compare svg_elements for inequality, useful for Boost.Test. </para></description></method>
<method name="operator=="><type>bool</type><parameter name="lhs"><paramtype>const <classname>svg_element</classname> &amp;</paramtype></parameter><description><para>Compare svg_elements, useful for Boost.Test. </para></description></method>
<method name="style"><type><classname>svg_style</classname> &amp;</type><description><para>
</para></description><returns><para>reference to <classname alt="boost::svg::svg_style">svg_style</classname> to provide indirect access to colors &amp; width via style().stroke_color(), fill_color(), width() </para></returns></method>
<method name="style" cv="const"><type>const <classname>svg_style</classname> &amp;</type><description><para>
</para></description><returns><para>reference to const <classname alt="boost::svg::svg_style">svg_style</classname> to provide indirect access to colors &amp; width via style().stroke_color(), fill_color(), width() (const version). </para></returns></method>
<method name="write" specifiers="virtual"><type>void</type><parameter name="rhs"><paramtype>std::ostream &amp;</paramtype></parameter><purpose>write functions output SVG commands. </purpose><description><para>&lt; Write clip path to ostream. </para></description></method>
</method-group>
<constructor><parameter name="id"><paramtype>const std::string &amp;</paramtype></parameter><parameter name="rect"><paramtype>const <classname>rect_element</classname> &amp;</paramtype></parameter><description><para>&lt; Constructor defines all member variables. </para></description></constructor>
<method-group name="protected member functions">
<method name="write_attributes"><type>void</type><parameter name="s_out"><paramtype>std::ostream &amp;</paramtype></parameter><description><para>Output group_element id and clip-path.</para><para>Classes inherited from <classname alt="boost::svg::svg_element">svg_element</classname> add other references, 5.3.1, like color, fill, stroke, gradients...</para></description></method>
</method-group>
</class><class name="ellipse_element"><inherit access="public">boost::svg::svg_element</inherit><purpose>Ellipse from center coordinate, and radius. </purpose><description><para>Represents a single ellipse. <ulink url="http://www.w3.org/TR/SVG/shapes.html#EllipseElement">http://www.w3.org/TR/SVG/shapes.html#EllipseElement</ulink> 9.4 The 'ellipse' element. Default is 'horizontal' but can be rotated. </para></description><method-group name="public member functions">
<method name="class_id"><type>void</type><parameter name="class_id"><paramtype>const std::string &amp;</paramtype></parameter><description><para>Class class id, non-unique identifier for an element.</para><para><ulink url="http://www.w3.org/TR/2001/REC-SVG-20010904/styling.html#ClassAttribute">http://www.w3.org/TR/2001/REC-SVG-20010904/styling.html#ClassAttribute</ulink> 6.12 Attributes common to all elements: id and xml:base Example: class="info"</para></description></method>
<method name="class_id"><type>std::string</type><description><para>Class id, non-unique identifier for an element. </para></description></method>
<method name="clip_id"><type>void</type><parameter name="id"><paramtype>const std::string &amp;</paramtype></parameter><description><para>Set name of a clip path, for example: g_ptr.clip_id(plot_window_clip_); </para></description></method>
<method name="clip_id"><type>std::string</type><description><para>
</para></description><returns><para>name of a clip path, for example: g_ptr.clip_id(plot_window_clip_); </para></returns></method>
<method name="id"><type>void</type><parameter name="id"><paramtype>const std::string &amp;</paramtype></parameter><description><para>Provide a unique name for an element. Example: id="plotBackground"</para><para>See <ulink url="http://www.w3.org/TR/SVG/struct.html#IDAttribute">http://www.w3.org/TR/SVG/struct.html#IDAttribute</ulink> 5.10.1 Attributes common to all elements: id and xml:base The id and xml:base attributes are available on all SVG elements: Attribute definitions: id = "name" Standard XML attribute for assigning a unique name to an element. Refer to the "Extensible Markup Language (XML) 1.0" Recommendation [XML10]. xml:base = "&lt;uri&gt;" Specifies a base URI other than the base URI of the document or external entity. Refer to the "XML Base" specification [XML-BASE]. A group of elements, as well as individual objects, can be given a name using the id attribute. Named groups are needed for several purposes such as animation and re-usable objects.</para></description></method>
<method name="id"><type>std::string</type><description><para>
</para></description><returns><para>the unique name for an element, for example id() ="plotBackground". </para></returns></method>
<method name="operator!="><type>bool</type><parameter name="lhs"><paramtype>const <classname>svg_element</classname> &amp;</paramtype></parameter><description><para>Compare svg_elements for inequality, useful for Boost.Test. </para></description></method>
<method name="operator=="><type>bool</type><parameter name="lhs"><paramtype>const <classname>svg_element</classname> &amp;</paramtype></parameter><description><para>Compare svg_elements, useful for Boost.Test. </para></description></method>
<method name="style"><type><classname>svg_style</classname> &amp;</type><description><para>
</para></description><returns><para>reference to <classname alt="boost::svg::svg_style">svg_style</classname> to provide indirect access to colors &amp; width via style().stroke_color(), fill_color(), width() </para></returns></method>
<method name="style" cv="const"><type>const <classname>svg_style</classname> &amp;</type><description><para>
</para></description><returns><para>reference to const <classname alt="boost::svg::svg_style">svg_style</classname> to provide indirect access to colors &amp; width via style().stroke_color(), fill_color(), width() (const version). </para></returns></method>
<method name="write" specifiers="virtual"><type>void</type><parameter name="rhs"><paramtype>std::ostream &amp;</paramtype></parameter><purpose>write functions output SVG commands. </purpose><description><para>Output SVG XML for ellipse. Example: &lt;ellipse rx="250" ry="100" fill="red" /&gt;</para></description></method>
</method-group>
<constructor><parameter name="cx"><paramtype>double</paramtype></parameter><parameter name="cy"><paramtype>double</paramtype></parameter><parameter name="rx"><paramtype>double</paramtype><default>4</default></parameter><parameter name="ry"><paramtype>double</paramtype><default>8</default></parameter><purpose>rotation in degrees from horizontal (default 0.). </purpose><description><para>&lt; Constructor defines all private data (with default radii). </para></description></constructor>
<constructor><parameter name="cx"><paramtype>double</paramtype></parameter><parameter name="cy"><paramtype>double</paramtype></parameter><parameter name="rx"><paramtype>double</paramtype></parameter><parameter name="ry"><paramtype>double</paramtype></parameter><parameter name="style_info"><paramtype>const <classname>svg_style</classname> &amp;</paramtype></parameter><parameter name="id_name"><paramtype>const std::string &amp;</paramtype><default>""</default></parameter><parameter name="class_name"><paramtype>const std::string &amp;</paramtype><default>""</default></parameter><parameter name="clip_name"><paramtype>const std::string &amp;</paramtype><default>""</default></parameter><description><para>&lt; Constructor sets ellipse and its style (defaults define all private data). </para></description></constructor>
<constructor><parameter name="cx"><paramtype>double</paramtype></parameter><parameter name="cy"><paramtype>double</paramtype></parameter><parameter name="style_info"><paramtype>const <classname>svg_style</classname> &amp;</paramtype></parameter><parameter name="id_name"><paramtype>const std::string &amp;</paramtype><default>""</default></parameter><parameter name="class_name"><paramtype>const std::string &amp;</paramtype><default>""</default></parameter><parameter name="clip_name"><paramtype>const std::string &amp;</paramtype><default>""</default></parameter><description><para>&lt; Constructor that also includes style, id, class and clip. </para></description></constructor>
<method-group name="protected member functions">
<method name="write_attributes"><type>void</type><parameter name="s_out"><paramtype>std::ostream &amp;</paramtype></parameter><description><para>Output group_element id and clip-path.</para><para>Classes inherited from <classname alt="boost::svg::svg_element">svg_element</classname> add other references, 5.3.1, like color, fill, stroke, gradients...</para></description></method>
</method-group>
</class><class name="g_element"><inherit access="public">boost::svg::svg_element</inherit><purpose><classname alt="boost::svg::g_element">g_element</classname> (group element) is the node element of our document tree. 'g' element is a container element for grouping together: </purpose><description><para>&lt;g&gt; ... &lt;/g&gt;  </para><para><classname alt="boost::svg::g_element">g_element</classname> ('g' element is a container element for grouping together related graphics elements).<sbr/>
 See <ulink url="http://www.w3.org/TR/SVG/struct.html#NewDocument">http://www.w3.org/TR/SVG/struct.html#NewDocument</ulink> 5.2.1 Overview.</para><para>'g' element is a container element for grouping together&lt;g /&gt; &lt;/g&gt; related graphics elements, for example, an image background rectangle with border and fill: &lt;g id="background" fill="rgb(255,255,255)"&gt;&lt;rect width="500" height="350"/&gt;&lt;/g&gt; </para></description><data-member name="children"><type>ptr_vector&lt; <classname>svg_element</classname> &gt;</type><description><para>Children of this group element node, containg graphics elements like text, circle line, polyline... </para></description></data-member>
<data-member name="clip_name"><type>std::string</type><purpose>Name of clip path. </purpose></data-member>
<data-member name="clip_on"><type>bool</type><purpose>true if to clip anything outside the clip path. </purpose></data-member>
<method-group name="public member functions">
<method name="add_g_element"><type><classname>g_element</classname> &amp;</type><description><para>Add a new group element. 
</para></description><returns><para>A reference to the new child node just created. </para></returns></method>
<method name="circle"><type><classname>circle_element</classname> &amp;</type><parameter name="x"><paramtype>double</paramtype></parameter><parameter name="y"><paramtype>double</paramtype></parameter><parameter name="radius"><paramtype>unsigned int</paramtype><default>5</default></parameter><description><para>Add a new circle element. 
</para></description><returns><para>A reference to the new child node just created. </para></returns></method>
<method name="class_id"><type>void</type><parameter name="class_id"><paramtype>const std::string &amp;</paramtype></parameter><description><para>Class class id, non-unique identifier for an element.</para><para><ulink url="http://www.w3.org/TR/2001/REC-SVG-20010904/styling.html#ClassAttribute">http://www.w3.org/TR/2001/REC-SVG-20010904/styling.html#ClassAttribute</ulink> 6.12 Attributes common to all elements: id and xml:base Example: class="info"</para></description></method>
<method name="class_id"><type>std::string</type><description><para>Class id, non-unique identifier for an element. </para></description></method>
<method name="clear"><type>void</type><description><para>Remove all the child nodes. </para></description></method>
<method name="clip_id"><type>void</type><parameter name="id"><paramtype>const std::string &amp;</paramtype></parameter><description><para>Set name of a clip path, for example: g_ptr.clip_id(plot_window_clip_); </para></description></method>
<method name="clip_id"><type>std::string</type><description><para>
</para></description><returns><para>name of a clip path, for example: g_ptr.clip_id(plot_window_clip_); </para></returns></method>
<method name="ellipse"><type><classname>ellipse_element</classname> &amp;</type><parameter name="rx"><paramtype>double</paramtype></parameter><parameter name="ry"><paramtype>double</paramtype></parameter><parameter name="cx"><paramtype>double</paramtype></parameter><parameter name="cy"><paramtype>double</paramtype></parameter><description><para>Add a new ellipse element. 
</para></description><returns><para>A reference to the new child node just created. </para></returns></method>
<method name="g"><type><classname>g_element</classname> &amp;</type><parameter name="i"><paramtype>int</paramtype></parameter><description><para>i is index of children nodes. </para></description></method>
<method name="hexagon"><type><classname>polygon_element</classname> &amp;</type><parameter name="x1"><paramtype>double</paramtype></parameter><parameter name="y1"><paramtype>double</paramtype></parameter><parameter name="x2"><paramtype>double</paramtype></parameter><parameter name="y2"><paramtype>double</paramtype></parameter><parameter name="x3"><paramtype>double</paramtype></parameter><parameter name="y3"><paramtype>double</paramtype></parameter><parameter name="x4"><paramtype>double</paramtype></parameter><parameter name="y4"><paramtype>double</paramtype></parameter><parameter name="x5"><paramtype>double</paramtype></parameter><parameter name="y5"><paramtype>double</paramtype></parameter><parameter name="x6"><paramtype>double</paramtype></parameter><parameter name="y6"><paramtype>double</paramtype></parameter><parameter name="f"><paramtype>bool</paramtype><default>true</default></parameter><description><para>Add a new hexagon element. 
</para></description><returns><para>A reference to the new child node just created. </para></returns></method>
<method name="id"><type>void</type><parameter name="id"><paramtype>const std::string &amp;</paramtype></parameter><description><para>Provide a unique name for an element. Example: id="plotBackground"</para><para>See <ulink url="http://www.w3.org/TR/SVG/struct.html#IDAttribute">http://www.w3.org/TR/SVG/struct.html#IDAttribute</ulink> 5.10.1 Attributes common to all elements: id and xml:base The id and xml:base attributes are available on all SVG elements: Attribute definitions: id = "name" Standard XML attribute for assigning a unique name to an element. Refer to the "Extensible Markup Language (XML) 1.0" Recommendation [XML10]. xml:base = "&lt;uri&gt;" Specifies a base URI other than the base URI of the document or external entity. Refer to the "XML Base" specification [XML-BASE]. A group of elements, as well as individual objects, can be given a name using the id attribute. Named groups are needed for several purposes such as animation and re-usable objects.</para></description></method>
<method name="id"><type>std::string</type><description><para>
</para></description><returns><para>the unique name for an element, for example id() ="plotBackground". </para></returns></method>
<method name="line"><type><classname>line_element</classname> &amp;</type><parameter name="x1"><paramtype>double</paramtype></parameter><parameter name="y1"><paramtype>double</paramtype></parameter><parameter name="x2"><paramtype>double</paramtype></parameter><parameter name="y2"><paramtype>double</paramtype></parameter><description><para>Add a new line element. 
</para></description><returns><para>A reference to the new child node just created. </para></returns></method>
<method name="operator!="><type>bool</type><parameter name="lhs"><paramtype>const <classname>svg_element</classname> &amp;</paramtype></parameter><description><para>Compare svg_elements for inequality, useful for Boost.Test. </para></description></method>
<method name="operator=="><type>bool</type><parameter name="lhs"><paramtype>const <classname>svg_element</classname> &amp;</paramtype></parameter><description><para>Compare svg_elements, useful for Boost.Test. </para></description></method>
<method name="operator[]"><type><classname>svg_element</classname> &amp;</type><parameter name="i"><paramtype>unsigned int</paramtype></parameter><description><para>
</para></description><returns><para>child <classname alt="boost::svg::svg_element">svg_element</classname> node. </para></returns></method>
<method name="path"><type><classname>path_element</classname> &amp;</type><description><para>Add a new path element. 
</para></description><returns><para>A reference to the new path just created. </para></returns></method>
<method name="pentagon"><type><classname>polygon_element</classname> &amp;</type><parameter name="x1"><paramtype>double</paramtype></parameter><parameter name="y1"><paramtype>double</paramtype></parameter><parameter name="x2"><paramtype>double</paramtype></parameter><parameter name="y2"><paramtype>double</paramtype></parameter><parameter name="x3"><paramtype>double</paramtype></parameter><parameter name="y3"><paramtype>double</paramtype></parameter><parameter name="x4"><paramtype>double</paramtype></parameter><parameter name="y4"><paramtype>double</paramtype></parameter><parameter name="x5"><paramtype>double</paramtype></parameter><parameter name="y5"><paramtype>double</paramtype></parameter><parameter name="f"><paramtype>bool</paramtype><default>true</default></parameter><description><para>Add a new pentagon element. 
</para></description><returns><para>A reference to the new child node just created. </para></returns></method>
<method name="polygon"><type><classname>polygon_element</classname> &amp;</type><parameter name="x"><paramtype>double</paramtype></parameter><parameter name="y"><paramtype>double</paramtype></parameter><parameter name="f"><paramtype>bool</paramtype><default>true</default></parameter><description><para>Add a new polygon element. 
</para></description><returns><para>A reference to the new child node just created. </para></returns></method>
<method name="polygon"><type><classname>polygon_element</classname> &amp;</type><parameter name="v"><paramtype>std::vector&lt; <classname>poly_path_point</classname> &gt; &amp;</paramtype></parameter><parameter name="f"><paramtype>bool</paramtype><default>true</default></parameter><description><para>Add a new complete polygon element. 
</para></description><returns><para>A reference to the new child node just created.// push_back a complete many-sided polygon to the document. </para></returns></method>
<method name="polygon"><type><classname>polygon_element</classname> &amp;</type><description><para>Add a new polygon element. 
</para></description><returns><para>A reference to the new polygon element just created. </para></returns></method>
<method name="polyline"><type><classname>polyline_element</classname> &amp;</type><parameter name="v"><paramtype>std::vector&lt; <classname>poly_path_point</classname> &gt; &amp;</paramtype></parameter><description><para>Add a new complete polyline. 
</para></description><returns><para>A reference to the new child node just created. </para></returns></method>
<method name="polyline"><type><classname>polyline_element</classname> &amp;</type><parameter name="x"><paramtype>double</paramtype></parameter><parameter name="y"><paramtype>double</paramtype></parameter><description><para>Add a new polyline element, but 1st point only, add others later with .P(x, y)... 
</para></description><returns><para>A reference to the new child node just created. </para></returns></method>
<method name="polyline"><type><classname>polyline_element</classname> &amp;</type><description><para>Add a new polyline element. 
</para></description><returns><para>A reference to the new polyline element just created. </para></returns></method>
<method name="push_back"><type>void</type><parameter name="g"><paramtype><classname>svg_element</classname> *</paramtype></parameter><description><para>Add a new child node <classname alt="boost::svg::g_element">g_element</classname>. </para></description></method>
<method name="rect"><type><classname>rect_element</classname> &amp;</type><parameter name="x1"><paramtype>double</paramtype></parameter><parameter name="y1"><paramtype>double</paramtype></parameter><parameter name="x2"><paramtype>double</paramtype></parameter><parameter name="y2"><paramtype>double</paramtype></parameter><description><para>Add a new rect element. 
</para></description><returns><para>A reference to the new child node just created. </para></returns></method>
<method name="rhombus"><type><classname>polygon_element</classname> &amp;</type><parameter name="x1"><paramtype>double</paramtype></parameter><parameter name="y1"><paramtype>double</paramtype></parameter><parameter name="x2"><paramtype>double</paramtype></parameter><parameter name="y2"><paramtype>double</paramtype></parameter><parameter name="x3"><paramtype>double</paramtype></parameter><parameter name="y3"><paramtype>double</paramtype></parameter><parameter name="x4"><paramtype>double</paramtype></parameter><parameter name="y4"><paramtype>double</paramtype></parameter><parameter name="f"><paramtype>bool</paramtype><default>true</default></parameter><description><para>Add a new rhombus element. 
</para></description><returns><para>A reference to the new child node just created. </para></returns></method>
<method name="size"><type>size_t</type><description><para>
</para></description><returns><para>Number of child nodes. </para></returns></method>
<method name="style"><type><classname>svg_style</classname> &amp;</type><description><para>
</para></description><returns><para>reference to <classname alt="boost::svg::svg_style">svg_style</classname> to provide indirect access to colors &amp; width via style().stroke_color(), fill_color(), width() </para></returns></method>
<method name="style" cv="const"><type>const <classname>svg_style</classname> &amp;</type><description><para>
</para></description><returns><para>reference to const <classname alt="boost::svg::svg_style">svg_style</classname> to provide indirect access to colors &amp; width via style().stroke_color(), fill_color(), width() (const version). </para></returns></method>
<method name="text"><type><classname>text_element</classname> &amp;</type><parameter name="x"><paramtype>double</paramtype><default>0.</default></parameter><parameter name="y"><paramtype>double</paramtype><default>0.</default></parameter><parameter name="text"><paramtype>const std::string &amp;</paramtype><default>""</default></parameter><parameter name="style"><paramtype>const <classname>text_style</classname> &amp;</paramtype><default>no_style</default></parameter><parameter name="align"><paramtype>const align_style &amp;</paramtype><default>left_align</default></parameter><parameter name="rotate"><paramtype>const rotate_style &amp;</paramtype><default>horizontal</default></parameter><description><para>Add a new text element. 
</para></description><returns><para>A reference to the new child node just created. </para></returns></method>
<method name="triangle"><type><classname>polygon_element</classname> &amp;</type><parameter name="x1"><paramtype>double</paramtype></parameter><parameter name="y1"><paramtype>double</paramtype></parameter><parameter name="x2"><paramtype>double</paramtype></parameter><parameter name="y2"><paramtype>double</paramtype></parameter><parameter name="x3"><paramtype>double</paramtype></parameter><parameter name="y3"><paramtype>double</paramtype></parameter><parameter name="f"><paramtype>bool</paramtype><default>true</default></parameter><description><para>Add a new triangle element. 
</para></description><returns><para>A reference to the new child node just created. </para></returns></method>
<method name="write" specifiers="virtual"><type>void</type><parameter name="rhs"><paramtype>std::ostream &amp;</paramtype></parameter><purpose>write functions output SVG commands. </purpose><description><para>Output all children of a group element.      Example:
     &lt;g fill="rgb(255,255,255)" id="background"&gt;&lt;rect x="0" y="0" width="500" height="350"/&gt;&lt;/g&gt;</para><para>  Avoid useless output like: &lt;g id="legendBackground"&gt;&lt;/g&gt;
  TODO check this doesn't mean that useful style is lost?
</para></description></method>
</method-group>
<constructor><description><para>Construct <classname alt="boost::svg::g_element">g_element</classname> (with no clipping). </para></description></constructor>
<method-group name="protected member functions">
<method name="write_attributes"><type>void</type><parameter name="s_out"><paramtype>std::ostream &amp;</paramtype></parameter><description><para>Output group_element id and clip-path.</para><para>Classes inherited from <classname alt="boost::svg::svg_element">svg_element</classname> add other references, 5.3.1, like color, fill, stroke, gradients...</para></description></method>
</method-group>
</class><struct name="h_path"><inherit access="public">boost::svg::path_point</inherit><purpose>Draws a horizontal line from the current point (cpx, cpy) to (x, cpy). which becomes the new current point. No y needed, start from current point y. </purpose><data-member name="relative"><type>bool</type><purpose>If true relative else absolute. </purpose></data-member>
<data-member name="x"><type>double</type><purpose>x horizontal SVG coordinate. </purpose></data-member>
<method-group name="public member functions">
<method name="write" specifiers="virtual"><type>void</type><parameter name="rhs"><paramtype>std::ostream &amp;</paramtype></parameter><purpose>write functions output SVG commands like "M1.2, 3.4", </purpose><description><para>Write horizontal line SVG command. </para></description></method>
</method-group>
<constructor><parameter name="x"><paramtype>double</paramtype></parameter><parameter name="relative"><paramtype>bool</paramtype><default>false</default></parameter><description><para>&lt; Constructor defines all member variables. </para></description></constructor>
</struct><struct name="l_path"><inherit access="public">boost::svg::path_point</inherit><purpose>Draw a line from the current point to the given (x,y) coordinate which becomes the new current point. </purpose><data-member name="relative"><type>bool</type><purpose>If true relative else absolute. </purpose></data-member>
<data-member name="x"><type>double</type><purpose>End of line SVG X coordinate. </purpose></data-member>
<data-member name="y"><type>double</type><purpose>End of line SVG Y coordinate. </purpose></data-member>
<method-group name="public member functions">
<method name="write" specifiers="virtual"><type>void</type><parameter name="rhs"><paramtype>std::ostream &amp;</paramtype></parameter><purpose>write functions output SVG commands like "M1.2, 3.4", </purpose><description><para>Write line to SVG command. </para></description></method>
</method-group>
<constructor><parameter name="x"><paramtype>double</paramtype></parameter><parameter name="y"><paramtype>double</paramtype></parameter><parameter name="relative"><paramtype>bool</paramtype><default>false</default></parameter><description><para>Constructor defines all member variables. </para></description></constructor>
</struct><class name="line_element"><inherit access="public">boost::svg::svg_element</inherit><purpose>Line from (x1, y1) to (x2, y2). /details Straight line from SVG location (x1, y1) to (x2, y2). </purpose><data-member name="x1_"><type>double</type><purpose>Line from (x1_, x2_) to (y1_, y2_) </purpose></data-member>
<data-member name="x2_"><type>double</type><purpose>Line from (x1_, x2_) to (y1_, y2_) </purpose></data-member>
<data-member name="y1_"><type>double</type><purpose>Line from (x1_, x2_) to (y1_, y2_) </purpose></data-member>
<data-member name="y2_"><type>double</type><purpose>Line from (x1_, x2_) to (y1_, y2_) </purpose></data-member>
<method-group name="public member functions">
<method name="class_id"><type>void</type><parameter name="class_id"><paramtype>const std::string &amp;</paramtype></parameter><description><para>Class class id, non-unique identifier for an element.</para><para><ulink url="http://www.w3.org/TR/2001/REC-SVG-20010904/styling.html#ClassAttribute">http://www.w3.org/TR/2001/REC-SVG-20010904/styling.html#ClassAttribute</ulink> 6.12 Attributes common to all elements: id and xml:base Example: class="info"</para></description></method>
<method name="class_id"><type>std::string</type><description><para>Class id, non-unique identifier for an element. </para></description></method>
<method name="clip_id"><type>void</type><parameter name="id"><paramtype>const std::string &amp;</paramtype></parameter><description><para>Set name of a clip path, for example: g_ptr.clip_id(plot_window_clip_); </para></description></method>
<method name="clip_id"><type>std::string</type><description><para>
</para></description><returns><para>name of a clip path, for example: g_ptr.clip_id(plot_window_clip_); </para></returns></method>
<method name="id"><type>void</type><parameter name="id"><paramtype>const std::string &amp;</paramtype></parameter><description><para>Provide a unique name for an element. Example: id="plotBackground"</para><para>See <ulink url="http://www.w3.org/TR/SVG/struct.html#IDAttribute">http://www.w3.org/TR/SVG/struct.html#IDAttribute</ulink> 5.10.1 Attributes common to all elements: id and xml:base The id and xml:base attributes are available on all SVG elements: Attribute definitions: id = "name" Standard XML attribute for assigning a unique name to an element. Refer to the "Extensible Markup Language (XML) 1.0" Recommendation [XML10]. xml:base = "&lt;uri&gt;" Specifies a base URI other than the base URI of the document or external entity. Refer to the "XML Base" specification [XML-BASE]. A group of elements, as well as individual objects, can be given a name using the id attribute. Named groups are needed for several purposes such as animation and re-usable objects.</para></description></method>
<method name="id"><type>std::string</type><description><para>
</para></description><returns><para>the unique name for an element, for example id() ="plotBackground". </para></returns></method>
<method name="operator!="><type>bool</type><parameter name="lhs"><paramtype>const <classname>svg_element</classname> &amp;</paramtype></parameter><description><para>Compare svg_elements for inequality, useful for Boost.Test. </para></description></method>
<method name="operator=="><type>bool</type><parameter name="lhs"><paramtype>const <classname>svg_element</classname> &amp;</paramtype></parameter><description><para>Compare svg_elements, useful for Boost.Test. </para></description></method>
<method name="style"><type><classname>svg_style</classname> &amp;</type><description><para>
</para></description><returns><para>reference to <classname alt="boost::svg::svg_style">svg_style</classname> to provide indirect access to colors &amp; width via style().stroke_color(), fill_color(), width() </para></returns></method>
<method name="style" cv="const"><type>const <classname>svg_style</classname> &amp;</type><description><para>
</para></description><returns><para>reference to const <classname alt="boost::svg::svg_style">svg_style</classname> to provide indirect access to colors &amp; width via style().stroke_color(), fill_color(), width() (const version). </para></returns></method>
<method name="write" specifiers="virtual"><type>void</type><parameter name="rhs"><paramtype>std::ostream &amp;</paramtype></parameter><purpose>write functions output SVG commands. </purpose><description><para>output line from (x1_, y1_) to (x2_, y2_) by writing XML SVG command to draw a straight line.</para></description></method>
</method-group>
<constructor><parameter name="x1"><paramtype>double</paramtype></parameter><parameter name="y1"><paramtype>double</paramtype></parameter><parameter name="x2"><paramtype>double</paramtype></parameter><parameter name="y2"><paramtype>double</paramtype></parameter><description><para>Constructor assigning all <classname alt="boost::svg::line_element">line_element</classname> private data. </para></description></constructor>
<constructor><parameter name="x1"><paramtype>double</paramtype></parameter><parameter name="y1"><paramtype>double</paramtype></parameter><parameter name="x2"><paramtype>double</paramtype></parameter><parameter name="y2"><paramtype>double</paramtype></parameter><parameter name="style_info"><paramtype>const <classname>svg_style</classname> &amp;</paramtype></parameter><parameter name="id_name"><paramtype>const std::string &amp;</paramtype><default>""</default></parameter><parameter name="class_name"><paramtype>const std::string &amp;</paramtype><default>""</default></parameter><parameter name="clip_name"><paramtype>const std::string &amp;</paramtype><default>""</default></parameter><description><para>Constructor assigning all <classname alt="boost::svg::line_element">line_element</classname> private data, and also inherited <classname alt="boost::svg::svg_element">svg_element</classname> data. </para></description></constructor>
<method-group name="protected member functions">
<method name="write_attributes"><type>void</type><parameter name="s_out"><paramtype>std::ostream &amp;</paramtype></parameter><description><para>Output group_element id and clip-path.</para><para>Classes inherited from <classname alt="boost::svg::svg_element">svg_element</classname> add other references, 5.3.1, like color, fill, stroke, gradients...</para></description></method>
</method-group>
</class><struct name="m_path"><inherit access="public">boost::svg::path_point</inherit><purpose>move to coordinates (x, y) </purpose><description><para>See 8.3.2 The "moveto" commands. </para></description><data-member name="relative"><type>bool</type><purpose>If true relative else absolute. </purpose></data-member>
<data-member name="x"><type>double</type><purpose>End of move SVG X coordinate. </purpose></data-member>
<data-member name="y"><type>double</type><purpose>End of move SVG Y coordinate. </purpose></data-member>
<method-group name="public member functions">
<method name="write" specifiers="virtual"><type>void</type><parameter name="rhs"><paramtype>std::ostream &amp;</paramtype></parameter><purpose>write functions output SVG commands like "M1.2, 3.4", </purpose><description><para>write moveto X and Y coordinates to stream, for example: "M52.8571,180 " </para></description></method>
</method-group>
<constructor><parameter name="x"><paramtype>double</paramtype></parameter><parameter name="y"><paramtype>double</paramtype></parameter><parameter name="relative"><paramtype>bool</paramtype><default>false</default></parameter><description><para>Construct a move to </para></description></constructor>
</struct><class name="path_element"><inherit access="public">boost::svg::svg_element</inherit><purpose>Path element holds places on a path used by move, line ... </purpose><description><para><ulink url="http://www.w3.org/TR/SVG/paths.html#PathElement">http://www.w3.org/TR/SVG/paths.html#PathElement</ulink> 8.3.1 General information about path data. A path is defined by including a 'path' element which contains a d="(path data)" attribute, where the d attribute contains the moveto, line, curve (both cubic and quadratic Beziers), arc and closepath instructions. </para></description><data-member name="path"><type>ptr_vector&lt; <classname>path_point</classname> &gt;</type><purpose>All the (x, y) coordinate pairs, &lt; filled by calls of m, M, l , L... that push_back. </purpose></data-member>
<method-group name="public member functions">
<method name="c"><type><classname>path_element</classname> &amp;</type><parameter name="x1"><paramtype>double</paramtype></parameter><parameter name="y1"><paramtype>double</paramtype></parameter><parameter name="x2"><paramtype>double</paramtype></parameter><parameter name="y2"><paramtype>double</paramtype></parameter><parameter name="x"><paramtype>double</paramtype></parameter><parameter name="y"><paramtype>double</paramtype></parameter><description><para>Draws a cubic Bezier curve from the current point to (x,y) using (x1,y1).(relative).</para><para>
</para></description><returns><para><classname alt="boost::svg::path_element">path_element</classname>&amp; to make chainable. </para></returns></method>
<method name="C"><type><classname>path_element</classname> &amp;</type><parameter name="x1"><paramtype>double</paramtype></parameter><parameter name="y1"><paramtype>double</paramtype></parameter><parameter name="x2"><paramtype>double</paramtype></parameter><parameter name="y2"><paramtype>double</paramtype></parameter><parameter name="x"><paramtype>double</paramtype></parameter><parameter name="y"><paramtype>double</paramtype></parameter><description><para>Draws a cubic Bezier curve from the current point to (x,y) using (x1,y1).(absolute).</para><para>
</para></description><returns><para><classname alt="boost::svg::path_element">path_element</classname>&amp; to make chainable. </para></returns></method>
<method name="class_id"><type>void</type><parameter name="class_id"><paramtype>const std::string &amp;</paramtype></parameter><description><para>Class class id, non-unique identifier for an element.</para><para><ulink url="http://www.w3.org/TR/2001/REC-SVG-20010904/styling.html#ClassAttribute">http://www.w3.org/TR/2001/REC-SVG-20010904/styling.html#ClassAttribute</ulink> 6.12 Attributes common to all elements: id and xml:base Example: class="info"</para></description></method>
<method name="class_id"><type>std::string</type><description><para>Class id, non-unique identifier for an element. </para></description></method>
<method name="clip_id"><type>void</type><parameter name="id"><paramtype>const std::string &amp;</paramtype></parameter><description><para>Set name of a clip path, for example: g_ptr.clip_id(plot_window_clip_); </para></description></method>
<method name="clip_id"><type>std::string</type><description><para>
</para></description><returns><para>name of a clip path, for example: g_ptr.clip_id(plot_window_clip_); </para></returns></method>
<method name="fill_on"><type><classname>path_element</classname> &amp;</type><parameter name="on_"><paramtype>bool</paramtype></parameter><description><para>Set area fill, on or off.</para><para>
</para></description><returns><para><classname alt="boost::svg::path_element">path_element</classname>&amp; to make chainable. </para></returns></method>
<method name="fill_on"><type>bool</type><description><para>
</para></description><returns><para>area fill, on or off. </para></returns></method>
<method name="h"><type><classname>path_element</classname> &amp;</type><parameter name="x"><paramtype>double</paramtype></parameter><description><para>Line horizontal (relative).</para><para>
</para></description><returns><para><classname alt="boost::svg::path_element">path_element</classname>&amp; to make chainable. </para></returns></method>
<method name="H"><type><classname>path_element</classname> &amp;</type><parameter name="x"><paramtype>double</paramtype></parameter><description><para>Line horizontal (absolute).</para><para>
</para></description><returns><para><classname alt="boost::svg::path_element">path_element</classname>&amp; to make chainable. </para></returns></method>
<method name="id"><type>void</type><parameter name="id"><paramtype>const std::string &amp;</paramtype></parameter><description><para>Provide a unique name for an element. Example: id="plotBackground"</para><para>See <ulink url="http://www.w3.org/TR/SVG/struct.html#IDAttribute">http://www.w3.org/TR/SVG/struct.html#IDAttribute</ulink> 5.10.1 Attributes common to all elements: id and xml:base The id and xml:base attributes are available on all SVG elements: Attribute definitions: id = "name" Standard XML attribute for assigning a unique name to an element. Refer to the "Extensible Markup Language (XML) 1.0" Recommendation [XML10]. xml:base = "&lt;uri&gt;" Specifies a base URI other than the base URI of the document or external entity. Refer to the "XML Base" specification [XML-BASE]. A group of elements, as well as individual objects, can be given a name using the id attribute. Named groups are needed for several purposes such as animation and re-usable objects.</para></description></method>
<method name="id"><type>std::string</type><description><para>
</para></description><returns><para>the unique name for an element, for example id() ="plotBackground". </para></returns></method>
<method name="l"><type><classname>path_element</classname> &amp;</type><parameter name="x"><paramtype>double</paramtype></parameter><parameter name="y"><paramtype>double</paramtype></parameter><description><para>Line to (relative).</para><para>
</para></description><returns><para><classname alt="boost::svg::path_element">path_element</classname>&amp; to make chainable. </para></returns></method>
<method name="L"><type><classname>path_element</classname> &amp;</type><parameter name="x"><paramtype>double</paramtype></parameter><parameter name="y"><paramtype>double</paramtype></parameter><description><para>Line to (absolute).</para><para>
</para></description><returns><para><classname alt="boost::svg::path_element">path_element</classname>&amp; to make chainable. </para></returns></method>
<method name="m"><type><classname>path_element</classname> &amp;</type><parameter name="x"><paramtype>double</paramtype></parameter><parameter name="y"><paramtype>double</paramtype></parameter><description><para>Move relative by x and y.</para><para>
</para></description><returns><para><classname alt="boost::svg::path_element">path_element</classname>&amp; to make chainable. </para></returns></method>
<method name="M"><type><classname>path_element</classname> &amp;</type><parameter name="x"><paramtype>double</paramtype></parameter><parameter name="y"><paramtype>double</paramtype></parameter><description><para>Move to absolute x and y.</para><para>
</para></description><returns><para><classname alt="boost::svg::path_element">path_element</classname>&amp; to make chainable. </para></returns></method>
<method name="operator!="><type>bool</type><parameter name="lhs"><paramtype>const <classname>svg_element</classname> &amp;</paramtype></parameter><description><para>Compare svg_elements for inequality, useful for Boost.Test. </para></description></method>
<method name="operator=="><type>bool</type><parameter name="lhs"><paramtype>const <classname>svg_element</classname> &amp;</paramtype></parameter><description><para>Compare svg_elements, useful for Boost.Test. </para></description></method>
<method name="q"><type><classname>path_element</classname> &amp;</type><parameter name="x1"><paramtype>double</paramtype></parameter><parameter name="y1"><paramtype>double</paramtype></parameter><parameter name="x"><paramtype>double</paramtype></parameter><parameter name="y"><paramtype>double</paramtype></parameter><description><para>Quadratic Curve Bezier (relative).</para><para>
</para></description><returns><para><classname alt="boost::svg::path_element">path_element</classname>&amp; to make chainable. </para></returns></method>
<method name="Q"><type><classname>path_element</classname> &amp;</type><parameter name="x1"><paramtype>double</paramtype></parameter><parameter name="y1"><paramtype>double</paramtype></parameter><parameter name="x"><paramtype>double</paramtype></parameter><parameter name="y"><paramtype>double</paramtype></parameter><description><para>Quadratic Curve Bezier (absolute).</para><para>
</para></description><returns><para><classname alt="boost::svg::path_element">path_element</classname>&amp; to make chainable. </para></returns></method>
<method name="s"><type><classname>path_element</classname> &amp;</type><parameter name="x1"><paramtype>double</paramtype></parameter><parameter name="y1"><paramtype>double</paramtype></parameter><parameter name="x"><paramtype>double</paramtype></parameter><parameter name="y"><paramtype>double</paramtype></parameter><description><para>Draws a cubic Bezier curve from the current point to (x,y) (relative).</para><para>
</para></description><returns><para><classname alt="boost::svg::path_element">path_element</classname>&amp; to make chainable. </para></returns></method>
<method name="S"><type><classname>path_element</classname> &amp;</type><parameter name="x1"><paramtype>double</paramtype></parameter><parameter name="y1"><paramtype>double</paramtype></parameter><parameter name="x"><paramtype>double</paramtype></parameter><parameter name="y"><paramtype>double</paramtype></parameter><description><para>Draws a cubic Bezier curve from the current point to (x,y) (absolute).</para><para>
</para></description><returns><para><classname alt="boost::svg::path_element">path_element</classname>&amp; to make chainable. </para></returns></method>
<method name="style"><type><classname>svg_style</classname> &amp;</type><description><para>
</para></description><returns><para>reference to <classname alt="boost::svg::svg_style">svg_style</classname> to provide indirect access to colors &amp; width via style().stroke_color(), fill_color(), width() </para></returns></method>
<method name="style" cv="const"><type>const <classname>svg_style</classname> &amp;</type><description><para>
</para></description><returns><para>reference to const <classname alt="boost::svg::svg_style">svg_style</classname> to provide indirect access to colors &amp; width via style().stroke_color(), fill_color(), width() (const version). </para></returns></method>
<method name="t"><type><classname>path_element</classname> &amp;</type><parameter name="x"><paramtype>double</paramtype></parameter><parameter name="y"><paramtype>double</paramtype></parameter><description><para>Draws a quadratic Bezier curve from the current point to (x,y)(relative).</para><para>
</para></description><returns><para><classname alt="boost::svg::path_element">path_element</classname>&amp; to make chainable. </para></returns></method>
<method name="T"><type><classname>path_element</classname> &amp;</type><parameter name="x"><paramtype>double</paramtype></parameter><parameter name="y"><paramtype>double</paramtype></parameter><description><para>Draws a quadratic Bezier curve from the current point to (x,y)(absolute).</para><para>
</para></description><returns><para><classname alt="boost::svg::path_element">path_element</classname>&amp; to make chainable. </para></returns></method>
<method name="v"><type><classname>path_element</classname> &amp;</type><parameter name="y"><paramtype>double</paramtype></parameter><description><para>Line vertical (relative).</para><para>
</para></description><returns><para><classname alt="boost::svg::path_element">path_element</classname>&amp; to make chainable. </para></returns></method>
<method name="V"><type><classname>path_element</classname> &amp;</type><parameter name="y"><paramtype>double</paramtype></parameter><description><para>Line vertical (absolute).</para><para>
</para></description><returns><para><classname alt="boost::svg::path_element">path_element</classname>&amp; to make chainable. </para></returns></method>
<method name="write" specifiers="virtual"><type>void</type><parameter name="rhs"><paramtype>std::ostream &amp;</paramtype></parameter><purpose>write functions output SVG commands. </purpose><description><para>Write SVG path command. Example:&lt;path d="M5,175 L5,195 M148.571,175" /&gt;  </para></description></method>
<method name="z"><type><classname>path_element</classname> &amp;</type><description><para>Path end. Note lower case z, see <classname alt="boost::svg::path_element">path_element</classname>&amp; Z() below.</para><para>
</para></description><returns><para><classname alt="boost::svg::path_element">path_element</classname>&amp; to make chainable. </para></returns></method>
<method name="Z"><type><classname>path_element</classname> &amp;</type><description><para>Path end. Note Upper case Z also provided for compatibility with <ulink url="http://www.w3.org/TR/SVG/paths.html#PathDataClosePathCommand">http://www.w3.org/TR/SVG/paths.html#PathDataClosePathCommand</ulink> 8.3.3 which allows either case.</para><para>
</para></description><returns><para><classname alt="boost::svg::path_element">path_element</classname>&amp; to make chainable. </para></returns></method>
</method-group>
<constructor><parameter name="rhs"><paramtype>const <classname>path_element</classname> &amp;</paramtype></parameter><description><para>Copy constructor. </para></description></constructor>
<constructor><parameter name="style_info"><paramtype>const <classname>svg_style</classname> &amp;</paramtype></parameter><parameter name="id_name"><paramtype>const std::string &amp;</paramtype><default>""</default></parameter><parameter name="class_name"><paramtype>const std::string &amp;</paramtype><default>""</default></parameter><parameter name="clip_name"><paramtype>const std::string &amp;</paramtype><default>""</default></parameter><description><para>Construct empty path element. </para></description></constructor>
<constructor><description><para>Construct an empty path element. </para></description></constructor>
<method-group name="protected member functions">
<method name="write_attributes"><type>void</type><parameter name="s_out"><paramtype>std::ostream &amp;</paramtype></parameter><description><para>Output group_element id and clip-path.</para><para>Classes inherited from <classname alt="boost::svg::svg_element">svg_element</classname> add other references, 5.3.1, like color, fill, stroke, gradients...</para></description></method>
</method-group>
</class><struct name="path_point"><purpose>Base class for <classname alt="boost::svg::m_path">m_path</classname>, <classname alt="boost::svg::z_path">z_path</classname>, <classname alt="boost::svg::q_path">q_path</classname>, <classname alt="boost::svg::h_path">h_path</classname>, <classname alt="boost::svg::v_path">v_path</classname>, <classname alt="boost::svg::c_path">c_path</classname>, <classname alt="boost::svg::s_path">s_path</classname>. </purpose><description><para>Paths represent the outline of a shape which can be filled, stroked, used as a clipping path, or any combination of the three. </para></description><data-member name="relative"><type>bool</type><purpose>If true relative else absolute. </purpose></data-member>
<method-group name="public member functions">
<method name="write" cv="= 0" specifiers="virtual"><type>void</type><parameter name="rhs"><paramtype>std::ostream &amp;</paramtype></parameter><purpose>write functions output SVG commands like "M1.2, 3.4", </purpose></method>
</method-group>
<constructor><parameter name="relative"><paramtype>bool</paramtype></parameter><description><para>&lt; Constructor defines all member variables. </para></description></constructor>
<destructor><description><para>Destructor. </para></description></destructor>
</struct><struct name="poly_path_point"><purpose>polyline or polygon point coordinates (x, y) </purpose><description><para>9.6 polyline &amp; 9.7 The 'polygon' element. </para></description><data-member name="x"><type>double</type><purpose>polygon or polyline path point X SVG coordinate. </purpose></data-member>
<data-member name="y"><type>double</type><purpose>polygon or polyline path point Y SVG coordinate. </purpose></data-member>
<method-group name="public member functions">
<method name="write"><type>void</type><parameter name="o_str"><paramtype>std::ostream &amp;</paramtype></parameter><description><para>Output SVG XML, Example: " 250,180" Leading space is redundant for 1st after "points= ", but others are separators, and arkward to know which is 1st. </para></description></method>
</method-group>
<constructor><parameter name="x"><paramtype>double</paramtype></parameter><parameter name="y"><paramtype>double</paramtype></parameter><description><para>Construct a polygon or polyline path point from X and Y SVG coordinate. </para></description></constructor>
<constructor><description><para>Default constructor. </para></description></constructor>
</struct><struct name="polygon_element"><inherit access="public">boost::svg::svg_element</inherit><purpose>The 'polygon' element defines a closed shape consisting of a set of connected straight line segments. </purpose><description><para><ulink url="http://www.w3.org/TR/SVG/shapes.html#PolygonElement">http://www.w3.org/TR/SVG/shapes.html#PolygonElement</ulink> The 'polygon' element 9.9.7. A polygon is defined by including a 'path' element which contains a points="(path data)" attribute, where the d attribute contains the x, y coordinate pairs. </para></description><data-member name="fill"><type>bool</type><purpose>polygon to have fill color. </purpose></data-member>
<data-member name="poly_points"><type>ptr_vector&lt; <classname>poly_path_point</classname> &gt;</type><purpose>All the x, y coordinate pairs, &lt; push_backed by calls of p_path(x, y). </purpose></data-member>
<method-group name="public member functions">
<method name="class_id"><type>void</type><parameter name="class_id"><paramtype>const std::string &amp;</paramtype></parameter><description><para>Class class id, non-unique identifier for an element.</para><para><ulink url="http://www.w3.org/TR/2001/REC-SVG-20010904/styling.html#ClassAttribute">http://www.w3.org/TR/2001/REC-SVG-20010904/styling.html#ClassAttribute</ulink> 6.12 Attributes common to all elements: id and xml:base Example: class="info"</para></description></method>
<method name="class_id"><type>std::string</type><description><para>Class id, non-unique identifier for an element. </para></description></method>
<method name="clip_id"><type>void</type><parameter name="id"><paramtype>const std::string &amp;</paramtype></parameter><description><para>Set name of a clip path, for example: g_ptr.clip_id(plot_window_clip_); </para></description></method>
<method name="clip_id"><type>std::string</type><description><para>
</para></description><returns><para>name of a clip path, for example: g_ptr.clip_id(plot_window_clip_); </para></returns></method>
<method name="id"><type>void</type><parameter name="id"><paramtype>const std::string &amp;</paramtype></parameter><description><para>Provide a unique name for an element. Example: id="plotBackground"</para><para>See <ulink url="http://www.w3.org/TR/SVG/struct.html#IDAttribute">http://www.w3.org/TR/SVG/struct.html#IDAttribute</ulink> 5.10.1 Attributes common to all elements: id and xml:base The id and xml:base attributes are available on all SVG elements: Attribute definitions: id = "name" Standard XML attribute for assigning a unique name to an element. Refer to the "Extensible Markup Language (XML) 1.0" Recommendation [XML10]. xml:base = "&lt;uri&gt;" Specifies a base URI other than the base URI of the document or external entity. Refer to the "XML Base" specification [XML-BASE]. A group of elements, as well as individual objects, can be given a name using the id attribute. Named groups are needed for several purposes such as animation and re-usable objects.</para></description></method>
<method name="id"><type>std::string</type><description><para>
</para></description><returns><para>the unique name for an element, for example id() ="plotBackground". </para></returns></method>
<method name="operator!="><type>bool</type><parameter name="lhs"><paramtype>const <classname>svg_element</classname> &amp;</paramtype></parameter><description><para>Compare svg_elements for inequality, useful for Boost.Test. </para></description></method>
<method name="operator&lt;&lt;"><type>std::ostream &amp;</type><parameter name="os"><paramtype>std::ostream &amp;</paramtype></parameter><description><para>Output polygon info. (May be useful for Boost.Test. using os &lt;&lt; "(" &lt;&lt; p.x &lt;&lt; ", " &lt;&lt; p.y &lt;&lt; ")" ; Usage: <classname alt="boost::svg::polygon_element">polygon_element</classname> p(1, 2, 3, 4, 5, 6); my_polygon.operator &lt;&lt; (cout); (But NOT cout &lt;&lt; my_polygon &lt;&lt; endl;) Outputs: (1, 2)(3, 4)(5, 6)</para></description></method>
<method name="operator=="><type>bool</type><parameter name="lhs"><paramtype>const <classname>svg_element</classname> &amp;</paramtype></parameter><description><para>Compare svg_elements, useful for Boost.Test. </para></description></method>
<method name="P"><type><classname>polygon_element</classname> &amp;</type><parameter name="x"><paramtype>double</paramtype></parameter><parameter name="y"><paramtype>double</paramtype></parameter><description><para>Add another point (x, y) - absolute only.</para><para>
</para></description><returns><para><classname alt="boost::svg::polygon_element">polygon_element</classname>&amp; to make chainable. </para></returns></method>
<method name="style"><type><classname>svg_style</classname> &amp;</type><description><para>
</para></description><returns><para>reference to <classname alt="boost::svg::svg_style">svg_style</classname> to provide indirect access to colors &amp; width via style().stroke_color(), fill_color(), width() </para></returns></method>
<method name="style" cv="const"><type>const <classname>svg_style</classname> &amp;</type><description><para>
</para></description><returns><para>reference to const <classname alt="boost::svg::svg_style">svg_style</classname> to provide indirect access to colors &amp; width via style().stroke_color(), fill_color(), width() (const version). </para></returns></method>
<method name="write" specifiers="virtual"><type>void</type><parameter name="rhs"><paramtype>std::ostream &amp;</paramtype></parameter><purpose>write functions output SVG commands. </purpose><description><para>SVG XML:
   Example: &lt;polygon fill="lime" stroke="blue" stroke-width="10"
   points="850,75  958,137.5 958,262.5 850,325 742,262.6 742,137.5" /&gt;
</para></description></method>
</method-group>
<constructor><parameter name="rhs"><paramtype>const <classname>polygon_element</classname> &amp;</paramtype></parameter><description><para>Copy constructor. </para></description></constructor>
<constructor><description><para>Default constructor empty polygon (with fill on). </para></description></constructor>
<constructor><parameter name="x"><paramtype>double</paramtype></parameter><parameter name="y"><paramtype>double</paramtype></parameter><parameter name="f"><paramtype>bool</paramtype><default>true</default></parameter><description><para>Constructor - One absolute (x, y) point only. Can add more path points using member function P. </para></description></constructor>
<constructor><parameter name="x1"><paramtype>double</paramtype></parameter><parameter name="y1"><paramtype>double</paramtype></parameter><parameter name="x2"><paramtype>double</paramtype></parameter><parameter name="y2"><paramtype>double</paramtype></parameter><parameter name="x3"><paramtype>double</paramtype></parameter><parameter name="y3"><paramtype>double</paramtype></parameter><parameter name="f"><paramtype>bool</paramtype><default>true</default></parameter><description><para>Constructor - Absolute (x, y) only. Used by triangle. </para></description></constructor>
<constructor><parameter name="x1"><paramtype>double</paramtype></parameter><parameter name="y1"><paramtype>double</paramtype></parameter><parameter name="x2"><paramtype>double</paramtype></parameter><parameter name="y2"><paramtype>double</paramtype></parameter><parameter name="x3"><paramtype>double</paramtype></parameter><parameter name="y3"><paramtype>double</paramtype></parameter><parameter name="x4"><paramtype>double</paramtype></parameter><parameter name="y4"><paramtype>double</paramtype></parameter><parameter name="f"><paramtype>bool</paramtype><default>true</default></parameter><description><para>Constructor - Absolute (x, y) only. Used by rhombus. </para></description></constructor>
<constructor><parameter name="x1"><paramtype>double</paramtype></parameter><parameter name="y1"><paramtype>double</paramtype></parameter><parameter name="x2"><paramtype>double</paramtype></parameter><parameter name="y2"><paramtype>double</paramtype></parameter><parameter name="x3"><paramtype>double</paramtype></parameter><parameter name="y3"><paramtype>double</paramtype></parameter><parameter name="x4"><paramtype>double</paramtype></parameter><parameter name="y4"><paramtype>double</paramtype></parameter><parameter name="x5"><paramtype>double</paramtype></parameter><parameter name="y5"><paramtype>double</paramtype></parameter><parameter name="f"><paramtype>bool</paramtype><default>true</default></parameter><description><para>Constructor - Absolute (x, y) only. Used by pentagon. </para></description></constructor>
<constructor><parameter name="x1"><paramtype>double</paramtype></parameter><parameter name="y1"><paramtype>double</paramtype></parameter><parameter name="x2"><paramtype>double</paramtype></parameter><parameter name="y2"><paramtype>double</paramtype></parameter><parameter name="x3"><paramtype>double</paramtype></parameter><parameter name="y3"><paramtype>double</paramtype></parameter><parameter name="x4"><paramtype>double</paramtype></parameter><parameter name="y4"><paramtype>double</paramtype></parameter><parameter name="x5"><paramtype>double</paramtype></parameter><parameter name="y5"><paramtype>double</paramtype></parameter><parameter name="x6"><paramtype>double</paramtype></parameter><parameter name="y6"><paramtype>double</paramtype></parameter><parameter name="f"><paramtype>bool</paramtype><default>true</default></parameter><description><para>Constructor - Six absolute (x, y) only. Used by hexagon. </para></description></constructor>
<constructor><parameter name="points"><paramtype>std::vector&lt; <classname>poly_path_point</classname> &gt; &amp;</paramtype></parameter><parameter name="f"><paramtype>bool</paramtype><default>true</default></parameter><description><para>Constructor from vector of path points. </para></description></constructor>
<method-group name="protected member functions">
<method name="write_attributes"><type>void</type><parameter name="s_out"><paramtype>std::ostream &amp;</paramtype></parameter><description><para>Output group_element id and clip-path.</para><para>Classes inherited from <classname alt="boost::svg::svg_element">svg_element</classname> add other references, 5.3.1, like color, fill, stroke, gradients...</para></description></method>
</method-group>
</struct><class name="polyline_element"><inherit access="public">boost::svg::svg_element</inherit><purpose>The 'polyline' element: defines a set of connected straight line segments. </purpose><description><para><ulink url="http://www.w3.org/TR/SVG/shapes.html#PolylineElement">http://www.w3.org/TR/SVG/shapes.html#PolylineElement</ulink> 9.6 The polyline element: defines a set of connected straight line segments. Typically, polyline elements define open shapes. A polyline is defined by including a 'path' element which contains a points="(path data)" attribute, where the points attribute contains the x, y coordinate pairs. perform an absolute moveto operation to the first coordinate pair in the list of points for each subsequent coordinate pair, perform an absolute lineto operation to that coordinate pair. The advantage of polyline is in reducing file size, avoiding M and repeated L before x &amp; y coordinate pairs. </para></description><data-member name="poly_points"><type>ptr_vector&lt; <classname>poly_path_point</classname> &gt;</type><purpose>All the (x, y) coordinate pairs,. </purpose></data-member>
<method-group name="public member functions">
<method name="class_id"><type>void</type><parameter name="class_id"><paramtype>const std::string &amp;</paramtype></parameter><description><para>Class class id, non-unique identifier for an element.</para><para><ulink url="http://www.w3.org/TR/2001/REC-SVG-20010904/styling.html#ClassAttribute">http://www.w3.org/TR/2001/REC-SVG-20010904/styling.html#ClassAttribute</ulink> 6.12 Attributes common to all elements: id and xml:base Example: class="info"</para></description></method>
<method name="class_id"><type>std::string</type><description><para>Class id, non-unique identifier for an element. </para></description></method>
<method name="clip_id"><type>void</type><parameter name="id"><paramtype>const std::string &amp;</paramtype></parameter><description><para>Set name of a clip path, for example: g_ptr.clip_id(plot_window_clip_); </para></description></method>
<method name="clip_id"><type>std::string</type><description><para>
</para></description><returns><para>name of a clip path, for example: g_ptr.clip_id(plot_window_clip_); </para></returns></method>
<method name="id"><type>void</type><parameter name="id"><paramtype>const std::string &amp;</paramtype></parameter><description><para>Provide a unique name for an element. Example: id="plotBackground"</para><para>See <ulink url="http://www.w3.org/TR/SVG/struct.html#IDAttribute">http://www.w3.org/TR/SVG/struct.html#IDAttribute</ulink> 5.10.1 Attributes common to all elements: id and xml:base The id and xml:base attributes are available on all SVG elements: Attribute definitions: id = "name" Standard XML attribute for assigning a unique name to an element. Refer to the "Extensible Markup Language (XML) 1.0" Recommendation [XML10]. xml:base = "&lt;uri&gt;" Specifies a base URI other than the base URI of the document or external entity. Refer to the "XML Base" specification [XML-BASE]. A group of elements, as well as individual objects, can be given a name using the id attribute. Named groups are needed for several purposes such as animation and re-usable objects.</para></description></method>
<method name="id"><type>std::string</type><description><para>
</para></description><returns><para>the unique name for an element, for example id() ="plotBackground". </para></returns></method>
<method name="operator!="><type>bool</type><parameter name="lhs"><paramtype>const <classname>svg_element</classname> &amp;</paramtype></parameter><description><para>Compare svg_elements for inequality, useful for Boost.Test. </para></description></method>
<method name="operator=="><type>bool</type><parameter name="lhs"><paramtype>const <classname>svg_element</classname> &amp;</paramtype></parameter><description><para>Compare svg_elements, useful for Boost.Test. </para></description></method>
<method name="P"><type><classname>polyline_element</classname> &amp;</type><parameter name="x"><paramtype>double</paramtype></parameter><parameter name="y"><paramtype>double</paramtype></parameter><description><para>Absolute (x, y) only, so Capital letter P.</para><para>
</para></description><returns><para><classname alt="boost::svg::polyline_element">polyline_element</classname>&amp; to make chainable. </para></returns></method>
<method name="style"><type><classname>svg_style</classname> &amp;</type><description><para>
</para></description><returns><para>reference to <classname alt="boost::svg::svg_style">svg_style</classname> to provide indirect access to colors &amp; width via style().stroke_color(), fill_color(), width() </para></returns></method>
<method name="style" cv="const"><type>const <classname>svg_style</classname> &amp;</type><description><para>
</para></description><returns><para>reference to const <classname alt="boost::svg::svg_style">svg_style</classname> to provide indirect access to colors &amp; width via style().stroke_color(), fill_color(), width() (const version). </para></returns></method>
<method name="write" specifiers="virtual"><type>void</type><parameter name="rhs"><paramtype>std::ostream &amp;</paramtype></parameter><purpose>write functions output SVG commands. </purpose><description><para> Output polyline info (useful for Boost.Test).
 Example: &lt;polyline points=" 100,100 200,100 300,200 400,400"/&gt;</para></description></method>
</method-group>
<constructor><parameter name="rhs"><paramtype>const <classname>polyline_element</classname> &amp;</paramtype></parameter><description><para>copy constructor. </para></description></constructor>
<constructor><description><para>Construct an 'empty' line. Can new line path points add using <classname alt="boost::svg::polyline_element">polyline_element</classname> member function P. </para></description></constructor>
<constructor><parameter name="x1"><paramtype>double</paramtype></parameter><parameter name="y1"><paramtype>double</paramtype></parameter><description><para>One (x, y) path point, absolute only. </para></description></constructor>
<constructor><parameter name="x1"><paramtype>double</paramtype></parameter><parameter name="y1"><paramtype>double</paramtype></parameter><parameter name="x2"><paramtype>double</paramtype></parameter><parameter name="y2"><paramtype>double</paramtype></parameter><description><para>Two (x, y) path points, absolute only. </para></description></constructor>
<constructor><parameter name="points"><paramtype>std::vector&lt; <classname>poly_path_point</classname> &gt; &amp;</paramtype></parameter><description><para>Constructor from vector of path points. </para></description></constructor>
<method-group name="protected member functions">
<method name="write_attributes"><type>void</type><parameter name="s_out"><paramtype>std::ostream &amp;</paramtype></parameter><description><para>Output group_element id and clip-path.</para><para>Classes inherited from <classname alt="boost::svg::svg_element">svg_element</classname> add other references, 5.3.1, like color, fill, stroke, gradients...</para></description></method>
</method-group>
</class><struct name="q_path"><inherit access="public">boost::svg::path_point</inherit><purpose>Draws a quadratic Bezier curve from the current point to (x,y). using (x1,y1) as the control point. </purpose><data-member name="relative"><type>bool</type><purpose>If true relative else absolute. </purpose></data-member>
<data-member name="x"><type>double</type><purpose>quadratic Bezier curve end X coordinate. </purpose></data-member>
<data-member name="x1"><type>double</type><purpose>quadratic Bezier curve control X coordinate. </purpose></data-member>
<data-member name="y"><type>double</type><purpose>quadratic Bezier curve end Y coordinate. </purpose></data-member>
<data-member name="y1"><type>double</type><purpose>quadratic Bezier curve control Y coordinate. </purpose></data-member>
<method-group name="public member functions">
<method name="write" specifiers="virtual"><type>void</type><parameter name="rhs"><paramtype>std::ostream &amp;</paramtype></parameter><purpose>write functions output SVG commands like "M1.2, 3.4", </purpose><description><para>&lt; Write a quadratic Bezier curve SVG XML to ostream. </para></description></method>
</method-group>
<constructor><parameter name="x1"><paramtype>double</paramtype></parameter><parameter name="y1"><paramtype>double</paramtype></parameter><parameter name="x"><paramtype>double</paramtype></parameter><parameter name="y"><paramtype>double</paramtype></parameter><parameter name="relative"><paramtype>bool</paramtype><default>false</default></parameter><description><para>Constructor quadratic Bezier curve. </para></description></constructor>
</struct><class name="qurve_element"><inherit access="public">boost::svg::svg_element</inherit><purpose>Quadratic Bezier curved line from (x1, y1) control point (x2, y2) to (x3, y3). </purpose><description><para>Note x2 is the Bezier control point - the curve will <emphasis role="bold">not</emphasis> pass thru this point. </para></description><data-member name="x1_"><type>double</type><purpose>Quadratic curved line from (x1_, y1_) control point (x2_, y2_) to (y3_, y3_). </purpose></data-member>
<data-member name="x2_"><type>double</type><purpose>Quadratic curved line from (x1_, y1_) control point (x2_, y2_) to (y3_, y3_). </purpose></data-member>
<data-member name="x3_"><type>double</type><purpose>Quadratic curved line from (x1_, y1_) control point (x2_, y2_) to (y3_, y3_). </purpose></data-member>
<data-member name="y1_"><type>double</type><purpose>Quadratic curved line from (x1_, y1_) control point (x2_, y2_) to (y3_, y3_). </purpose></data-member>
<data-member name="y2_"><type>double</type><purpose>Quadratic curved line from (x1_, y1_) control point (x2_, y2_) to (y3_, y3_). </purpose></data-member>
<data-member name="y3_"><type>double</type><purpose>Quadratic curved line from (x1_, y1_) control point (x2_, y2_) to (y3_, y3_). </purpose></data-member>
<method-group name="public member functions">
<method name="class_id"><type>void</type><parameter name="class_id"><paramtype>const std::string &amp;</paramtype></parameter><description><para>Class class id, non-unique identifier for an element.</para><para><ulink url="http://www.w3.org/TR/2001/REC-SVG-20010904/styling.html#ClassAttribute">http://www.w3.org/TR/2001/REC-SVG-20010904/styling.html#ClassAttribute</ulink> 6.12 Attributes common to all elements: id and xml:base Example: class="info"</para></description></method>
<method name="class_id"><type>std::string</type><description><para>Class id, non-unique identifier for an element. </para></description></method>
<method name="clip_id"><type>void</type><parameter name="id"><paramtype>const std::string &amp;</paramtype></parameter><description><para>Set name of a clip path, for example: g_ptr.clip_id(plot_window_clip_); </para></description></method>
<method name="clip_id"><type>std::string</type><description><para>
</para></description><returns><para>name of a clip path, for example: g_ptr.clip_id(plot_window_clip_); </para></returns></method>
<method name="id"><type>void</type><parameter name="id"><paramtype>const std::string &amp;</paramtype></parameter><description><para>Provide a unique name for an element. Example: id="plotBackground"</para><para>See <ulink url="http://www.w3.org/TR/SVG/struct.html#IDAttribute">http://www.w3.org/TR/SVG/struct.html#IDAttribute</ulink> 5.10.1 Attributes common to all elements: id and xml:base The id and xml:base attributes are available on all SVG elements: Attribute definitions: id = "name" Standard XML attribute for assigning a unique name to an element. Refer to the "Extensible Markup Language (XML) 1.0" Recommendation [XML10]. xml:base = "&lt;uri&gt;" Specifies a base URI other than the base URI of the document or external entity. Refer to the "XML Base" specification [XML-BASE]. A group of elements, as well as individual objects, can be given a name using the id attribute. Named groups are needed for several purposes such as animation and re-usable objects.</para></description></method>
<method name="id"><type>std::string</type><description><para>
</para></description><returns><para>the unique name for an element, for example id() ="plotBackground". </para></returns></method>
<method name="operator!="><type>bool</type><parameter name="lhs"><paramtype>const <classname>svg_element</classname> &amp;</paramtype></parameter><description><para>Compare svg_elements for inequality, useful for Boost.Test. </para></description></method>
<method name="operator=="><type>bool</type><parameter name="lhs"><paramtype>const <classname>svg_element</classname> &amp;</paramtype></parameter><description><para>Compare svg_elements, useful for Boost.Test. </para></description></method>
<method name="style"><type><classname>svg_style</classname> &amp;</type><description><para>
</para></description><returns><para>reference to <classname alt="boost::svg::svg_style">svg_style</classname> to provide indirect access to colors &amp; width via style().stroke_color(), fill_color(), width() </para></returns></method>
<method name="style" cv="const"><type>const <classname>svg_style</classname> &amp;</type><description><para>
</para></description><returns><para>reference to const <classname alt="boost::svg::svg_style">svg_style</classname> to provide indirect access to colors &amp; width via style().stroke_color(), fill_color(), width() (const version). </para></returns></method>
<method name="write" specifiers="virtual"><type>void</type><parameter name="rhs"><paramtype>std::ostream &amp;</paramtype></parameter><purpose>write functions output SVG commands. </purpose><description><para>output quadratic curved line from (x1_, y1_) control point (x2_, y2_) to (x3_, y3_)</para><para>Example:</para></description></method>
</method-group>
<constructor><parameter name="x1"><paramtype>double</paramtype></parameter><parameter name="y1"><paramtype>double</paramtype></parameter><parameter name="x2"><paramtype>double</paramtype></parameter><parameter name="y2"><paramtype>double</paramtype></parameter><parameter name="x3"><paramtype>double</paramtype></parameter><parameter name="y3"><paramtype>double</paramtype></parameter><description><para>&lt; Quadratic curved line constructor (info inherited from parent <classname alt="boost::svg::svg_element">svg_element</classname> class). </para></description></constructor>
<constructor><parameter name="x1"><paramtype>double</paramtype></parameter><parameter name="y1"><paramtype>double</paramtype></parameter><parameter name="x2"><paramtype>double</paramtype></parameter><parameter name="y2"><paramtype>double</paramtype></parameter><parameter name="x3"><paramtype>double</paramtype></parameter><parameter name="y3"><paramtype>double</paramtype></parameter><parameter name="style_info"><paramtype>const <classname>svg_style</classname> &amp;</paramtype></parameter><parameter name="id_name"><paramtype>const std::string &amp;</paramtype><default>""</default></parameter><parameter name="class_name"><paramtype>const std::string &amp;</paramtype><default>""</default></parameter><parameter name="clip_name"><paramtype>const std::string &amp;</paramtype><default>""</default></parameter><description><para>&lt; Quadratic curved line constructor, including <classname alt="boost::svg::svg_element">svg_element</classname> info. </para></description></constructor>
<method-group name="protected member functions">
<method name="write_attributes"><type>void</type><parameter name="s_out"><paramtype>std::ostream &amp;</paramtype></parameter><description><para>Output group_element id and clip-path.</para><para>Classes inherited from <classname alt="boost::svg::svg_element">svg_element</classname> add other references, 5.3.1, like color, fill, stroke, gradients...</para></description></method>
</method-group>
</class><class name="rect_element"><inherit access="public">boost::svg::svg_element</inherit><purpose>Rectangle from top left coordinate, width and height. </purpose><description><para>Represents a single rectangle. <ulink url="http://www.w3.org/TR/SVG/shapes.html#RectElement">http://www.w3.org/TR/SVG/shapes.html#RectElement</ulink> </para></description><data-member name="height_"><type>double</type><purpose>y + height is bottom left. &lt; x + width and y + height is bottom right. </purpose></data-member>
<data-member name="width_"><type>double</type><purpose>x + width is top right. </purpose></data-member>
<data-member name="x_"><type>double</type><purpose>X-axis coordinate of the side of the rectangle which has the smaller x-axis coordinate value. </purpose></data-member>
<data-member name="y_"><type>double</type><purpose>Y-axis coordinate of the side of the rectangle which has the smaller y-axis coordinate value. &lt; So (0, 0) is top left corner of rectangle. </purpose></data-member>
<method-group name="public member functions">
<method name="class_id"><type>void</type><parameter name="class_id"><paramtype>const std::string &amp;</paramtype></parameter><description><para>Class class id, non-unique identifier for an element.</para><para><ulink url="http://www.w3.org/TR/2001/REC-SVG-20010904/styling.html#ClassAttribute">http://www.w3.org/TR/2001/REC-SVG-20010904/styling.html#ClassAttribute</ulink> 6.12 Attributes common to all elements: id and xml:base Example: class="info"</para></description></method>
<method name="class_id"><type>std::string</type><description><para>Class id, non-unique identifier for an element. </para></description></method>
<method name="clip_id"><type>void</type><parameter name="id"><paramtype>const std::string &amp;</paramtype></parameter><description><para>Set name of a clip path, for example: g_ptr.clip_id(plot_window_clip_); </para></description></method>
<method name="clip_id"><type>std::string</type><description><para>
</para></description><returns><para>name of a clip path, for example: g_ptr.clip_id(plot_window_clip_); </para></returns></method>
<method name="height" cv="const"><type>double</type><description><para>y + height is bottom left. </para></description></method>
<method name="id"><type>void</type><parameter name="id"><paramtype>const std::string &amp;</paramtype></parameter><description><para>Provide a unique name for an element. Example: id="plotBackground"</para><para>See <ulink url="http://www.w3.org/TR/SVG/struct.html#IDAttribute">http://www.w3.org/TR/SVG/struct.html#IDAttribute</ulink> 5.10.1 Attributes common to all elements: id and xml:base The id and xml:base attributes are available on all SVG elements: Attribute definitions: id = "name" Standard XML attribute for assigning a unique name to an element. Refer to the "Extensible Markup Language (XML) 1.0" Recommendation [XML10]. xml:base = "&lt;uri&gt;" Specifies a base URI other than the base URI of the document or external entity. Refer to the "XML Base" specification [XML-BASE]. A group of elements, as well as individual objects, can be given a name using the id attribute. Named groups are needed for several purposes such as animation and re-usable objects.</para></description></method>
<method name="id"><type>std::string</type><description><para>
</para></description><returns><para>the unique name for an element, for example id() ="plotBackground". </para></returns></method>
<method name="operator!="><type>bool</type><parameter name="lhs"><paramtype>const <classname>svg_element</classname> &amp;</paramtype></parameter><description><para>Compare svg_elements for inequality, useful for Boost.Test. </para></description></method>
<method name="operator!="><type>bool</type><parameter name="lhs"><paramtype>const <classname>rect_element</classname> &amp;</paramtype></parameter><description><para>&lt; Comparison rect_elements (useful for Boost.Test). </para></description></method>
<method name="operator=="><type>bool</type><parameter name="lhs"><paramtype>const <classname>svg_element</classname> &amp;</paramtype></parameter><description><para>Compare svg_elements, useful for Boost.Test. </para></description></method>
<method name="operator=="><type>bool</type><parameter name="lhs"><paramtype>const <classname>rect_element</classname> &amp;</paramtype></parameter><description><para>Comparison (useful for Boost.Test). </para></description></method>
<method name="style"><type><classname>svg_style</classname> &amp;</type><description><para>
</para></description><returns><para>reference to <classname alt="boost::svg::svg_style">svg_style</classname> to provide indirect access to colors &amp; width via style().stroke_color(), fill_color(), width() </para></returns></method>
<method name="style" cv="const"><type>const <classname>svg_style</classname> &amp;</type><description><para>
</para></description><returns><para>reference to const <classname alt="boost::svg::svg_style">svg_style</classname> to provide indirect access to colors &amp; width via style().stroke_color(), fill_color(), width() (const version). </para></returns></method>
<method name="width" cv="const"><type>double</type><description><para>x + width is top right. </para></description></method>
<method name="write" specifiers="virtual"><type>void</type><parameter name="rhs"><paramtype>std::ostream &amp;</paramtype></parameter><purpose>write functions output SVG commands. </purpose><description><para> Output SVG XML for rectangle.
For example: &lt;rect  x="0" y="0"  width="500"  height="350"/&gt;
</para></description></method>
<method name="x" cv="const"><type>double</type><description><para>x-axis coordinate of the side of the rectangle which has the smaller x-axis coordinate value. </para></description></method>
<method name="y" cv="const"><type>double</type><description><para>y-axis coordinate of the side of the rectangle which has the smaller y-axis coordinate value. </para></description></method>
</method-group>
<constructor><parameter name="x"><paramtype>double</paramtype></parameter><parameter name="y"><paramtype>double</paramtype></parameter><parameter name="w"><paramtype>double</paramtype></parameter><parameter name="h"><paramtype>double</paramtype></parameter><description><para>Constructor defines all private data (no defaults). </para></description></constructor>
<constructor><parameter name="x"><paramtype>double</paramtype></parameter><parameter name="y"><paramtype>double</paramtype></parameter><parameter name="w"><paramtype>double</paramtype></parameter><parameter name="h"><paramtype>double</paramtype></parameter><parameter name="style_info"><paramtype>const <classname>svg_style</classname> &amp;</paramtype></parameter><parameter name="id_name"><paramtype>const std::string &amp;</paramtype></parameter><parameter name="class_name"><paramtype>const std::string &amp;</paramtype></parameter><parameter name="clip_name"><paramtype>const std::string &amp;</paramtype></parameter><description><para>Constructor defines all private data (inherites info from <classname alt="boost::svg::svg_element">svg_element</classname>). </para></description></constructor>
<method-group name="protected member functions">
<method name="write_attributes"><type>void</type><parameter name="s_out"><paramtype>std::ostream &amp;</paramtype></parameter><description><para>Output group_element id and clip-path.</para><para>Classes inherited from <classname alt="boost::svg::svg_element">svg_element</classname> add other references, 5.3.1, like color, fill, stroke, gradients...</para></description></method>
</method-group>
</class><struct name="s_path"><inherit access="public">boost::svg::path_point</inherit><purpose>Draws a cubic Bezier curve from the current point to (x,y). </purpose><description><para>see also <classname alt="boost::svg::t_path">t_path</classname> for a quadratic Bezier curve. </para></description><data-member name="relative"><type>bool</type><purpose>If true relative else absolute. </purpose></data-member>
<data-member name="x"><type>double</type><purpose>Cubic Bezier curve end X coordinate. </purpose></data-member>
<data-member name="x1"><type>double</type><purpose>Cubic Bezier curve control X coordinate. </purpose></data-member>
<data-member name="y"><type>double</type><purpose>Cubic Bezier curve end Y coordinate. </purpose></data-member>
<data-member name="y1"><type>double</type><purpose>Cubic Bezier curve control Y coordinate. </purpose></data-member>
<method-group name="public member functions">
<method name="write" specifiers="virtual"><type>void</type><parameter name="rhs"><paramtype>std::ostream &amp;</paramtype></parameter><purpose>write functions output SVG commands like "M1.2, 3.4", </purpose><description><para>Write SVG Cubic Bezier curve command. </para></description></method>
</method-group>
<constructor><parameter name="x1"><paramtype>double</paramtype></parameter><parameter name="y1"><paramtype>double</paramtype></parameter><parameter name="x"><paramtype>double</paramtype></parameter><parameter name="y"><paramtype>double</paramtype></parameter><parameter name="relative"><paramtype>bool</paramtype><default>false</default></parameter><description><para>Constructor Cubic Bezier curve. </para></description></constructor>
</struct><class name="svg_element"><purpose><classname alt="boost::svg::svg_element">svg_element</classname> is base class for all the leaf elements. </purpose><description><para>'g' element is a container element, &lt;g ... /&gt; &lt;/g&gt;
for grouping together related graphics elements, for example:
 &lt;g stroke="rgb(255,0,0)" &lt;rect x="0" y="0"  width="500"  height="600"/&gt; &lt;/g&gt;</para><para><classname alt="boost::svg::rect_element">rect_element</classname>, <classname alt="boost::svg::circle_element">circle_element</classname>, <classname alt="boost::svg::line_element">line_element</classname>, <classname alt="boost::svg::text_element">text_element</classname>, <classname alt="boost::svg::polygon_element">polygon_element</classname>, <classname alt="boost::svg::polyline_element">polyline_element</classname>, <classname alt="boost::svg::path_element">path_element</classname>, <classname alt="boost::svg::clip_path_element">clip_path_element</classname>, <classname alt="boost::svg::g_element">g_element</classname>.<sbr/>
 <classname alt="boost::svg::g_element">g_element</classname> ('g' element is a container element for grouping together related graphics elements).<sbr/>
 See <ulink url="http://www.w3.org/TR/SVG/struct.html#NewDocument">http://www.w3.org/TR/SVG/struct.html#NewDocument</ulink> 5.2.1 Overview. </para></description><method-group name="protected member functions">
<method name="write_attributes"><type>void</type><parameter name="s_out"><paramtype>std::ostream &amp;</paramtype></parameter><description><para>Output group_element id and clip-path.</para><para>Classes inherited from <classname alt="boost::svg::svg_element">svg_element</classname> add other references, 5.3.1, like color, fill, stroke, gradients...</para></description></method>
</method-group>
<method-group name="public member functions">
<method name="class_id"><type>void</type><parameter name="class_id"><paramtype>const std::string &amp;</paramtype></parameter><description><para>Class class id, non-unique identifier for an element.</para><para><ulink url="http://www.w3.org/TR/2001/REC-SVG-20010904/styling.html#ClassAttribute">http://www.w3.org/TR/2001/REC-SVG-20010904/styling.html#ClassAttribute</ulink> 6.12 Attributes common to all elements: id and xml:base Example: class="info"</para></description></method>
<method name="class_id"><type>std::string</type><description><para>Class id, non-unique identifier for an element. </para></description></method>
<method name="clip_id"><type>void</type><parameter name="id"><paramtype>const std::string &amp;</paramtype></parameter><description><para>Set name of a clip path, for example: g_ptr.clip_id(plot_window_clip_); </para></description></method>
<method name="clip_id"><type>std::string</type><description><para>
</para></description><returns><para>name of a clip path, for example: g_ptr.clip_id(plot_window_clip_); </para></returns></method>
<method name="id"><type>void</type><parameter name="id"><paramtype>const std::string &amp;</paramtype></parameter><description><para>Provide a unique name for an element. Example: id="plotBackground"</para><para>See <ulink url="http://www.w3.org/TR/SVG/struct.html#IDAttribute">http://www.w3.org/TR/SVG/struct.html#IDAttribute</ulink> 5.10.1 Attributes common to all elements: id and xml:base The id and xml:base attributes are available on all SVG elements: Attribute definitions: id = "name" Standard XML attribute for assigning a unique name to an element. Refer to the "Extensible Markup Language (XML) 1.0" Recommendation [XML10]. xml:base = "&lt;uri&gt;" Specifies a base URI other than the base URI of the document or external entity. Refer to the "XML Base" specification [XML-BASE]. A group of elements, as well as individual objects, can be given a name using the id attribute. Named groups are needed for several purposes such as animation and re-usable objects.</para></description></method>
<method name="id"><type>std::string</type><description><para>
</para></description><returns><para>the unique name for an element, for example id() ="plotBackground". </para></returns></method>
<method name="operator!="><type>bool</type><parameter name="lhs"><paramtype>const <classname>svg_element</classname> &amp;</paramtype></parameter><description><para>Compare svg_elements for inequality, useful for Boost.Test. </para></description></method>
<method name="operator=="><type>bool</type><parameter name="lhs"><paramtype>const <classname>svg_element</classname> &amp;</paramtype></parameter><description><para>Compare svg_elements, useful for Boost.Test. </para></description></method>
<method name="style"><type><classname>svg_style</classname> &amp;</type><description><para>
</para></description><returns><para>reference to <classname alt="boost::svg::svg_style">svg_style</classname> to provide indirect access to colors &amp; width via style().stroke_color(), fill_color(), width() </para></returns></method>
<method name="style" cv="const"><type>const <classname>svg_style</classname> &amp;</type><description><para>
</para></description><returns><para>reference to const <classname alt="boost::svg::svg_style">svg_style</classname> to provide indirect access to colors &amp; width via style().stroke_color(), fill_color(), width() (const version). </para></returns></method>
<method name="write" cv="= 0" specifiers="virtual"><type>void</type><parameter name="rhs"><paramtype>std::ostream &amp;</paramtype></parameter><purpose>write functions output SVG commands. </purpose></method>
</method-group>
<constructor><parameter name="style_info"><paramtype>const <classname>svg_style</classname> &amp;</paramtype></parameter><parameter name="id_name"><paramtype>const std::string &amp;</paramtype><default>""</default></parameter><parameter name="class_name"><paramtype>const std::string &amp;</paramtype><default>""</default></parameter><parameter name="clip_name"><paramtype>const std::string &amp;</paramtype><default>""</default></parameter><description><para>Constructor with some defaults. </para></description></constructor>
<constructor><description><para>Default constructor. </para></description></constructor>
<destructor><description><para>destructor. </para></description></destructor>
</class><struct name="t_path"><inherit access="public">boost::svg::path_point</inherit><purpose>Draws a quadratic Bezier curve from the current point to (x,y). </purpose><description><para>see also <classname alt="boost::svg::s_path">s_path</classname> for a cubic Bezier curve. </para></description><data-member name="relative"><type>bool</type><purpose>If true relative else absolute. </purpose></data-member>
<data-member name="x"><type>double</type><purpose>SVG X coordinate. </purpose></data-member>
<data-member name="y"><type>double</type><purpose>SVG Y coordinate. </purpose></data-member>
<method-group name="public member functions">
<method name="write" specifiers="virtual"><type>void</type><parameter name="rhs"><paramtype>std::ostream &amp;</paramtype></parameter><purpose>write functions output SVG commands like "M1.2, 3.4", </purpose><description><para>Write SVG command for a cubic Bezier curve. </para></description></method>
</method-group>
<constructor><parameter name="x"><paramtype>double</paramtype></parameter><parameter name="y"><paramtype>double</paramtype></parameter><parameter name="relative"><paramtype>bool</paramtype><default>false</default></parameter><description><para>Constructor of path that draws a quadratic Bezier curve from the current point to (x,y) </para></description></constructor>
</struct><class name="text_element"><inherit access="public">boost::svg::svg_element</inherit><purpose>Holds text with position, size, font, (&amp; styles) &amp; orientation. </purpose><description><para>Not necessarily shown correctly (or nicely) by all browsers, alas. SVG Coordinates of 1st character EM box, see <ulink url="http://www.w3.org/TR/SVG/text.html#TextElement">http://www.w3.org/TR/SVG/text.html#TextElement</ulink> 10.2</para><para>So any text with y coordinate = 0 shows only any roman lower case descenders!<sbr/>
     (Text may contain embedded xml Unicode characters for Greek, math etc, for example: &amp;#x3A9;). <sbr/>
 int size; // " font-size = 12" <ulink url="http://www.w3.org/TR/SVG/text.html#CharactersAndGlyphs">http://www.w3.org/TR/SVG/text.html#CharactersAndGlyphs</ulink> std::string font; // font-family: "Arial" | "Times New Roman" | "Verdana" | "Lucida Sans Unicode" "sans", "serif", "times" <ulink url="http://www.w3.org/TR/SVG/text.html#FontFamilyProperty">http://www.w3.org/TR/SVG/text.html#FontFamilyProperty</ulink> 10.10 Font selection properties<sbr/>
 std::string style_; // font-style: normal | bold | italic | oblique std::string weight; // font-weight: normal | bold | bolder | lighter | 100 | 200 .. 900 std::string stretch; // font-stretch: normal | wider | narrower ... std::string decoration; // // "underline" | "overline" | "line-through" Example:     &lt;text x="250" y="219.5" text-anchor="middle"  font-family="verdana" font-size="12"&gt;0 &lt;/text&gt; </para></description><method-group name="private member functions">
<method name="generate_text"><type>void</type><parameter name="os"><paramtype>std::ostream &amp;</paramtype></parameter></method>
</method-group>
<method-group name="public member functions">
<method name="alignment"><type><classname>text_element</classname> &amp;</type><parameter name="a"><paramtype>align_style</paramtype></parameter><description><para>left_align, right_align, center_align</para><para>
</para></description><returns><para><classname alt="boost::svg::text_element">text_element</classname>&amp; to make chainable. </para></returns></method>
<method name="alignment"><type>align_style</type><description><para>left_align, right_align, center_align </para></description></method>
<method name="class_id"><type>void</type><parameter name="class_id"><paramtype>const std::string &amp;</paramtype></parameter><description><para>Class class id, non-unique identifier for an element.</para><para><ulink url="http://www.w3.org/TR/2001/REC-SVG-20010904/styling.html#ClassAttribute">http://www.w3.org/TR/2001/REC-SVG-20010904/styling.html#ClassAttribute</ulink> 6.12 Attributes common to all elements: id and xml:base Example: class="info"</para></description></method>
<method name="class_id"><type>std::string</type><description><para>Class id, non-unique identifier for an element. </para></description></method>
<method name="clip_id"><type>void</type><parameter name="id"><paramtype>const std::string &amp;</paramtype></parameter><description><para>Set name of a clip path, for example: g_ptr.clip_id(plot_window_clip_); </para></description></method>
<method name="clip_id"><type>std::string</type><description><para>
</para></description><returns><para>name of a clip path, for example: g_ptr.clip_id(plot_window_clip_); </para></returns></method>
<method name="id"><type>void</type><parameter name="id"><paramtype>const std::string &amp;</paramtype></parameter><description><para>Provide a unique name for an element. Example: id="plotBackground"</para><para>See <ulink url="http://www.w3.org/TR/SVG/struct.html#IDAttribute">http://www.w3.org/TR/SVG/struct.html#IDAttribute</ulink> 5.10.1 Attributes common to all elements: id and xml:base The id and xml:base attributes are available on all SVG elements: Attribute definitions: id = "name" Standard XML attribute for assigning a unique name to an element. Refer to the "Extensible Markup Language (XML) 1.0" Recommendation [XML10]. xml:base = "&lt;uri&gt;" Specifies a base URI other than the base URI of the document or external entity. Refer to the "XML Base" specification [XML-BASE]. A group of elements, as well as individual objects, can be given a name using the id attribute. Named groups are needed for several purposes such as animation and re-usable objects.</para></description></method>
<method name="id"><type>std::string</type><description><para>
</para></description><returns><para>the unique name for an element, for example id() ="plotBackground". </para></returns></method>
<method name="operator!="><type>bool</type><parameter name="lhs"><paramtype>const <classname>svg_element</classname> &amp;</paramtype></parameter><description><para>Compare svg_elements for inequality, useful for Boost.Test. </para></description></method>
<method name="operator=="><type>bool</type><parameter name="lhs"><paramtype>const <classname>svg_element</classname> &amp;</paramtype></parameter><description><para>Compare svg_elements, useful for Boost.Test. </para></description></method>
<method name="rotation"><type><classname>text_element</classname> &amp;</type><parameter name="rot"><paramtype>rotate_style</paramtype></parameter><description><para>Degrees: horizontal = 0, upward = -90, downward, upsidedown Generates: transform = "rotate(-45 100 100 )"</para><para>
</para></description><returns><para><classname alt="boost::svg::text_element">text_element</classname>&amp; to make chainable. </para></returns></method>
<method name="rotation" cv="const"><type>rotate_style</type><description><para>
</para></description><returns><para>rotation of text element. </para></returns></method>
<method name="style"><type><classname>svg_style</classname> &amp;</type><description><para>
</para></description><returns><para>reference to <classname alt="boost::svg::svg_style">svg_style</classname> to provide indirect access to colors &amp; width via style().stroke_color(), fill_color(), width() </para></returns></method>
<method name="style" cv="const"><type>const <classname>svg_style</classname> &amp;</type><description><para>
</para></description><returns><para>reference to const <classname alt="boost::svg::svg_style">svg_style</classname> to provide indirect access to colors &amp; width via style().stroke_color(), fill_color(), width() (const version). </para></returns></method>
<method name="text"><type>void</type><parameter name="t"><paramtype>const std::string &amp;</paramtype></parameter><description><para>Get tspan text string to write. </para></description></method>
<method name="text"><type>std::string</type><description><para>
</para></description><returns><para>text string of a <classname alt="boost::svg::text_element">text_element</classname>. </para></returns></method>
<method name="textstyle"><type><classname>text_style</classname> &amp;</type><description><para>Get text style for font size, family, decoration ... </para></description></method>
<method name="textstyle" cv="const"><type>const <classname>text_style</classname> &amp;</type><description><para>Get text style for font size, family, decoration ... </para></description></method>
<method name="textstyle"><type><classname>text_element</classname> &amp;</type><parameter name="ts"><paramtype><classname>text_style</classname> &amp;</paramtype></parameter><description><para>Set text style for font size, family, decoration ...</para><para>
</para></description><returns><para><classname alt="boost::svg::text_element">text_element</classname>&amp; to make chainable. </para></returns></method>
<method name="tspan"><type><classname>tspan_element</classname> &amp;</type><parameter name="t"><paramtype>const std::string &amp;</paramtype></parameter><description><para>Add text span element. </para></description></method>
<method name="tspan"><type><classname>tspan_element</classname> &amp;</type><parameter name="t"><paramtype>const std::string &amp;</paramtype></parameter><parameter name="style"><paramtype>const <classname>text_style</classname> &amp;</paramtype></parameter><description><para>Add text span element (with specified text style). </para></description></method>
<method name="write" specifiers="virtual"><type>void</type><parameter name="rhs"><paramtype>std::ostream &amp;</paramtype></parameter><purpose>write functions output SVG commands. </purpose><description><para>Output <classname alt="boost::svg::text_element">text_element</classname>, style &amp; attributes to stream. </para></description></method>
<method name="x"><type><classname>text_element</classname> &amp;</type><parameter name="x"><paramtype>double</paramtype></parameter><description><para>x coordinate of text to write.</para><para>
</para></description><returns><para><classname alt="boost::svg::text_element">text_element</classname>&amp; to make chainable. </para></returns></method>
<method name="x" cv="const"><type>double</type><description><para>x coordinate of text to write. </para></description></method>
<method name="y"><type><classname>text_element</classname> &amp;</type><parameter name="y"><paramtype>double</paramtype></parameter><description><para>y coordinate of text to write.</para><para>
</para></description><returns><para><classname alt="boost::svg::text_element">text_element</classname>&amp; to make chainable. </para></returns></method>
<method name="y" cv="const"><type>double</type><description><para>y coordinate of text to write. </para></description></method>
</method-group>
<copy-assignment><type><classname>text_element</classname> &amp;</type><parameter name="rhs"><paramtype>const <classname>text_element</classname> &amp;</paramtype></parameter><description><para>Assignment operator.</para><para>
</para></description><returns><para><classname alt="boost::svg::text_element">text_element</classname>&amp; to make chainable. </para></returns></copy-assignment>
<constructor><parameter name="x"><paramtype>double</paramtype><default>0.</default></parameter><parameter name="y"><paramtype>double</paramtype><default>0.</default></parameter><parameter name="text"><paramtype>const std::string</paramtype><default>""</default></parameter><parameter name="ts"><paramtype><classname>text_style</classname></paramtype><default>no_style</default></parameter><parameter name="align"><paramtype>align_style</paramtype><default>left_align</default></parameter><parameter name="rotate"><paramtype>rotate_style</paramtype><default>horizontal</default></parameter><description><para><classname alt="boost::svg::text_element">text_element</classname> Default Constructor, defines defaults for all private members. </para></description></constructor>
<constructor><parameter name="rhs"><paramtype>const <classname>text_element</classname> &amp;</paramtype></parameter><description><para>Copy constructor. </para></description></constructor>
<method-group name="protected member functions">
<method name="write_attributes"><type>void</type><parameter name="s_out"><paramtype>std::ostream &amp;</paramtype></parameter><description><para>Output group_element id and clip-path.</para><para>Classes inherited from <classname alt="boost::svg::svg_element">svg_element</classname> add other references, 5.3.1, like color, fill, stroke, gradients...</para></description></method>
</method-group>
</class><class name="text_element_text"><inherit access="public">boost::svg::text_parent</inherit><purpose>text (not tspan) element to be stored in <classname alt="boost::svg::text_parent">text_parent</classname>. </purpose><description><para>See 10.4 text element <ulink url="http://www.w3.org/TR/SVG/text.html#TextElement">http://www.w3.org/TR/SVG/text.html#TextElement</ulink> </para></description><method-group name="public member functions">
<method name="write" specifiers="virtual"><type>void</type><parameter name="o_str"><paramtype>std::ostream &amp;</paramtype></parameter><description><para>write text to stream. </para></description></method>
</method-group>
<constructor><parameter name="text"><paramtype>const std::string &amp;</paramtype></parameter><description><para>Construct from text. </para></description></constructor>
<constructor><parameter name="rhs"><paramtype>const <classname>text_element_text</classname> &amp;</paramtype></parameter><description><para>Copy construct text element </para></description></constructor>
</class><class name="text_parent"><purpose>An ancestor to both tspan and strings for the <classname alt="boost::svg::text_element">text_element</classname> class. </purpose><description><para>This allows an array of both types to be stored in <classname alt="boost::svg::text_element">text_element</classname>. </para></description><method-group name="public member functions">
<method name="write" specifiers="virtual"><type>void</type><parameter name=""><paramtype>std::ostream &amp;</paramtype></parameter><description><para>write functions output SVG commands. </para></description></method>
</method-group>
<constructor><parameter name="text"><paramtype>const std::string &amp;</paramtype></parameter><description><para>Construct from text. </para></description></constructor>
<constructor><parameter name="rhs"><paramtype>const <classname>text_parent</classname> &amp;</paramtype></parameter><description><para>Copy construct. </para></description></constructor>
</class><class name="tspan_element"><inherit access="public">boost::svg::text_parent</inherit><inherit access="public">boost::svg::svg_element</inherit><purpose>tspan (not text) to be stored in <classname alt="boost::svg::text_parent">text_parent</classname>. </purpose><description><para>See 10.5 tspan element <ulink url="http://www.w3.org/TR/SVG/text.html#TSpanElement">http://www.w3.org/TR/SVG/text.html#TSpanElement</ulink> </para></description><method-group name="public member functions">
<method name="class_id"><type>void</type><parameter name="class_id"><paramtype>const std::string &amp;</paramtype></parameter><description><para>Class class id, non-unique identifier for an element.</para><para><ulink url="http://www.w3.org/TR/2001/REC-SVG-20010904/styling.html#ClassAttribute">http://www.w3.org/TR/2001/REC-SVG-20010904/styling.html#ClassAttribute</ulink> 6.12 Attributes common to all elements: id and xml:base Example: class="info"</para></description></method>
<method name="class_id"><type>std::string</type><description><para>Class id, non-unique identifier for an element. </para></description></method>
<method name="clip_id"><type>void</type><parameter name="id"><paramtype>const std::string &amp;</paramtype></parameter><description><para>Set name of a clip path, for example: g_ptr.clip_id(plot_window_clip_); </para></description></method>
<method name="clip_id"><type>std::string</type><description><para>
</para></description><returns><para>name of a clip path, for example: g_ptr.clip_id(plot_window_clip_); </para></returns></method>
<method name="dx"><type><classname>tspan_element</classname> &amp;</type><parameter name="dx"><paramtype>double</paramtype></parameter><description><para>Relative X position of a 1st single character of text string to use with SVG tspan command.</para><para>
</para></description><returns><para><classname alt="boost::svg::tspan_element">tspan_element</classname>&amp; to make chainable. </para></returns></method>
<method name="dx"><type>double</type><description><para>Get relative X position for tspan element. </para></description></method>
<method name="dy"><type><classname>tspan_element</classname> &amp;</type><parameter name="dy"><paramtype>double</paramtype></parameter><description><para>Relative Y position of a 1st single character of text string to use with SVG tspan command.</para><para>
</para></description><returns><para><classname alt="boost::svg::tspan_element">tspan_element</classname>&amp; to make chainable. </para></returns></method>
<method name="dy"><type>double</type><description><para>Get relative Y position for tspan element. </para></description></method>
<method name="fill_color"><type><classname>tspan_element</classname> &amp;</type><parameter name="color"><paramtype>const <classname>svg_color</classname> &amp;</paramtype></parameter><description><para>Set fill color for a tspan element.</para><para>
</para></description><returns><para><classname alt="boost::svg::tspan_element">tspan_element</classname>&amp; to make chainable. </para></returns></method>
<method name="fill_color"><type><classname>svg_color</classname></type><description><para>Get the fill color for tspan element . </para></description></method>
<method name="fill_on"><type>bool</type><description><para>Get true if to use fill color for tspan element . </para></description></method>
<method name="font_family"><type><classname>tspan_element</classname> &amp;</type><parameter name="family"><paramtype>const std::string &amp;</paramtype></parameter><description><para>font family of 1st single character of text string to use with SVG tspan command.</para><para>
</para></description><returns><para><classname alt="boost::svg::tspan_element">tspan_element</classname>&amp; to make chainable. </para></returns></method>
<method name="font_family"><type>const std::string &amp;</type><description><para>Get the font family for tspan element (from its <classname alt="boost::svg::text_style">text_style</classname>). </para></description></method>
<method name="font_size"><type><classname>tspan_element</classname> &amp;</type><parameter name="size"><paramtype>unsigned int</paramtype></parameter><description><para>font size of 1st single character of text string to use with SVG tspan command.</para><para>
</para></description><returns><para><classname alt="boost::svg::tspan_element">tspan_element</classname>&amp; to make chainable. </para></returns></method>
<method name="font_size"><type>unsigned int</type><description><para>Get the font size for tspan element (from its <classname alt="boost::svg::text_style">text_style</classname>). </para></description></method>
<method name="font_style"><type><classname>tspan_element</classname> &amp;</type><parameter name="style"><paramtype>const std::string &amp;</paramtype></parameter><description><para>font style of 1st single character of text string to use with SVG tspan command. font-style: normal | bold | italic | oblique Examples: "italic" <ulink url="http://www.croczilla.com/~alex/conformance_suite/svg/text-fonts-02-t.svg">http://www.croczilla.com/~alex/conformance_suite/svg/text-fonts-02-t.svg</ulink></para><para>
</para></description><returns><para><classname alt="boost::svg::tspan_element">tspan_element</classname>&amp; to make chainable. </para></returns></method>
<method name="font_style"><type>const std::string &amp;</type><description><para>Get the font style for tspan element (from its <classname alt="boost::svg::text_style">text_style</classname>). </para></description></method>
<method name="font_style" cv="const"><type>const std::string &amp;</type><description><para>Get the font style for tspan element (from its <classname alt="boost::svg::text_style">text_style</classname>). const version. </para></description></method>
<method name="font_weight"><type><classname>tspan_element</classname> &amp;</type><parameter name="w"><paramtype>const std::string &amp;</paramtype></parameter><description><para>font weight of 1st single character of text string to use with SVG tspan command. svg font-weight: normal | bold | bolder | lighter | 100 | 200 .. 900 Examples: "bold", "normal" <ulink url="http://www.croczilla.com/~alex/conformance_suite/svg/text-fonts-02-t.svg">http://www.croczilla.com/~alex/conformance_suite/svg/text-fonts-02-t.svg</ulink> tests conformance. Only two weights are supported by Firefox, Opera, Inkscape.</para><para>
</para></description><returns><para><classname alt="boost::svg::tspan_element">tspan_element</classname>&amp; to make chainable. </para></returns></method>
<method name="font_weight" cv="const"><type>const std::string &amp;</type><description><para>Get the font weight for tspan element (from its <classname alt="boost::svg::text_style">text_style</classname>). </para></description></method>
<method name="id"><type>void</type><parameter name="id"><paramtype>const std::string &amp;</paramtype></parameter><description><para>Provide a unique name for an element. Example: id="plotBackground"</para><para>See <ulink url="http://www.w3.org/TR/SVG/struct.html#IDAttribute">http://www.w3.org/TR/SVG/struct.html#IDAttribute</ulink> 5.10.1 Attributes common to all elements: id and xml:base The id and xml:base attributes are available on all SVG elements: Attribute definitions: id = "name" Standard XML attribute for assigning a unique name to an element. Refer to the "Extensible Markup Language (XML) 1.0" Recommendation [XML10]. xml:base = "&lt;uri&gt;" Specifies a base URI other than the base URI of the document or external entity. Refer to the "XML Base" specification [XML-BASE]. A group of elements, as well as individual objects, can be given a name using the id attribute. Named groups are needed for several purposes such as animation and re-usable objects.</para></description></method>
<method name="id"><type>std::string</type><description><para>
</para></description><returns><para>the unique name for an element, for example id() ="plotBackground". </para></returns></method>
<method name="operator!="><type>bool</type><parameter name="lhs"><paramtype>const <classname>svg_element</classname> &amp;</paramtype></parameter><description><para>Compare svg_elements for inequality, useful for Boost.Test. </para></description></method>
<method name="operator=="><type>bool</type><parameter name="lhs"><paramtype>const <classname>svg_element</classname> &amp;</paramtype></parameter><description><para>Compare svg_elements, useful for Boost.Test. </para></description></method>
<method name="rotation"><type><classname>tspan_element</classname> &amp;</type><parameter name="rotation"><paramtype>int</paramtype></parameter><description><para>&lt; Note implementation so far only rotates the 1st character in string. &lt; <classname alt="boost::svg::text_element">text_element</classname> rotation rotates the whole text string, so it <emphasis>much</emphasis> more useful.</para><para>
</para></description><returns><para><classname alt="boost::svg::tspan_element">tspan_element</classname>&amp; to make chainable. </para></returns></method>
<method name="rotation"><type>int</type><description><para>Get rotation for the next character for tspan element. </para></description></method>
<method name="style"><type><classname>svg_style</classname> &amp;</type><description><para>
</para></description><returns><para>reference to <classname alt="boost::svg::svg_style">svg_style</classname> to provide indirect access to colors &amp; width via style().stroke_color(), fill_color(), width() </para></returns></method>
<method name="style" cv="const"><type>const <classname>svg_style</classname> &amp;</type><description><para>
</para></description><returns><para>reference to const <classname alt="boost::svg::svg_style">svg_style</classname> to provide indirect access to colors &amp; width via style().stroke_color(), fill_color(), width() (const version). </para></returns></method>
<method name="text"><type><classname>tspan_element</classname> &amp;</type><parameter name="text"><paramtype>const std::string &amp;</paramtype></parameter><description><para>Set text string to use with SVG tspan command.</para><para>
</para></description><returns><para><classname alt="boost::svg::tspan_element">tspan_element</classname>&amp; to make chainable. </para></returns></method>
<method name="text"><type>std::string</type><description><para>Get text from a tspan element. </para></description></method>
<method name="text_length"><type><classname>tspan_element</classname> &amp;</type><parameter name="text_length"><paramtype>double</paramtype></parameter><description><para>Set user estimate of text length (see <ulink url="http://www.w3.org/TR/SVG/text.html#TSpanElement">http://www.w3.org/TR/SVG/text.html#TSpanElement</ulink> TSPAN SVG Specification).</para><para>
</para></description><returns><para><classname alt="boost::svg::tspan_element">tspan_element</classname>&amp; to make chainable. </para></returns></method>
<method name="text_length"><type>double</type><description><para>Get user estimated length for a text string. </para></description></method>
<method name="textstyle"><type><classname>tspan_element</classname> &amp;</type><parameter name="style"><paramtype>const <classname>text_style</classname> &amp;</paramtype></parameter><description><para>Set text style (font) for a tspan element.</para><para>
</para></description><returns><para><classname alt="boost::svg::tspan_element">tspan_element</classname>&amp; to make chainable. </para></returns></method>
<method name="textstyle"><type>const <classname>text_style</classname> &amp;</type><description><para>
</para></description><returns><para><classname alt="boost::svg::text_style">text_style</classname>&amp; to permit access to font family, size ... </para></returns></method>
<method name="textstyle" cv="const"><type>const <classname>text_style</classname> &amp;</type><description><para>
</para></description><returns><para><classname alt="boost::svg::text_style">text_style</classname>&amp; to permit access to font family, size (const version). </para></returns></method>
<method name="use_style"><type>bool</type><description><para>Get true if to use the estimated text string length. </para></description></method>
<method name="write" specifiers="virtual"><type>void</type><parameter name="rhs"><paramtype>std::ostream &amp;</paramtype></parameter><purpose>write functions output SVG commands. </purpose><description><para>Output SVG XML for <classname alt="boost::svg::tspan_element">tspan_element</classname> </para></description></method>
<method name="x"><type><classname>tspan_element</classname> &amp;</type><parameter name="x"><paramtype>double</paramtype></parameter><description><para>Absolute X position of a 1st single character of text string to use with SVG tspan command.</para><para>
</para></description><returns><para><classname alt="boost::svg::tspan_element">tspan_element</classname>&amp; to make chainable. </para></returns></method>
<method name="x"><type>double</type><description><para>Get absolute X position for tspan element. </para></description></method>
<method name="y"><type><classname>tspan_element</classname> &amp;</type><parameter name="y"><paramtype>double</paramtype></parameter><description><para>Absolute Y position of a 1st single character of text string to use with SVG tspan command.</para><para>
</para></description><returns><para><classname alt="boost::svg::tspan_element">tspan_element</classname>&amp; to make chainable. </para></returns></method>
<method name="y"><type>double</type><description><para>Get absolute Y position for tspan element. </para></description></method>
</method-group>
<constructor><parameter name="text"><paramtype>const std::string &amp;</paramtype></parameter><parameter name="style"><paramtype>const <classname>text_style</classname> &amp;</paramtype><default>no_style</default></parameter><description><para>Construct tspan element (with all defaults except text string). </para></description></constructor>
<constructor><parameter name="rhs"><paramtype>const <classname>tspan_element</classname> &amp;</paramtype></parameter><purpose>Copy contructor. </purpose></constructor>
<method-group name="protected member functions">
<method name="write_attributes"><type>void</type><parameter name="s_out"><paramtype>std::ostream &amp;</paramtype></parameter><description><para>Output group_element id and clip-path.</para><para>Classes inherited from <classname alt="boost::svg::svg_element">svg_element</classname> add other references, 5.3.1, like color, fill, stroke, gradients...</para></description></method>
</method-group>
</class><struct name="v_path"><inherit access="public">boost::svg::path_point</inherit><purpose>Draws a vertical line from the current point (cpx, cpy) to (cpx, y). No x coordinate needed - use current point x. </purpose><data-member name="relative"><type>bool</type><purpose>If true relative else absolute. </purpose></data-member>
<data-member name="y"><type>double</type><purpose>Y vertical line SVG coordinate. </purpose></data-member>
<method-group name="public member functions">
<method name="write" specifiers="virtual"><type>void</type><parameter name="rhs"><paramtype>std::ostream &amp;</paramtype></parameter><purpose>write functions output SVG commands like "M1.2, 3.4", </purpose><description><para>Write vertical line SVG command. </para></description></method>
</method-group>
<constructor><parameter name="y"><paramtype>double</paramtype></parameter><parameter name="relative"><paramtype>bool</paramtype><default>false</default></parameter><description><para>&lt; Constructor (defines all member variables). </para></description></constructor>
</struct><struct name="z_path"><inherit access="public">boost::svg::path_point</inherit><purpose>Close current path. </purpose><description><para><ulink url="http://www.w3.org/TR/SVG/paths.html#PathElement">http://www.w3.org/TR/SVG/paths.html#PathElement</ulink> 8.3.1 General information about path data. Close the current subpath by drawing a straight line from the current point to current subpath's initial point. </para></description><method-group name="public member functions">
<method name="write" specifiers="virtual"><type>void</type><parameter name="rhs"><paramtype>std::ostream &amp;</paramtype></parameter><purpose>write functions output SVG commands like "M1.2, 3.4", </purpose><description><para>Write close current path SVG command. </para></description></method>
</method-group>
<constructor><description><para>Constructor defines all member variables. </para></description></constructor>
<data-member name="relative"><type>bool</type><purpose>If true relative else absolute. </purpose></data-member>
</struct><enum name="align_style"><enumvalue name="left_align"><purpose>Align text to left. </purpose></enumvalue><enumvalue name="right_align"><purpose>Align text to right. </purpose></enumvalue><enumvalue name="center_align"><purpose>Center text. </purpose></enumvalue><purpose>Represents a single block of text, with font &amp; alignment. </purpose></enum>









<function name="operator!="><type>bool</type><parameter name="lhs"><paramtype>const <classname>rect_element</classname> &amp;</paramtype></parameter><parameter name="rhs"><paramtype>const <classname>rect_element</classname> &amp;</paramtype></parameter><description><para>Compare inequality of two SVG rect_elements. </para></description></function>





<function name="operator&lt;&lt;"><type>std::ostream &amp;</type><parameter name="os"><paramtype>std::ostream &amp;</paramtype></parameter><parameter name="r"><paramtype>const <classname>rect_element</classname> &amp;</paramtype></parameter><description><para>Example: <classname alt="boost::svg::rect_element">rect_element</classname> r(20, 20, 50, 50); cout &lt;&lt; r &lt;&lt; endl; Outputs: rect(20, 20, 50, 50) </para></description></function>



<function name="operator&lt;&lt;"><type>std::ostream &amp;</type><parameter name="os"><paramtype>std::ostream &amp;</paramtype></parameter><parameter name="t"><paramtype><classname>text_element</classname> &amp;</paramtype></parameter><description><para>Outputs: text &amp; style (useful for diagnosis). Usage: <classname alt="boost::svg::text_element">text_element</classname> t(20, 30, "sometest", left_align, horizontal); cout &lt;&lt; t &lt;&lt; endl; </para></description></function>
<function name="operator&lt;&lt;"><type>std::ostream &amp;</type><parameter name="os"><paramtype>std::ostream &amp;</paramtype></parameter><parameter name="p"><paramtype>const <classname>poly_path_point</classname> &amp;</paramtype></parameter><description><para>Output may be useful for Boost.Test. Usage: <classname alt="boost::svg::poly_path_point">poly_path_point</classname> p0(100, 200); cout &lt;&lt; p0 &lt;&lt; endl; Outputs: (100, 200) </para></description></function>
<function name="operator&lt;&lt;"><type>std::ostream &amp;</type><parameter name="os"><paramtype>std::ostream &amp;</paramtype></parameter><parameter name="p"><paramtype><classname>polygon_element</classname> &amp;</paramtype></parameter><description><para>Output poly_path_ points (May be useful for Boost.Test). ptr_vector&lt;poly_path_point&gt; poly_points; All the x, y coordinate pairs, Usage: <classname alt="boost::svg::polygon_element">polygon_element</classname> p(1, 2, 3, 4, 5, 6); cout &lt;&lt; p &lt;&lt; endl; Outputs: (1, 2)(3, 4)(5, 6)</para></description></function>
<function name="operator&lt;&lt;"><type>std::ostream &amp;</type><parameter name="os"><paramtype>std::ostream &amp;</paramtype></parameter><parameter name="p"><paramtype><classname>polyline_element</classname> &amp;</paramtype></parameter><description><para>  Output polyline info (useful for Boost.Test).
  Example: &lt;polyline points=" 100,100 200,100 300,200 400,400"/&gt;
  ptr_vector&lt;poly_path_point&gt; poly_points; // All the x, y coordinate pairs.</para></description></function>

<function name="operator=="><type>bool</type><parameter name="lhs"><paramtype>const <classname>rect_element</classname> &amp;</paramtype></parameter><parameter name="rhs"><paramtype>const <classname>rect_element</classname> &amp;</paramtype></parameter><description><para>Compare equality of two SVG rect_elements. </para></description></function>




































</namespace>
</namespace>
</header>
<header name="boost/svg_plot/quantile.hpp">
<para>Estimate p th quantile of data. </para><para>Estimate p th quantile of data using one of 5 definitions. Default is the recommendation of Hyndman and Fan = definition #8.</para><para>Hyndman and Fan recommend their definition 8 (Maple's default definition), which gives quartiles between those reported by Minitab and Excel. This approach is approximately median unbiased for continuous distributions.</para><para>Hyndman and Fan, 1996, "Sample Quantiles in Statistical Packages", The American Statistician 50(4):361-365,1996 <ulink url="http://www.pcreview.co.uk/forums/thread-3494699.php">http://www.pcreview.co.uk/forums/thread-3494699.php</ulink> // Excel - Interquartile Range Miscalculation</para><para>The interquartile range is calculated using the 1st &amp; 3rd sample quartiles, but there are various ways to calculate those quartiles. Excel, S-Plus, etc use H&amp;F definition 7, which returns SMALL(data,i) as quantile(data,(i-1)/(n-1)) and interpolates in between. For a continuous distribution, this will tend to give too narrow an interquartile range, since there will tend to be a small fraction of the population beyond the extreme sample observations. In particular, for odd n (=2*k+1), Excel calculates the 1st (3rd) quartile as the median of the lower (upper) "half" of the sample including the sample median (k+1 observations).</para><para>Minitab, etc use H&amp;F definition 6, which calculates the 1st (3rd) quartile as the median of the lower (upper) "half" of the sample. This "half" sample excludes the sample median (k observations) for odd n (=2*k+1). This will tend to be a better estimate for the population quartiles, but will tend to give quartile estimates that are a bit too far from the center of the whole sample (too wide an interquartile range). </para><namespace name="boost">
<namespace name="svg">






<function name="median"><type>double</type><parameter name="data"><paramtype>vector&lt; double &gt; &amp;</paramtype></parameter><description><para>Median of values in vector <computeroutput>data</computeroutput>. <note><para>Assumes pre-sorted from min to max. </para></note>
</para></description></function>




















<function name="quantile"><type>double</type><parameter name="data"><paramtype>vector&lt; double &gt; &amp;</paramtype><description><para>Population for which to estimate quantile (percentile). Data must be ordered minimum to maximum.</para></description></parameter><parameter name="p"><paramtype>double</paramtype><description><para>Fraction of population, for example, p = 0.25 for 1st quartile. (Usually p = 0.25, or p = 0.75 for boxplots).</para></description></parameter><parameter name="HF_definition"><paramtype>int</paramtype><default>8</default><description><para>Algorithm to use for the estimation.</para></description></parameter><description><para>Estimate quantile from values in vector data. <note><para>Assumes values are pre-sorted from min to max.</para></note>


</para></description><returns><para>Estimated quantile from the population.</para></returns></function>

































</namespace>
</namespace>
</header>
<header name="boost/svg_plot/show_1d_settings.hpp">
<para>Shows settings and options for 1D Plot. </para><para><para>Paul A. Bristow </para>
<para>Mar 2009 </para>
<para><emphasis role="bold">See Also:</emphasis><para>show_2d_settings.cpp for 2-D plot. </para></para>
</para><namespace name="boost">
<namespace name="svg">
<data-member name="fmtFlagWords"><type>const char *</type><purpose>Strings describing each bit in <computeroutput>std::ios_base::fmtflags</computeroutput>. </purpose></data-member>





<function name="l_or_r"><type>const std::string</type><parameter name="i"><paramtype>int</paramtype></parameter><purpose>Outputs strings to show horizontal orientation: left, right or none. </purpose></function>




















<function name="outFmtFlags"><type>void</type><parameter name="fmtFlags"><paramtype>std::ios_base::fmtflags</paramtype></parameter><parameter name="os"><paramtype>std::ostream &amp;</paramtype></parameter><parameter name="term"><paramtype>const char *</paramtype></parameter><description><para>Output strings describing all bits in <computeroutput>std::ios_base::fmtflags</computeroutput>.</para><para><emphasis role="bold">Usage:</emphasis> <computeroutput>outFmtFlags()</computeroutput>; For example, by default outputs to <computeroutput>std::cerr</computeroutput> <sbr/>
FormatFlags: skipws showbase right dec."
 <sbr/>
Default parameter values are:<sbr/>
<programlisting language="c++">void outFmtFlags(fmtflags fmtFlags = cout.flags(), ostream&amp; os = cerr, const char* term = ".\n");
</programlisting></para></description></function>
















<function name="show_1d_plot_settings"><type>void</type><parameter name="plot"><paramtype><classname>svg_1d_plot</classname> &amp;</paramtype></parameter><description><para>Diagnostic display to <computeroutput>std::cout</computeroutput> of all settings of a 1D plot. Outputs a long list of about hundred of plot parameter settings to <computeroutput>cout</computeroutput>. This list is invaluable if the plot does not look as expected. <warning><para>This creates about 100 lines of output, so should be used sparingly!</para></warning>
</para></description></function>




<function name="t_or_b"><type>const std::string</type><parameter name="i"><paramtype>int</paramtype></parameter><purpose>Outputs strings to show vertical orientation: top, bottom, or none. </purpose></function>












</namespace>
</namespace>
</header>
<header name="boost/svg_plot/show_2d_settings.hpp">
<para>Shows settings and options for 2D Plot. </para><para><para><emphasis role="bold">See Also:</emphasis><para>show_1d_settings.cpp for 1D plot. </para></para>
</para><namespace name="boost">
<namespace name="svg">












































<function name="show_2d_plot_settings"><type>void</type><parameter name="plot"><paramtype><classname>svg_2d_plot</classname> &amp;</paramtype></parameter><description><para>Diagnostic display of all settings of a 2D plot. Outputs a long list of over 100 plot parameter settings to <computeroutput>std::cout</computeroutput>. This list is invaluable if the plot does not look as expected. <warning><para>This creates about 100 lines of output, so should be used sparingly!</para></warning>
</para></description></function>
















</namespace>
</namespace>
</header>
<header name="boost/svg_plot/svg.hpp">
<para>Scalable Vector Graphic (SVG) format elements. </para><para>Provides classes and methods to create the basic SVG graph elements. Graph elements, point, path, line, circle, rect and polygon, text are used by the 1D, 2D and Boxplot functions, but could also be used for generating other graphics in SVG format.</para><para><para>Jacob Voytko &amp; Paul A. Bristow </para>
</para><namespace name="boost">
<namespace name="math">

</namespace>
<namespace name="svg">
<class name="svg"><purpose>Class to output Scalable Vector Graph XML graph elements: point, path, line, circle, rect, polygon and text. </purpose><description><para>Class to add basic Scalable Vector Graph XML graph elements: point, path, line, circle, rect, polygon and text to SVG images, including metadata like author, copyright and license. Finally output the final image as SVG XML to a <computeroutput>std::stream</computeroutput> or file. </para></description><method-group name="public member functions">
<method name="add_g_element"><type><classname>g_element</classname> &amp;</type><description><para>Add information about a group element to the document. Increments the size of the array of g_elements, returned by g_element.size().</para><para>
</para></description><returns><para>reference to the added group element. </para></returns></method>
<method name="attribution"><type>const std::string &amp;</type><description><para>
</para></description><returns><para>License attribution requirement. </para></returns></method>
<method name="author"><type>void</type><parameter name="a"><paramtype>const std::string</paramtype></parameter><description><para>Set author for the SVG document (default is &lt;copyright_holder&gt;). </para></description></method>
<method name="author"><type>const std::string &amp;</type><description><para>
</para></description><returns><para>author of the SVG document (for header as &lt;author&gt;). </para></returns></method>
<method name="boost_license_on"><type>void</type><parameter name="l"><paramtype>bool</paramtype></parameter><description><para>Set (or not) to include Boost license text in <computeroutput>svg</computeroutput> header as comment. </para></description></method>
<method name="boost_license_on"><type>bool</type><description><para>Return true if a boost license has been requested in the <computeroutput>svg</computeroutput> header as comment. </para></description></method>
<method name="circle"><type><classname>circle_element</classname> &amp;</type><parameter name="x"><paramtype>double</paramtype></parameter><parameter name="y"><paramtype>double</paramtype></parameter><parameter name="radius"><paramtype>unsigned int</paramtype><default>5</default></parameter><description><para>push_back information about a circle to the document. 'circle' element defines a circle centered at (x1, y1) and its radius. </para></description></method>
<method name="clip_path"><type><classname>clip_path_element</classname> &amp;</type><parameter name="rect"><paramtype>const <classname>rect_element</classname> &amp;</paramtype></parameter><parameter name="id"><paramtype>const std::string &amp;</paramtype></parameter><description><para>Rectangle outside which 'painting' is 'clipped' so doesn't show.</para><para>
</para></description><returns><para>Reference to clip_path element. </para></returns></method>
<method name="commercialuse"><type>const std::string &amp;</type><description><para>
</para></description><returns><para>License commercial use requirement. </para></returns></method>
<method name="coord_precision"><type>void</type><parameter name="digits"><paramtype>int</paramtype></parameter><description><para>Set decimal digits to be output for X and Y coordinates.</para><para>Default stream precision 6 decimal digits is probably excessive.<sbr/>
 4.1 Basic data types, integer or float in decimal or scientific (using e format). 3 or 4 probably enough if image size is under 1000 x 1000. This will reduce .svg file sizes significantly for curves represented with many data points.<sbr/>
 For example, if a curve is shown using 100 points, reducing to precision(3) from 6 will reduce file size by 300 bytes. So a default of 3 is used in the default constructor above, but can be changed using this function. Used in <computeroutput>svg.write</computeroutput> below and so applies to all the entire <computeroutput>svg</computeroutput> document.</para></description></method>
<method name="coord_precision"><type>int</type><description><para>
</para></description><returns><para>Decimal digits to be output for X and Y coordinates. </para></returns></method>
<method name="copyright_date"><type>void</type><parameter name="copyright_date"><paramtype>const std::string</paramtype></parameter><description><para>Set copyright date for the SVG document (for header as &lt;copyright_date&gt;). </para></description></method>
<method name="copyright_date"><type>const std::string</type><description><para>
</para></description><returns><para>copyright date for the SVG document (for header as &lt;copyright_date&gt;). </para></returns></method>
<method name="copyright_holder"><type>void</type><parameter name="copyright_holder"><paramtype>const std::string</paramtype></parameter><description><para>Set document title for the SVG document (for header as &lt;copyright_holder&gt;). </para></description></method>
<method name="copyright_holder"><type>const std::string</type><description><para>
</para></description><returns><para>document title for the SVG document (for header as &lt;copyright_holder&gt; ). </para></returns></method>
<method name="description"><type>void</type><parameter name="d"><paramtype>const std::string</paramtype></parameter><description><para>Write description to the SVG document (for header as &lt;desc&gt; ... &lt;/desc&gt;). </para></description></method>
<method name="description"><type>const std::string &amp;</type><description><para>
</para></description><returns><para>description of the SVG document (for header as &lt;desc&gt;). </para></returns></method>
<method name="distribution"><type>const std::string &amp;</type><description><para>
</para></description><returns><para>License distribution requirement. </para></returns></method>
<method name="document_size"><type>unsigned int</type><description><para>
</para></description><returns><para>How many group elements groups have been added to the document. </para></returns></method>
<method name="document_title"><type>void</type><parameter name="title"><paramtype>const std::string</paramtype></parameter><description><para>Set document title for the SVG document (for header as &lt;title&gt; ... &lt;/title&gt;). </para></description></method>
<method name="document_title"><type>const std::string</type><description><para>
</para></description><returns><para>document title for the SVG document (for header as &lt;title&gt;). </para></returns></method>
<method name="ellipse"><type><classname>ellipse_element</classname> &amp;</type><parameter name="rx"><paramtype>double</paramtype></parameter><parameter name="ry"><paramtype>double</paramtype></parameter><parameter name="cx"><paramtype>double</paramtype></parameter><parameter name="cy"><paramtype>double</paramtype></parameter><description><para>push_back information about a ellipse to the document. 'ellipse' element defines a ellipse centered at point (x1, y1) and its two radii. </para></description></method>
<method name="g"><type><classname>g_element</classname> &amp;</type><parameter name="i"><paramtype>int</paramtype></parameter><description><para>from array of g_elements, indexed by group type, PLOT_BACKGROUND, PLOT_WINDOW_BACKGROUND, ... SVG_PLOT_DOC_CHILDREN,</para><para>
</para></description><returns><para>reference to the ith group element. </para></returns></method>
<method name="hexagon"><type><classname>polygon_element</classname> &amp;</type><parameter name="x1"><paramtype>double</paramtype></parameter><parameter name="y1"><paramtype>double</paramtype></parameter><parameter name="x2"><paramtype>double</paramtype></parameter><parameter name="y2"><paramtype>double</paramtype></parameter><parameter name="x3"><paramtype>double</paramtype></parameter><parameter name="y3"><paramtype>double</paramtype></parameter><parameter name="x4"><paramtype>double</paramtype></parameter><parameter name="y4"><paramtype>double</paramtype></parameter><parameter name="x5"><paramtype>double</paramtype></parameter><parameter name="y5"><paramtype>double</paramtype></parameter><parameter name="x6"><paramtype>double</paramtype></parameter><parameter name="y6"><paramtype>double</paramtype></parameter><parameter name="f"><paramtype>bool</paramtype><default>true</default></parameter><description><para>push_back the coordinate of the points of a complete hexagon to the document. </para></description></method>
<method name="image_filename"><type>void</type><parameter name="filename"><paramtype>const std::string</paramtype></parameter><description><para>Set image filename for the SVG document (for header as &lt;filename&gt;). </para></description></method>
<method name="image_filename"><type>const std::string</type><description><para>
</para></description><returns><para>image filename for the SVG document (for header as &lt;filename&gt;). </para></returns></method>
<method name="license"><type>void</type><parameter name="reproduction"><paramtype>const std::string</paramtype><default>"permits"</default></parameter><parameter name="distribution"><paramtype>const std::string</paramtype><default>"permits"</default></parameter><parameter name="attribution"><paramtype>const std::string</paramtype><default>"requires"</default></parameter><parameter name="commercialuse"><paramtype>const std::string</paramtype><default>"permits"</default></parameter><parameter name="derivative"><paramtype>const std::string</paramtype><default>"permits"</default></parameter><description><para>Set several license requirements for the svg document. If any are set, then a license is wanted, so <computeroutput>svg::is_license</computeroutput> is set <computeroutput>true</computeroutput>. This can be changed using function <computeroutput>license_on()</computeroutput>.</para></description></method>
<method name="license_on"><type>void</type><parameter name="l"><paramtype>bool</paramtype></parameter><description><para>Set (or not) license using all requirements (default permits).<sbr/>
Implicitly set by setting any license requirement using <computeroutput>license</computeroutput> function.</para></description></method>
<method name="license_on"><type>bool</type><description><para>Return true if a license has been requested for <computeroutput>svg</computeroutput> header metatadata. </para></description></method>
<method name="line"><type><classname>line_element</classname> &amp;</type><parameter name="x1"><paramtype>double</paramtype></parameter><parameter name="y1"><paramtype>double</paramtype></parameter><parameter name="x2"><paramtype>double</paramtype></parameter><parameter name="y2"><paramtype>double</paramtype></parameter><description><para>Add (push_back) information about a line to the document. 'line' element defines a line segment that starts at one point (x1, y1) and ends at another (x2, y2). </para></description></method>
<method name="path"><type><classname>path_element</classname> &amp;</type><description><para>Construct an empty path, ready for additions with chainable functions M., L., ...</para><para>
</para></description><returns><para>reference to path element. </para></returns></method>
<method name="pentagon"><type><classname>polygon_element</classname> &amp;</type><parameter name="x1"><paramtype>double</paramtype></parameter><parameter name="y1"><paramtype>double</paramtype></parameter><parameter name="x2"><paramtype>double</paramtype></parameter><parameter name="y2"><paramtype>double</paramtype></parameter><parameter name="x3"><paramtype>double</paramtype></parameter><parameter name="y3"><paramtype>double</paramtype></parameter><parameter name="x4"><paramtype>double</paramtype></parameter><parameter name="y4"><paramtype>double</paramtype></parameter><parameter name="x5"><paramtype>double</paramtype></parameter><parameter name="y5"><paramtype>double</paramtype></parameter><parameter name="f"><paramtype>bool</paramtype><default>true</default></parameter><description><para>push_back the five coordinates complete pentagon to the document. </para></description></method>
<method name="polygon"><type><classname>polygon_element</classname> &amp;</type><parameter name="x"><paramtype>double</paramtype></parameter><parameter name="y"><paramtype>double</paramtype></parameter><parameter name="f"><paramtype>bool</paramtype><default>true</default></parameter><description><para>push_back info about 1st point of a polygon shape (add others later with .P(x, y)). </para></description></method>
<method name="polygon"><type><classname>polygon_element</classname> &amp;</type><parameter name="v"><paramtype>std::vector&lt; <classname>poly_path_point</classname> &gt; &amp;</paramtype></parameter><parameter name="f"><paramtype>bool</paramtype><default>true</default></parameter><description><para>push_back a complete many-sided polygon to the document with vertices specified as a vector of path_points. </para></description></method>
<method name="polyline"><type><classname>polyline_element</classname> &amp;</type><parameter name="x"><paramtype>double</paramtype></parameter><parameter name="y"><paramtype>double</paramtype></parameter><description><para>push_back info about the 1st point of a polyline (add others later with .P(x, y)). </para></description></method>
<method name="polyline"><type><classname>polyline_element</classname> &amp;</type><parameter name="x1"><paramtype>double</paramtype></parameter><parameter name="y1"><paramtype>double</paramtype></parameter><parameter name="x2"><paramtype>double</paramtype></parameter><parameter name="y2"><paramtype>double</paramtype></parameter><description><para>push_back info about the 1st &amp; 2nd point of a polyline (add others later with .P(x, y)). </para></description></method>
<method name="polyline"><type><classname>polyline_element</classname> &amp;</type><parameter name="v"><paramtype>std::vector&lt; <classname>poly_path_point</classname> &gt; &amp;</paramtype></parameter><description><para>push_back a complete many-sided polygon to the document, from a vector of path_points. </para></description></method>
<method name="rect"><type><classname>rect_element</classname> &amp;</type><parameter name="x1"><paramtype>double</paramtype></parameter><parameter name="y1"><paramtype>double</paramtype></parameter><parameter name="x2"><paramtype>double</paramtype></parameter><parameter name="y2"><paramtype>double</paramtype></parameter><description><para>push_back information about a rectangle to the document. 'Rect' element defines a rect segment with one point (x1, y1) and opposite vertex is (x2, y2). </para></description></method>
<method name="reproduction"><type>const std::string &amp;</type><description><para>
</para></description><returns><para>License reproduction requirement. </para></returns></method>
<method name="rhombus"><type><classname>polygon_element</classname> &amp;</type><parameter name="x1"><paramtype>double</paramtype></parameter><parameter name="y1"><paramtype>double</paramtype></parameter><parameter name="x2"><paramtype>double</paramtype></parameter><parameter name="y2"><paramtype>double</paramtype></parameter><parameter name="x3"><paramtype>double</paramtype></parameter><parameter name="y3"><paramtype>double</paramtype></parameter><parameter name="x4"><paramtype>double</paramtype></parameter><parameter name="y4"><paramtype>double</paramtype></parameter><parameter name="f"><paramtype>bool</paramtype><default>true</default></parameter><description><para>push_back the four coordinate of a complete rhombus to the document. </para></description></method>
<method name="size"><type>void</type><parameter name="x"><paramtype>unsigned int</paramtype></parameter><parameter name="y"><paramtype>unsigned int</paramtype></parameter><description><para>Set both X and Y image size (SVG units, default pixels). </para></description></method>
<method name="text"><type><classname>text_element</classname> &amp;</type><parameter name="x"><paramtype>double</paramtype></parameter><parameter name="y"><paramtype>double</paramtype></parameter><parameter name="text"><paramtype>const std::string &amp;</paramtype></parameter><parameter name="style"><paramtype>const <classname>text_style</classname> &amp;</paramtype></parameter><parameter name="align"><paramtype>align_style</paramtype></parameter><parameter name="rotate"><paramtype>rotate_style</paramtype></parameter><description><para>push_back information about text to the document, with location, style, alignment &amp; rotation. </para></description></method>
<method name="triangle"><type><classname>polygon_element</classname> &amp;</type><parameter name="x1"><paramtype>double</paramtype></parameter><parameter name="y1"><paramtype>double</paramtype></parameter><parameter name="x2"><paramtype>double</paramtype></parameter><parameter name="y2"><paramtype>double</paramtype></parameter><parameter name="x3"><paramtype>double</paramtype></parameter><parameter name="y3"><paramtype>double</paramtype></parameter><parameter name="f"><paramtype>bool</paramtype><default>true</default></parameter><description><para>push_back a complete triangle to the document. </para></description></method>
<method name="write"><type>void</type><parameter name="filename"><paramtype>const std::string &amp;</paramtype></parameter><purpose>Write whole .svg 'file' contents to file. </purpose><description><para><computeroutput>svg.write()</computeroutput> also has two flavors, a file and an ostream. The file version opens an ostream, and calls the stream version. The stream version first clears all unnecessary data from the graph, builds the document tree, and then calls the write function for the root document node, which calls all other nodes through the Visitor pattern.</para><para>TODO provide a filtered-stream version that writes in zipped format type .svgz ? <ulink url="http://lists.w3.org/Archives/Public/www-svg/2005Dec/0308.html">http://lists.w3.org/Archives/Public/www-svg/2005Dec/0308.html</ulink> recommends MUST have correct Content-Encoding headers. </para></description></method>
<method name="write"><type>void</type><parameter name="s_out"><paramtype>std::ostream &amp;</paramtype></parameter><description><para>Write whole .svg 'file' contents to stream (perhaps a file). </para></description></method>
<method name="x_size"><type>void</type><parameter name="x"><paramtype>unsigned int</paramtype></parameter><description><para>Set X-axis (horizontal) image size. </para></description></method>
<method name="x_size"><type>unsigned int</type><description><para>
</para></description><returns><para>X-axis (horizontal width) SVG image size. </para></returns></method>
<method name="xy_sizes"><type>std::pair&lt; double, double &gt;</type><description><para>
</para></description><returns><para>Both X and Y sizes (horizontal width and vertical height) of the SVG image. </para></returns></method>
<method name="y_size"><type>void</type><parameter name="y"><paramtype>unsigned int</paramtype></parameter><description><para>Set Y-axis (vertical) image size. </para></description></method>
<method name="y_size"><type>unsigned int</type><description><para>
</para></description><returns><para>Y-axis (vertical height) SVG image size. </para></returns></method>
</method-group>
<constructor><purpose>Define default constructor. </purpose></constructor>
<constructor><parameter name="rhs"><paramtype>const <classname>svg</classname> &amp;</paramtype></parameter><description><para>Copy constructor copies X and Y image sizes. </para></description></constructor>
</class><namespace name="boxplot">
</namespace>
<data-member name="package_info" specifiers="static"><type>const std::string</type><purpose>Default SVG package information about this program that produced the SVG image (not the image itself). </purpose><description><para>Inserted as a SVG comment, for example<sbr/>
 "&lt;!-- Demo of 1D plot features. --&gt;"<sbr/>
 and also as a<sbr/>
 &lt;desc&gt;<ulink url="http://www.w3.org/TR/SVG/struct.html#DescriptionAndTitleElements">http://www.w3.org/TR/SVG/struct.html#DescriptionAndTitleElements</ulink><sbr/>
 Section 5.4 The 'desc' and 'title' elements.<sbr/>
<sbr/>
 Default XML comment is:<sbr/>
<sbr/>
      &lt;!-- SVG plot written using Boost.Plot program (Creator Jacob Voytko) --&gt;
 <sbr/>
      &lt;!-- Use, modification and distribution of Boost.Plot subject to the --&gt;
 <sbr/>
      &lt;!-- Boost Software License, Version 1.0.--&gt;
 <sbr/>
      &lt;!-- (See accompanying file LICENSE_1_0.txt --&gt;
 <sbr/>
      &lt;!-- or copy at http://www.boost.org/LICENSE_1_0.txt) --&gt; </para></description></data-member>





























































</namespace>
</namespace>
<namespace name="svg">
</namespace>
</header>
<header name="boost/svg_plot/svg_1d_plot.hpp">
<para>Create 1D plots in Scalable Vector Graphic (SVG) format. </para><para>Provides <computeroutput>svg_1d_plot</computeroutput> data and function to create plots, and <computeroutput>svg_1d_plot_series</computeroutput> to allow data values to be added.<sbr/>
 Very many functions allow fine control of the appearance and layout of plots and data markers.<sbr/>
 (Items common to 1D and 2D use functions and classes in <computeroutput>axis_plot_frame</computeroutput>). </para><namespace name="boost">
<namespace name="svg">
<class name="svg_1d_plot"><purpose>All settings for a plot that control the appearance, and functions to get and set these settings.<sbr/>
(But see <computeroutput><classname alt="boost::svg::svg_1d_plot_series">svg_1d_plot_series</classname></computeroutput> to control appearance of data points). </purpose><description><para><computeroutput>axis_plot_frame.hpp</computeroutput> contains functions common to 1 and 2-D.</para><para>Several versions of the function <computeroutput>plot</computeroutput> are provided to allow data to be in different sources, and to allow either all data in a container or just a sub-range to be plotted. <para><emphasis role="bold">See Also:</emphasis><para><computeroutput>svg_2d_plot.hpp</computeroutput> for the 2-D version. </para></para>
</para></description><method-group name="public member functions">
<method name="autoscale"><type>bool</type><description><para>
</para></description><returns><para><computeroutput>true</computeroutput> if to use autoscale values autoscaling for X-axis. </para></returns></method>
<method name="autoscale"><type><classname>svg_1d_plot</classname> &amp;</type><parameter name="b"><paramtype>bool</paramtype></parameter><purpose>Set <computeroutput>true</computeroutput> if to use autoscale values for X-axis. </purpose></method>
<method name="autoscale_check_limits"><type><classname>svg_1d_plot</classname> &amp;</type><parameter name="b"><paramtype>bool</paramtype></parameter><description><para>Set <computeroutput>true</computeroutput> to check that values used for autoscale are within limits. Default is <computeroutput>true</computeroutput>, but can switch off checks for speed if user can be sure all values are 'inside limits'. </para></description></method>
<method name="autoscale_check_limits"><type>bool</type><description><para>
</para></description><returns><para><computeroutput>true</computeroutput> if to check that values used for autoscaling are within limits. </para></returns></method>
<method name="autoscale_plusminus"><type><classname>svg_1d_plot</classname> &amp;</type><parameter name=""><paramtype>double</paramtype></parameter><purpose>Set how many std_dev or standard deviations to allow for ellipses when autoscaling. </purpose></method>
<method name="autoscale_plusminus"><type>double</type><description><para>
</para></description><returns><para>How many std_dev or standard deviations allowed for ellipses when autoscaling. </para></returns></method>
<method name="axes_on"><type><classname>svg_1d_plot</classname> &amp;</type><parameter name="is"><paramtype>bool</paramtype></parameter><purpose>Set <computeroutput>true</computeroutput> if to draw <emphasis role="bold">both</emphasis> x and y axes (note plural axes). </purpose></method>
<method name="axes_on"><type>bool</type><description><para>
</para></description><returns><para><computeroutput>true</computeroutput> if to draw <emphasis role="bold">both</emphasis> x and y axis on. </para></returns></method>
<method name="background_border_color"><type><classname>svg_1d_plot</classname> &amp;</type><parameter name="col"><paramtype>const <classname>svg_color</classname> &amp;</paramtype></parameter><purpose>Set plot background border color. </purpose></method>
<method name="background_border_color"><type><classname>svg_color</classname></type><description><para>
</para></description><returns><para>plot background border color. </para></returns></method>
<method name="background_border_width"><type><classname>svg_1d_plot</classname> &amp;</type><parameter name="w"><paramtype>double</paramtype></parameter><purpose>Set plot background border width. </purpose></method>
<method name="background_border_width"><type>double</type><description><para>
</para></description><returns><para>Plot background border width. </para></returns></method>
<method name="background_color"><type><classname>svg_color</classname></type><description><para>
</para></description><returns><para>Plot background color. </para></returns></method>
<method name="background_color"><type><classname>svg_1d_plot</classname> &amp;</type><parameter name="col"><paramtype>const <classname>svg_color</classname> &amp;</paramtype></parameter><purpose>Set plot background color. </purpose></method>
<method name="boost_license_on"><type><classname>svg_1d_plot</classname> &amp;</type><parameter name="l"><paramtype>bool</paramtype></parameter><purpose>Set <computeroutput>true</computeroutput> if the Boost license conditions should be included in the SVG document. </purpose></method>
<method name="boost_license_on"><type>bool</type><description><para>
</para></description><returns><para><computeroutput>true</computeroutput> if the Boost license conditions should be included in the SVG document. </para></returns></method>
<method name="confidence"><type><classname>svg_1d_plot</classname> &amp;</type><parameter name=""><paramtype>double</paramtype></parameter><purpose>Set confidence alpha for display of confidence intervals (default 0.05 for 95%). </purpose></method>
<method name="confidence"><type>double</type><description><para>
</para></description><returns><para>Confidence alpha for display of confidence intervals (default 0.05 for 95%). </para></returns></method>
<method name="coord_precision"><type><classname>svg_1d_plot</classname> &amp;</type><parameter name="digits"><paramtype>int</paramtype></parameter><description><para>Precision of SVG coordinates in decimal digits (default 3). 3 decimal digits precision is sufficient for small images. 4 or 5 decimal digits precision will give higher quality plots, especially for larger images, at the expense of larger .svg files, particularly if there are very many data points. </para></description></method>
<method name="coord_precision"><type>int</type><description><para>
</para></description><returns><para>precision of SVG coordinates in decimal digits. </para></returns></method>
<method name="copyright_date"><type><classname>svg_1d_plot</classname> &amp;</type><parameter name="d"><paramtype>const std::string</paramtype></parameter><description><para>Writes copyright date to the SVG document. and as metadata:&lt;meta name="date" content="2007" /&gt;  </para></description></method>
<method name="copyright_date"><type>const std::string</type><description><para>
</para></description><returns><para>SVG document copyright_date. </para></returns></method>
<method name="copyright_holder"><type><classname>svg_1d_plot</classname> &amp;</type><parameter name="d"><paramtype>const std::string</paramtype></parameter><description><para>Writes copyright_holder metadata to the SVG document (for header as ) /and as metadata:&lt;meta name="copyright" content="Paul A. Bristow" /&gt;  </para></description></method>
<method name="copyright_holder"><type>const std::string</type><description><para>
</para></description><returns><para>SVG document copyright holder. </para></returns></method>
<method name="data_lines_width"><type><classname>svg_1d_plot</classname> &amp;</type><parameter name="width"><paramtype>double</paramtype></parameter><purpose>Set the width of lines joining data points. </purpose></method>
<method name="data_lines_width"><type>double</type><description><para>
</para></description><returns><para>the width of lines joining data points. </para></returns></method>
<method name="derived"><type><classname>svg_1d_plot</classname> &amp;</type><description><para>Uses Curiously Recurring Template Pattern to allow 1D and 2D to reuse common code. See <ulink url="http://en.wikipedia.org/wiki/Curiously_Recurring_Template_Pattern">http://en.wikipedia.org/wiki/Curiously_Recurring_Template_Pattern</ulink> . </para></description></method>
<method name="derived" cv="const"><type>const <classname>svg_1d_plot</classname> &amp;</type><description><para>const version of derived() </para></description></method>
<method name="description"><type><classname>svg_1d_plot</classname> &amp;</type><parameter name="d"><paramtype>const std::string</paramtype></parameter><purpose>Writes description to the document for header as. </purpose><description><para>&lt;desc&gt; My Description &lt;/desc&gt;.  </para></description></method>
<method name="description"><type>const std::string &amp;</type><description><para>
</para></description><returns><para>Description of the document for header as&lt;desc&gt; My description &lt;/desc&gt;.  </para></returns></method>
<method name="document_title"><type><classname>svg_1d_plot</classname> &amp;</type><parameter name="d"><paramtype>const std::string</paramtype></parameter><purpose>Set document title to the document for header as. </purpose><description><para>&lt;title&gt; My Title &lt;/title&gt;.  </para></description></method>
<method name="document_title"><type>std::string</type><description><para>
</para></description><returns><para>Document title to the document for header as&lt;title&gt; My Title &lt;/title&gt;.  </para></returns></method>
<method name="draw_line"><type><classname>svg_1d_plot</classname> &amp;</type><parameter name="x1"><paramtype>double</paramtype></parameter><parameter name="y1"><paramtype>double</paramtype></parameter><parameter name="x2"><paramtype>double</paramtype></parameter><parameter name="y2"><paramtype>double</paramtype></parameter><parameter name="col"><paramtype>const <classname>svg_color</classname> &amp;</paramtype><default>black</default></parameter><description><para>Annotate plot with a line from SVG Coordinates X1, Y1 to X2, Y2. (Default color black). Note <emphasis role="bold">NOT</emphasis> the data values. See draw_plot_line if want to use user coordinates. </para></description></method>
<method name="draw_note"><type><classname>svg_1d_plot</classname> &amp;</type><parameter name="x"><paramtype>double</paramtype></parameter><parameter name="y"><paramtype>double</paramtype></parameter><parameter name="note"><paramtype>std::string</paramtype></parameter><parameter name="rot"><paramtype>rotate_style</paramtype><default>horizontal</default></parameter><parameter name="al"><paramtype>align_style</paramtype><default>center_align</default></parameter><parameter name=""><paramtype>const <classname>svg_color</classname> &amp;</paramtype><default>black</default></parameter><parameter name="tsty"><paramtype><classname>text_style</classname> &amp;</paramtype><default>no_style</default></parameter><purpose>Annotate plot with a text string (perhaps including Unicode), putting note at SVG Coordinates X, Y. </purpose><description><para>Defaults color black, rotation horizontal and align = center_align Using center_align is recommended as it will ensure that will center correctly (even if original string is made much longer because it contains Unicode, for example Greek or math symbols, taking about 6 characters per symbol) because the render engine does the centering. </para></description></method>
<method name="draw_plot_curve"><type><classname>svg_1d_plot</classname> &amp;</type><parameter name="x1"><paramtype>double</paramtype></parameter><parameter name="y1"><paramtype>double</paramtype></parameter><parameter name="x2"><paramtype>double</paramtype></parameter><parameter name="y2"><paramtype>double</paramtype></parameter><parameter name="x3"><paramtype>double</paramtype></parameter><parameter name="y3"><paramtype>double</paramtype></parameter><parameter name="col"><paramtype>const <classname>svg_color</classname> &amp;</paramtype><default>black</default></parameter><purpose>Annotate plot with a line from user's Cartesian Coordinates X1, Y1 via X2, Y2 to X3, Y3. </purpose><description><para>For example, -10, -10, +10, +10, Default color black. </para></description></method>
<method name="draw_plot_line"><type><classname>svg_1d_plot</classname> &amp;</type><parameter name="x1"><paramtype>double</paramtype></parameter><parameter name="y1"><paramtype>double</paramtype></parameter><parameter name="x2"><paramtype>double</paramtype></parameter><parameter name="y2"><paramtype>double</paramtype></parameter><parameter name="col"><paramtype>const <classname>svg_color</classname> &amp;</paramtype><default>black</default></parameter><purpose>Annotate plot with a line from user's Cartesian Coordinates X1, Y1 to X2, Y2. </purpose><description><para>For example, -10, -10, +10, +10, Default color black. </para></description></method>
<method name="image_border_margin"><type><classname>svg_1d_plot</classname> &amp;</type><parameter name="w"><paramtype>double</paramtype></parameter><purpose>Set the margin around the plot window border (svg units, default pixels). </purpose><description><para>This prevents the plot window getting too close to other elements of the plot. </para></description></method>
<method name="image_border_margin"><type>double</type><description><para>
</para></description><returns><para>the margin around the plot window border (svg units, default pixels). </para></returns></method>
<method name="image_border_width"><type><classname>svg_1d_plot</classname> &amp;</type><parameter name="w"><paramtype>double</paramtype></parameter><purpose>Set the svg image border width (svg units, default pixels). </purpose></method>
<method name="image_border_width"><type>double</type><description><para>
</para></description><returns><para>the svg image border width (svg units, default pixels). </para></returns></method>
<method name="image_x_size"><type>unsigned int</type><purpose>Obselete - deprecated use x_size() </purpose></method>
<method name="image_x_size"><type><classname>svg_1d_plot</classname> &amp;</type><parameter name="i"><paramtype>unsigned int</paramtype></parameter><purpose>Obselete - deprecated - use x_size(). </purpose></method>
<method name="image_y_size"><type>unsigned int</type><purpose>Obselete - deprecated - use y_size() </purpose></method>
<method name="image_y_size"><type><classname>svg_1d_plot</classname> &amp;</type><parameter name="i"><paramtype>unsigned int</paramtype></parameter><purpose>Obselete - deprecated - use y_size() </purpose></method>
<method name="legend_background_color"><type><classname>svg_1d_plot</classname> &amp;</type><parameter name="col"><paramtype>const <classname>svg_color</classname> &amp;</paramtype></parameter><purpose>Set the background fill color of the legend box. </purpose></method>
<method name="legend_background_color"><type><classname>svg_color</classname></type><description><para>
</para></description><returns><para>the background fill color of the legend box. </para></returns></method>
<method name="legend_border_color"><type><classname>svg_1d_plot</classname> &amp;</type><parameter name="col"><paramtype>const <classname>svg_color</classname> &amp;</paramtype></parameter><purpose>Set the border stroke color of the legend box. </purpose></method>
<method name="legend_border_color"><type><classname>svg_color</classname></type><description><para>
</para></description><returns><para>the border stroke color of the legend box. </para></returns></method>
<method name="legend_bottom_right"><type>const std::pair&lt; double, double &gt;</type><description><para>
</para></description><returns><para>SVG coordinate (default pixels) of bottom right of legend box. </para></returns></method>
<method name="legend_box_fill_on"><type>bool</type><description><para>
</para></description><returns><para>true if legend box has a background fill color. </para></returns></method>
<method name="legend_color"><type><classname>svg_1d_plot</classname> &amp;</type><parameter name="col"><paramtype>const <classname>svg_color</classname> &amp;</paramtype></parameter><purpose>Set the color of the title of the legend. </purpose></method>
<method name="legend_color"><type><classname>svg_color</classname></type><description><para>
</para></description><returns><para>the color of the title of the legend. </para></returns></method>
<method name="legend_font_family"><type><classname>svg_1d_plot</classname> &amp;</type><parameter name="family"><paramtype>const std::string &amp;</paramtype></parameter><purpose>Set the font family for the legend title. </purpose></method>
<method name="legend_font_family"><type>const std::string &amp;</type><description><para>
</para></description><returns><para>the font family for the legend title. </para></returns></method>
<method name="legend_font_weight"><type><classname>svg_1d_plot</classname> &amp;</type><parameter name="weight"><paramtype>const std::string &amp;</paramtype></parameter><purpose>Set the font weight for the legend title. </purpose></method>
<method name="legend_font_weight"><type>const std::string &amp;</type><description><para>
</para></description><returns><para>Font weight for the legend title. </para></returns></method>
<method name="legend_header_font_size"><type><classname>svg_1d_plot</classname> &amp;</type><parameter name="size"><paramtype>int</paramtype></parameter><purpose>Set legend header font size (svg units, default pixels). </purpose></method>
<method name="legend_header_font_size"><type>int</type><description><para>
</para></description><returns><para>legend header font size (svg units, default pixels). </para></returns></method>
<method name="legend_lines"><type><classname>svg_1d_plot</classname> &amp;</type><parameter name="is"><paramtype>bool</paramtype></parameter><description><para>Set true if legend should include samples of the lines joining data points. This allows different series of data points to be distinguished by different color and/or width. This is especially useful to show plots of different functions and/or different parameters in different colors. </para></description></method>
<method name="legend_lines"><type>bool</type><description><para>
</para></description><returns><para>true if legend should include samples of the lines joining data points. </para></returns></method>
<method name="legend_on"><type><classname>svg_1d_plot</classname> &amp;</type><parameter name="cmd"><paramtype>bool</paramtype></parameter><purpose>Set <computeroutput>true</computeroutput> if a legend is wanted. </purpose></method>
<method name="legend_on"><type>bool</type><description><para>
</para></description><returns><para><computeroutput>true</computeroutput> if a legend is wanted. </para></returns></method>
<method name="legend_outside"><type>bool</type><description><para>
</para></description><returns><para>if the legend should be outside the plot area. </para></returns></method>
<method name="legend_place"><type><classname>svg_1d_plot</classname> &amp;</type><parameter name="l"><paramtype>legend_places</paramtype></parameter><purpose>Set the position of the legend,. </purpose><description><para><para><emphasis role="bold">See Also:</emphasis><para>boost::svg::legend_places </para></para>
</para></description></method>
<method name="legend_place"><type>legend_places</type><description><para>
<para><emphasis role="bold">See Also:</emphasis><para>boost::svg::legend_places </para></para>
</para></description><returns><para>the position of the legend, </para></returns></method>
<method name="legend_title"><type><classname>svg_1d_plot</classname> &amp;</type><parameter name="title"><paramtype>const std::string</paramtype></parameter><purpose>Set the title for the legend. </purpose></method>
<method name="legend_title"><type>const std::string</type><description><para>
</para></description><returns><para>Title for the legend. </para></returns></method>
<method name="legend_title_font_size"><type><classname>svg_1d_plot</classname> &amp;</type><parameter name="size"><paramtype>unsigned int</paramtype></parameter><description><para>
</para></description><returns><para>Font family for the legend title. </para></returns></method>
<method name="legend_title_font_size"><type>unsigned int</type><description><para>
</para></description><returns><para>Font size for the legend title (svg units, default pixels). </para></returns></method>
<method name="legend_top_left"><type><classname>svg_1d_plot</classname> &amp;</type><parameter name="x"><paramtype>double</paramtype></parameter><parameter name="y"><paramtype>double</paramtype></parameter><purpose>Set position of top left of legend box (svg coordinates, default pixels). (Bottom right is controlled by contents, so the user cannot set it). </purpose></method>
<method name="legend_top_left"><type>const std::pair&lt; double, double &gt;</type><description><para>
</para></description><returns><para>SVG coordinate (default pixels) of top left of legend box. </para></returns></method>
<method name="legend_width"><type><classname>svg_1d_plot</classname> &amp;</type><parameter name="width"><paramtype>double</paramtype></parameter><purpose>Set the width for the legend box. </purpose></method>
<method name="legend_width"><type>double</type><description><para>
</para></description><returns><para>Width for the legend box. </para></returns></method>
<method name="license"><type><classname>svg_1d_plot</classname> &amp;</type><parameter name="repro"><paramtype>std::string</paramtype><default>"permits"</default></parameter><parameter name="distrib"><paramtype>std::string</paramtype><default>"permits"</default></parameter><parameter name="attrib"><paramtype>std::string</paramtype><default>"requires"</default></parameter><parameter name="commercial"><paramtype>std::string</paramtype><default>"permits"</default></parameter><parameter name="derivative"><paramtype>std::string</paramtype><default>"permits"</default></parameter><description><para>Set license conditions for reproduction, attribution, commercial use, and derivative works, usually "permits", "requires", or "prohibits", and set license_on == true. </para></description></method>
<method name="license_attribution"><type>const std::string</type><description><para>
</para></description><returns><para>SVG document attribution license conditions, usually "permits", "requires", or "prohibits". </para></returns></method>
<method name="license_commercialuse"><type>const std::string</type><description><para>
</para></description><returns><para>SVG document commercial use license conditions, usually "permits", "requires", or "prohibits". </para></returns></method>
<method name="license_distribution"><type>const std::string</type><description><para>
</para></description><returns><para>SVG document distribution license conditions, usually "permits", "requires", or "prohibits". </para></returns></method>
<method name="license_on"><type><classname>svg_1d_plot</classname> &amp;</type><parameter name="l"><paramtype>bool</paramtype></parameter><purpose>Set if license conditions should be included in the SVG document. </purpose></method>
<method name="license_on"><type>bool</type><description><para>
</para></description><returns><para><computeroutput>true</computeroutput> if license conditions should be included in the SVG document. </para></returns></method>
<method name="license_reproduction"><type>const std::string</type><description><para>
</para></description><returns><para>SVG document reproduction license conditions, usually "permits", "requires", or "prohibits". </para></returns></method>
<method name="limit_color"><type><classname>svg_1d_plot</classname> &amp;</type><parameter name=""><paramtype>const <classname>svg_color</classname> &amp;</paramtype></parameter><purpose>Set the color for 'at limit' point stroke color. </purpose></method>
<method name="limit_color"><type><classname>svg_color</classname></type><description><para>
</para></description><returns><para>the color for the 'at limit' point stroke color. </para></returns></method>
<method name="limit_fill_color"><type><classname>svg_1d_plot</classname> &amp;</type><parameter name=""><paramtype>const <classname>svg_color</classname> &amp;</paramtype></parameter><purpose>Set the color for 'at limit' point fill color. </purpose></method>
<method name="limit_fill_color"><type><classname>svg_color</classname></type><description><para>
</para></description><returns><para>the color for the 'at limit' point fill color. </para></returns></method>
<method name="one_sd_color"><type><classname>svg_1d_plot</classname> &amp;</type><parameter name=""><paramtype>const <classname>svg_color</classname> &amp;</paramtype></parameter><purpose>Set the color for the one standard deviation (~67% confidence) ellipse fill. </purpose></method>
<method name="one_sd_color"><type><classname>svg_color</classname></type><description><para>
</para></description><returns><para>Color for the one standard deviation (~67% confidence) ellipse fill. </para></returns></method>
<method name="plot"><type><classname>svg_1d_plot_series</classname> &amp;</type><template>
          <template-type-parameter name="T"><purpose><para>Floating-point type of the data (<computeroutput>T</computeroutput> must be convertible to <computeroutput>double</computeroutput>).</para></purpose></template-type-parameter>
        </template><parameter name="container"><paramtype>const T &amp;</paramtype><description><para>Container (for example vector) for the data to be added to the plot. </para></description></parameter><parameter name="title"><paramtype>const std::string &amp;</paramtype><default>""</default><description><para>Optional title for the data series (default none).</para></description></parameter><purpose><emphasis role="bold">Example:</emphasis> </purpose><description><para>Add a data series to the plot (by default, converting to <computeroutput>unc</computeroutput> <computeroutput>doubles</computeroutput>), with optional title.</para><para>


<note><para>This version assumes that <emphasis role="bold">ALL</emphasis> the data values in the container are used.</para></note>
<programlisting language="c++">std::vector&lt;float&gt; my_data; // my container.
my_data.push_back(2.f); // Fill container with some data.
my_data.push_back(3.f);
my_data.push_back(4.f);
my_1d_plot.plot(my_data, "All data in my container"); // Plot all data in container.
</programlisting> </para></description><returns><para>Reference to data series just added (to make chainable).</para></returns></method>
<method name="plot"><type><classname>svg_1d_plot_series</classname> &amp;</type><template>
          <template-type-parameter name="T"><purpose><para>floating-point type of the data (T must be convertible to double). </para></purpose></template-type-parameter>
        </template><parameter name="begin"><paramtype>const T &amp;</paramtype><description><para>Iterator to 1st data item in container. </para></description></parameter><parameter name="end"><paramtype>const T &amp;</paramtype><description><para>Iterator to one-beyond-end of data in container. </para></description></parameter><parameter name="title"><paramtype>const std::string &amp;</paramtype><default>""</default><description><para>Optional title for the plot (default is no title). </para></description></parameter><description><para>Add a data series to the plot (by default, converting to unc doubles), with optional title. 


<note><para>This version permits a partial range of the container, from begin to end, to be used.</para></note>
<emphasis role="bold">Example:</emphasis> </para><para><programlisting language="c++">my_1d_plot.plot(my_data.begin(), my_data.end(), "My container"); // Whole container of data values.
my_1d_plot.plot(&amp;my_data[1], &amp;my_data[4], "my_data 1 to 4"); // Add part of data series
</programlisting></para><para><warning><para>last == end which is one past the last, so this only does 1, 2 &amp; 3 - <emphasis role="bold">not</emphasis> 4! </para></warning>
</para></description><returns><para>Reference to the data series just added. </para></returns></method>
<method name="plot"><type><classname>svg_1d_plot_series</classname> &amp;</type><template>
          <template-type-parameter name="T"><purpose><para>floating-point type of the data (which must be convertible to <computeroutput>double</computeroutput>). </para></purpose></template-type-parameter>
          <template-type-parameter name="U"><purpose><para>functor floating-point type (default is <computeroutput>double_1d_convert</computeroutput>).</para></purpose></template-type-parameter>
        </template><parameter name="container"><paramtype>const T &amp;</paramtype><description><para>Container for data (for example <computeroutput>std::vector</computeroutput>) that contains the data to be added to the plot. </para></description></parameter><parameter name="title"><paramtype>const std::string &amp;</paramtype><default>""</default><description><para>Optional title for the plot (default is no title). </para></description></parameter><parameter name="functor"><paramtype>U</paramtype><default><emphasis>unspecified</emphasis></default><description><para>Custom functor to convert data value to <computeroutput>double</computeroutput>.</para></description></parameter><description><para>Add a data series to the plot, with optional title.</para><para>


<note><para>This version of plot includes a functor, allowing other than just convert data values to <computeroutput>double</computeroutput> (the default). </para></note>
</para></description><returns><para>a reference to data series just added (to make chainable).</para></returns></method>
<method name="plot"><type><classname>svg_1d_plot_series</classname> &amp;</type><template>
          <template-type-parameter name="T"><purpose><para>Floating-point type of the data (which must be convertible to <computeroutput>double</computeroutput>). </para></purpose></template-type-parameter>
          <template-type-parameter name="U"><purpose><para>Functor floating-point type (default is <computeroutput>double_1d_convert</computeroutput>).</para></purpose></template-type-parameter>
        </template><parameter name="begin"><paramtype>const T &amp;</paramtype><description><para>Iterator to 1st data item in container. </para></description></parameter><parameter name="end"><paramtype>const T &amp;</paramtype><description><para>Iterator to one-beyond-end of data in container. </para></description></parameter><parameter name="title"><paramtype>const std::string &amp;</paramtype><default>""</default><description><para>Optional title for the plot (default is no title). </para></description></parameter><parameter name="functor"><paramtype>U</paramtype><default><emphasis>unspecified</emphasis></default><description><para>Custom functor. </para></description></parameter><description><para>Add a data series to the plot, with optional title. (Version with custom functor, rather than to <computeroutput>double</computeroutput>).</para><para>


<note><para>This version permits a <emphasis role="bold">partial</emphasis> range, within begin to end, of the container to be used. </para></note>
</para></description><returns><para>a reference to data series just added (to make chainable).</para></returns></method>
<method name="plot_background_color"><type><classname>svg_1d_plot</classname> &amp;</type><parameter name="col"><paramtype>const <classname>svg_color</classname> &amp;</paramtype></parameter><purpose>Set the fill color of the plot window background. </purpose></method>
<method name="plot_background_color"><type><classname>svg_color</classname></type><description><para>
</para></description><returns><para>the fill color of the plot window background. </para></returns></method>
<method name="plot_border_color"><type><classname>svg_1d_plot</classname> &amp;</type><parameter name="col"><paramtype>const <classname>svg_color</classname> &amp;</paramtype></parameter><purpose>Set the color for the plot window background. </purpose></method>
<method name="plot_border_color"><type><classname>svg_color</classname></type><description><para>
</para></description><returns><para>the color for the plot window background. </para></returns></method>
<method name="plot_border_width"><type><classname>svg_1d_plot</classname> &amp;</type><parameter name="w"><paramtype>double</paramtype></parameter><purpose>Set the margin around the plot window border (svg units, default pixels). </purpose><description><para>This prevents the plot window getting too close to other elements of the plot. </para></description></method>
<method name="plot_border_width"><type>double</type><description><para>
</para></description><returns><para>the width for the plot window border (svg units, default pixels). </para></returns></method>
<method name="plot_window_on"><type><classname>svg_1d_plot</classname> &amp;</type><parameter name="cmd"><paramtype>bool</paramtype></parameter><purpose>Set true if a plot window is wanted (or false if the whole image is to be used). </purpose></method>
<method name="plot_window_on"><type>bool</type><description><para>
</para></description><returns><para>true if a plot window is wanted (or false if the whole image is to be used). </para></returns></method>
<method name="plot_window_x"><type><classname>svg_1d_plot</classname> &amp;</type><parameter name="min_x"><paramtype>double</paramtype></parameter><parameter name="max_x"><paramtype>double</paramtype></parameter><purpose>Set the minimum and maximum (cartesian data units) for the plot window X axis. This is normally calculated from other plot values. </purpose></method>
<method name="plot_window_x"><type>std::pair&lt; double, double &gt;</type><description><para>
</para></description><returns><para>both the left and right (X axis) of the plot window. </para></returns></method>
<method name="plot_window_x_left"><type>double</type><description><para>
</para></description><returns><para>left of the plot window. </para></returns></method>
<method name="plot_window_x_right"><type>double</type><description><para>
</para></description><returns><para>right of the plot window. </para></returns></method>
<method name="plot_window_y"><type><classname>svg_1d_plot</classname> &amp;</type><parameter name="min_y"><paramtype>double</paramtype></parameter><parameter name="max_y"><paramtype>double</paramtype></parameter><purpose>Set the minimum and maximum (cartesian data units) for the plot window Y axis. This is normally calculated from other plot values. </purpose></method>
<method name="plot_window_y"><type>std::pair&lt; double, double &gt;</type><description><para>
</para></description><returns><para>both the top and bottom (Y axis) of the plot window. </para></returns></method>
<method name="plot_window_y_bottom"><type>double</type><description><para>
</para></description><returns><para>top of the plot window. </para></returns></method>
<method name="plot_window_y_top"><type>double</type><description><para>
</para></description><returns><para>top of the plot window. </para></returns></method>
<method name="size"><type><classname>svg_1d_plot</classname> &amp;</type><parameter name="x"><paramtype>unsigned int</paramtype></parameter><parameter name="y"><paramtype>unsigned int</paramtype></parameter><purpose>Set SVG image size (SVG units, default pixels). </purpose></method>
<method name="size"><type>std::pair&lt; double, double &gt;</type><description><para>
</para></description><returns><para>SVG image size, both horizontal width and vertical height (SVG units, default pixels). </para></returns></method>
<method name="three_sd_color"><type><classname>svg_1d_plot</classname> &amp;</type><parameter name=""><paramtype>const <classname>svg_color</classname> &amp;</paramtype></parameter><purpose>Set the color for three standard deviation (~99% confidence) ellipse fill. </purpose></method>
<method name="three_sd_color"><type><classname>svg_color</classname></type><description><para>
</para></description><returns><para>Color for three standard deviation (~99% confidence) ellipse fill. </para></returns></method>
<method name="title"><type><classname>svg_1d_plot</classname> &amp;</type><parameter name="title"><paramtype>const std::string</paramtype></parameter><description><para>Set a title for plot. The string may include Unicode for greek letter and symbols. <emphasis role="bold">example:</emphasis> A title that includes a greek omega and degree symbols: <programlisting language="c++">my_plot.title("Plot of &amp;#x3A9; function (&amp;#x00B0;C)");
</programlisting></para><para>Unicode symbols are at <ulink url="http://unicode.org/charts/symbols.html">http://unicode.org/charts/symbols.html</ulink>. </para></description></method>
<method name="title"><type>const std::string</type><description><para>
</para></description><returns><para>Title for plot (whose string may include Unicode for greek letter and symbols). </para></returns></method>
<method name="title_color"><type><classname>svg_1d_plot</classname> &amp;</type><parameter name="col"><paramtype>const <classname>svg_color</classname> &amp;</paramtype></parameter><purpose>Set the color of any title of the plot. </purpose></method>
<method name="title_color"><type><classname>svg_color</classname></type><description><para>
</para></description><returns><para>the color of any title of the plot. </para></returns></method>
<method name="title_font_alignment"><type><classname>svg_1d_plot</classname> &amp;</type><parameter name="alignment"><paramtype>align_style</paramtype></parameter><purpose>Set the alignment for the title. </purpose></method>
<method name="title_font_alignment"><type>align_style</type><description><para>
</para></description><returns><para>the alignment for the title. </para></returns></method>
<method name="title_font_decoration"><type><classname>svg_1d_plot</classname> &amp;</type><parameter name="decoration"><paramtype>const std::string &amp;</paramtype></parameter><purpose>Set the font decoration for the title (default normal, or underline, overline or strike-thru). </purpose></method>
<method name="title_font_decoration"><type>const std::string &amp;</type><description><para>
</para></description><returns><para>Font decoration for the title (default normal, or underline, overline or strike-thru). </para></returns></method>
<method name="title_font_family"><type><classname>svg_1d_plot</classname> &amp;</type><parameter name="family"><paramtype>const std::string &amp;</paramtype></parameter><purpose>Set the font family for the title (for example: .title_font_family("Lucida Sans Unicode");. </purpose></method>
<method name="title_font_family"><type>const std::string &amp;</type><description><para>
</para></description><returns><para>Font family for the title. </para></returns></method>
<method name="title_font_rotation"><type><classname>svg_1d_plot</classname> &amp;</type><parameter name="rotate"><paramtype>rotate_style</paramtype></parameter><purpose>Set the rotation for the title font (degrees, 0 to 360 in steps using rotate_style, for example horizontal, uphill... </purpose></method>
<method name="title_font_rotation"><type>int</type><description><para>
</para></description><returns><para>the rotation for the title font (degrees). </para></returns></method>
<method name="title_font_size"><type><classname>svg_1d_plot</classname> &amp;</type><parameter name="i"><paramtype>unsigned int</paramtype></parameter><purpose>Sets the font size for the title (SVG units, default pixels). </purpose></method>
<method name="title_font_size"><type>unsigned int</type><description><para>
</para></description><returns><para>Font size for the title (SVG units, default pixels). </para></returns></method>
<method name="title_font_stretch"><type><classname>svg_1d_plot</classname> &amp;</type><parameter name="stretch"><paramtype>const std::string &amp;</paramtype></parameter><purpose>Set the font stretch for the title (default normal), wider or narrow. </purpose></method>
<method name="title_font_stretch"><type>const std::string &amp;</type><description><para>
</para></description><returns><para>Font stretch for the title. </para></returns></method>
<method name="title_font_style"><type><classname>svg_1d_plot</classname> &amp;</type><parameter name="style"><paramtype>const std::string &amp;</paramtype></parameter><purpose>Set the font style for the title (default normal). </purpose></method>
<method name="title_font_style"><type>const std::string &amp;</type><description><para>
</para></description><returns><para>Font style for the title (default normal). </para></returns></method>
<method name="title_font_weight"><type><classname>svg_1d_plot</classname> &amp;</type><parameter name="weight"><paramtype>const std::string &amp;</paramtype></parameter><purpose>Set the font weight for the title (default normal). </purpose></method>
<method name="title_font_weight"><type>const std::string &amp;</type><description><para>
</para></description><returns><para>Font weight for the title. </para></returns></method>
<method name="title_on"><type><classname>svg_1d_plot</classname> &amp;</type><parameter name="cmd"><paramtype>bool</paramtype></parameter><purpose>If set true, show a title for the plot. Note: is set true by setting a title. </purpose></method>
<method name="title_on"><type>bool</type><description><para>
</para></description><returns><para>true if will show a title for the plot. </para></returns></method>
<method name="two_sd_color"><type><classname>svg_1d_plot</classname> &amp;</type><parameter name=""><paramtype>const <classname>svg_color</classname> &amp;</paramtype></parameter><purpose>Set the color for two standard deviation (~95% confidence) ellipse fill. </purpose></method>
<method name="two_sd_color"><type><classname>svg_color</classname></type><description><para>
</para></description><returns><para>Color for two standard deviation (~95% confidence) ellipse fill. </para></returns></method>
<method name="write"><type><classname>svg_1d_plot</classname> &amp;</type><parameter name="file"><paramtype>const std::string &amp;</paramtype><description><para>Filename to write. </para></description></parameter><description><para>Write SVG image to the specified file, providing the suffix <computeroutput/>.svg if no suffix given.</para><para><computeroutput>write()</computeroutput> has two versions: to an <computeroutput>ostream</computeroutput> and to a file. The stream version first clears all unnecessary data from the graph, builds the document tree, and then calls the <computeroutput>write</computeroutput> function for the root document node, which calls all other nodes through the Visitor pattern.</para><para>
<note><para>This file version opens an <computeroutput>ostream</computeroutput>, and calls the <computeroutput>ostream</computeroutput> version of write.</para></note>

</para></description><returns><para><computeroutput>*this</computeroutput> to make chainable. </para></returns></method>
<method name="write"><type><classname>svg_1d_plot</classname> &amp;</type><parameter name="s_out"><paramtype>std::ostream &amp;</paramtype><description><para><computeroutput>std::ostream</computeroutput> to write.</para></description></parameter><description><para>Write SVG image to the specified <computeroutput>std::ostream</computeroutput>. 
<note><para>This function also is used by the write to file function. </para></note>

The default stream precision of 6 decimal digits is probably excessive. 4.1 Basic data types, integer or float in decimal or scientific (using E format). If image size is under 1000 x 1000, the SVG plot default precision of 3 is probably sufficient. This reduces .svg file sizes significantly for curves represented with many data points. For example, if a curve is shown using 100 points, reducing to coord_precision(3) from default of 6 will reduce file size by 300 bytes.</para></description><returns><para><computeroutput>*this</computeroutput> to make chainable.</para></returns></method>
<method name="x_addlimits_color"><type><classname>svg_1d_plot</classname> &amp;</type><parameter name="col"><paramtype>const <classname>svg_color</classname> &amp;</paramtype></parameter><purpose>Set the color of X confidence limits of value, for example, the color in "&lt;1.23, 1.45&gt;". </purpose></method>
<method name="x_addlimits_color"><type><classname>svg_color</classname></type><description><para>
</para></description><returns><para>the color of X confidence limits of value, for example, the color of "&lt;1.23, 1.45&gt;)". </para></returns></method>
<method name="x_addlimits_on"><type><classname>svg_1d_plot</classname> &amp;</type><parameter name="b"><paramtype>bool</paramtype></parameter><purpose>Set if to append confidence limits to data point X values near data points markers. </purpose></method>
<method name="x_addlimits_on"><type>bool</type><description><para>
</para></description><returns><para>true if to append confidence limits estimate to data point X values near data points markers. </para></returns></method>
<method name="x_auto_max_value"><type>double</type><description><para>
</para></description><returns><para>X-axis maximum value computed by autoscale. </para></returns></method>
<method name="x_auto_min_value"><type>double</type><description><para>
</para></description><returns><para>X-axis minimum value computed by autoscale. </para></returns></method>
<method name="x_auto_tick_interval"><type>double</type><description><para>
</para></description><returns><para>the X-axis major tick interval computed by autoscale. </para></returns></method>
<method name="x_auto_ticks"><type>int</type><description><para>
</para></description><returns><para>the X-axis number of major ticks computed by autoscale. </para></returns></method>
<method name="x_autoscale"><type>bool</type><description><para>
</para></description><returns><para><computeroutput>true</computeroutput> if to use autoscale value for X-axis. </para></returns></method>
<method name="x_autoscale"><type><classname>svg_1d_plot</classname> &amp;</type><parameter name="b"><paramtype>bool</paramtype></parameter><purpose>Set <computeroutput>true</computeroutput> if to use autoscale values for X-axis. </purpose></method>
<method name="x_autoscale"><type><classname>svg_1d_plot</classname> &amp;</type><parameter name="p"><paramtype>std::pair&lt; double, double &gt;</paramtype></parameter><purpose>autoscale X axis using a pair of doubles. </purpose></method>
<method name="x_autoscale"><type><classname>svg_1d_plot</classname> &amp;</type><parameter name="container"><paramtype>const T &amp;</paramtype></parameter><purpose>&lt; </purpose><description><para>
</para></description></method>
<method name="x_autoscale"><type><classname>svg_1d_plot</classname> &amp;</type><parameter name="begin"><paramtype>const T &amp;</paramtype></parameter><parameter name="end"><paramtype>const T &amp;</paramtype></parameter><purpose>&lt; </purpose><description><para>
</para></description></method>
<method name="x_axis_color"><type><classname>svg_1d_plot</classname> &amp;</type><parameter name="col"><paramtype>const <classname>svg_color</classname> &amp;</paramtype></parameter><purpose>Set the color of the X-axis line. </purpose></method>
<method name="x_axis_color"><type><classname>svg_color</classname></type><description><para>
</para></description><returns><para>the color of the X-axis line. </para></returns></method>
<method name="x_axis_label_color"><type><classname>svg_1d_plot</classname> &amp;</type><parameter name="col"><paramtype>const <classname>svg_color</classname> &amp;</paramtype></parameter><purpose>Set X axis label color, for example, red. </purpose></method>
<method name="x_axis_label_color"><type><classname>svg_color</classname></type><description><para>
</para></description><returns><para>X axis label color. &lt;X-axis ticks values label style. </para></returns></method>
<method name="x_axis_on"><type><classname>svg_1d_plot</classname> &amp;</type><parameter name="is"><paramtype>bool</paramtype></parameter><purpose>If set true, draw a horizontal X-axis line. </purpose></method>
<method name="x_axis_on"><type>bool</type><description><para>
</para></description><returns><para>true if will draw a horizontal X-axis line. </para></returns></method>
<method name="x_axis_position"><type>const std::string</type><description><para>
</para></description><returns><para>the position (or intersection with Y-axis) of the X-axis. </para></returns></method>
<method name="x_axis_vertical"><type><classname>svg_1d_plot</classname> &amp;</type><parameter name="fraction"><paramtype>double</paramtype></parameter><purpose>Set vertical position of X-axis for 1D as fraction of plot window. </purpose></method>
<method name="x_axis_vertical"><type>bool</type><description><para>
</para></description><returns><para>vertical position of X-axis for 1D as fraction of plot window. </para></returns></method>
<method name="x_axis_width"><type><classname>svg_1d_plot</classname> &amp;</type><parameter name="width"><paramtype>double</paramtype></parameter><purpose>Set the width of X-axis lines. </purpose></method>
<method name="x_axis_width"><type>double</type><description><para>
</para></description><returns><para>the width of X-axis lines. </para></returns></method>
<method name="x_datetime_color"><type><classname>svg_1d_plot</classname> &amp;</type><parameter name="col"><paramtype>const <classname>svg_color</classname> &amp;</paramtype></parameter><purpose>Set the color of X date time , for example, the color of text in "". </purpose></method>
<method name="x_datetime_color"><type><classname>svg_color</classname></type><description><para>
</para></description><returns><para>the color of X date time, for example, the color of text in "". </para></returns></method>
<method name="x_datetime_on"><type><classname>svg_1d_plot</classname> &amp;</type><parameter name="b"><paramtype>bool</paramtype></parameter><purpose>Set true if to append date time to data point X values near data points markers. </purpose></method>
<method name="x_datetime_on"><type>bool</type><description><para>
</para></description><returns><para>true if to append an date time to data point X values near data points markers. </para></returns></method>
<method name="x_decor"><type><classname>svg_1d_plot</classname> &amp;</type><parameter name="pre"><paramtype>const std::string &amp;</paramtype></parameter><parameter name="sep"><paramtype>const std::string &amp;</paramtype><default>""</default></parameter><parameter name="suf"><paramtype>const std::string &amp;</paramtype><default>""</default></parameter><description><para>Set prefix, separator and suffix together for x_ values. Note if you want a space, you must use a Unicode space "&amp;#x00A0;", for example, ",&amp;#x00A0;" rather than ASCII space", ". If 1st char in separator == <sbr/>
, then Y values and info will be on a newline below. </para></description></method>
<method name="x_df_color"><type><classname>svg_1d_plot</classname> &amp;</type><parameter name="col"><paramtype>const <classname>svg_color</classname> &amp;</paramtype></parameter><purpose>Set the color of X degrees of freedom, for example, the color of 9 in "1.23 +-0.02 (9)". </purpose></method>
<method name="x_df_color"><type><classname>svg_color</classname></type><description><para>
</para></description><returns><para>the color of X degrees of freedom, for example, the color of 9 in "1.23 +-0.02 (9)". </para></returns></method>
<method name="x_df_on"><type><classname>svg_1d_plot</classname> &amp;</type><parameter name="b"><paramtype>bool</paramtype></parameter><purpose>Set true if to append a degrees of freedom estimate to data point X values near data points markers. </purpose></method>
<method name="x_df_on"><type>bool</type><description><para>
</para></description><returns><para>true if to append a degrees of freedom estimate to data point X values near data points markers. </para></returns></method>
<method name="x_id_color"><type><classname>svg_1d_plot</classname> &amp;</type><parameter name="col"><paramtype>const <classname>svg_color</classname> &amp;</paramtype></parameter><purpose>Set the color of X id or name, for example, the color of text in "my_id". </purpose></method>
<method name="x_id_color"><type><classname>svg_color</classname></type><description><para>
</para></description><returns><para>the color of X X id or name, for example, the color of text in "my_id". </para></returns></method>
<method name="x_id_on"><type><classname>svg_1d_plot</classname> &amp;</type><parameter name="b"><paramtype>bool</paramtype></parameter><purpose>Set true if to append append an ID or name to data point X values near data points markers. </purpose></method>
<method name="x_id_on"><type>bool</type><description><para>
</para></description><returns><para>true if to append an ID or name to data point X values near data points markers. </para></returns></method>
<method name="x_label"><type><classname>svg_1d_plot</classname> &amp;</type><parameter name="str"><paramtype>const std::string &amp;</paramtype></parameter><purpose>Set the text to label the X-axis (and set x_label_on(true)). </purpose></method>
<method name="x_label"><type>std::string</type><description><para>
</para></description><returns><para>the text to label the X-axis. </para></returns></method>
<method name="x_label_color"><type><classname>svg_1d_plot</classname> &amp;</type><parameter name="col"><paramtype>const <classname>svg_color</classname> &amp;</paramtype></parameter><description><para>
</para></description><returns><para>the color of the Y-axis line. </para></returns></method>
<method name="x_label_color"><type><classname>svg_color</classname></type><description><para>
</para></description><returns><para>the color of X-axis label (including any units). </para></returns></method>
<method name="x_label_font_family"><type><classname>svg_1d_plot</classname> &amp;</type><parameter name="family"><paramtype>const std::string &amp;</paramtype></parameter><description><para>Set X tick value label font family. Available fonts depend on the program rendering the SVG XML, usually a browser. The default font (usually "default_font") is used if a render program does not provide the font specified. These are probably usable: <programlisting language="c++">"arial", "impact", "courier", "lucida console",  "Lucida sans unicode", "verdana", "calibri", "century",
"lucida calligraphy", "tahoma", "vivaldi", "informal roman", "lucida handwriting", "lucida bright", "helvetica"
</programlisting> </para></description></method>
<method name="x_label_font_family"><type>const std::string &amp;</type><description><para>
</para></description><returns><para>X tick value label font family. </para></returns></method>
<method name="x_label_font_size"><type><classname>svg_1d_plot</classname> &amp;</type><parameter name="i"><paramtype>unsigned int</paramtype></parameter><purpose>Set X axis label font size (svg units, default pixels). </purpose></method>
<method name="x_label_font_size"><type>unsigned int</type><description><para>
</para></description><returns><para>X axis label font size (svg units, default pixels). </para></returns></method>
<method name="x_label_on"><type><classname>svg_1d_plot</classname> &amp;</type><parameter name="cmd"><paramtype>bool</paramtype></parameter><description><para>
</para></description><returns><para>true if X major ticks should mark downwards. </para></returns></method>
<method name="x_label_on"><type>bool</type><description><para>Set true if want to show X-axis label text. Also switched on by setting label text. (on the assumption that if label text is set, display is also wanted, but can be switched off if <emphasis role="bold">not</emphasis> required). </para></description></method>
<method name="x_label_units"><type><classname>svg_1d_plot</classname> &amp;</type><parameter name="str"><paramtype>const std::string &amp;</paramtype></parameter><purpose>Set the text to add units to the X-axis label. </purpose></method>
<method name="x_label_units"><type>std::string</type><description><para>
</para></description><returns><para>the text to add units to the X-axis label. &lt;The label will only be shown if x_label_on() == true. </para></returns></method>
<method name="x_label_units_on"><type><classname>svg_1d_plot</classname> &amp;</type><parameter name="cmd"><paramtype>bool</paramtype></parameter><purpose>Set true if want X axis label to include units (as well as label like "length"). &lt;. </purpose><description><para><para><emphasis role="bold">See Also:</emphasis><para>x_label_units which also sets true. </para></para>
</para></description></method>
<method name="x_label_units_on"><type>bool</type><purpose>Set true if want X axis label to include units (as well as label like "length"). </purpose></method>
<method name="x_label_width"><type><classname>svg_1d_plot</classname> &amp;</type><parameter name="width"><paramtype>double</paramtype></parameter><purpose>Set the width (boldness) of X-axis label (including any units). (not recommended until browsers implement better). </purpose></method>
<method name="x_label_width"><type>double</type><description><para>
</para></description><returns><para>the width (boldness) of X-axis label (including any units). </para></returns></method>
<method name="x_labels_strip_e0s"><type><classname>svg_1d_plot</classname> &amp;</type><parameter name="cmd"><paramtype>bool</paramtype></parameter><purpose>Set if to strip redundant zeros, signs and exponents, for example, reducing "1.2e+000" to "1.2" This markedly reduces visual clutter, and is the default. </purpose></method>
<method name="x_major_grid_color"><type><classname>svg_1d_plot</classname> &amp;</type><parameter name="col"><paramtype>const <classname>svg_color</classname> &amp;</paramtype></parameter><purpose>Set the color of X-axis major grid lines. </purpose></method>
<method name="x_major_grid_color"><type><classname>svg_color</classname></type><purpose>Set the color of X-axis major grid lines. </purpose></method>
<method name="x_major_grid_on"><type><classname>svg_1d_plot</classname> &amp;</type><parameter name="is"><paramtype>bool</paramtype></parameter><purpose>If set true, will include a major X-axis grid. </purpose></method>
<method name="x_major_grid_on"><type>bool</type><description><para>
</para></description><returns><para>true if will include a major X-axis grid. </para></returns></method>
<method name="x_major_grid_width"><type><classname>svg_1d_plot</classname> &amp;</type><parameter name="w"><paramtype>double</paramtype></parameter><purpose>Set the width of X-axis major grid lines. </purpose></method>
<method name="x_major_grid_width"><type>double</type><description><para>
</para></description><returns><para>the color of X-axis major grid lines. </para></returns></method>
<method name="x_major_interval"><type><classname>svg_1d_plot</classname> &amp;</type><parameter name="inter"><paramtype>double</paramtype></parameter><purpose>Set the interval between X-axis major ticks. </purpose></method>
<method name="x_major_interval"><type>double</type><description><para>
</para></description><returns><para>the interval between X-axis major ticks. </para></returns></method>
<method name="x_major_label_rotation"><type><classname>svg_1d_plot</classname> &amp;</type><parameter name="rot"><paramtype>rotate_style</paramtype></parameter><description><para>Set rotation for X ticks major value labels. (Default horizontal). <para><emphasis role="bold">See Also:</emphasis><para>rotate_style </para></para>
</para></description></method>
<method name="x_major_label_rotation"><type>rotate_style</type><description><para>
<para><emphasis role="bold">See Also:</emphasis><para>rotate_style </para></para>
</para></description><returns><para>rotation for X ticks major value labels. </para></returns></method>
<method name="x_major_labels_side"><type><classname>svg_1d_plot</classname> &amp;</type><parameter name="side"><paramtype>int</paramtype><description><para>&gt; 0 X tick value labels to left of Y axis line (default), 0 (false) no major X tick value labels on Y axis, 0 X tick labels to right of Y axis line. </para></description></parameter><description><para>Position of labels for X major ticks on horizontal X axis line. 
</para></description></method>
<method name="x_major_labels_side"><type>int</type><description><para>
</para></description><returns><para>the side for X ticks major value labels. </para></returns></method>
<method name="x_major_tick"><type><classname>svg_1d_plot</classname> &amp;</type><parameter name="d"><paramtype>double</paramtype></parameter><purpose>Set interval (Cartesian units) between major ticks. </purpose></method>
<method name="x_major_tick"><type>double</type><description><para>
</para></description><returns><para>interval (Cartesian units) between major ticks. </para></returns></method>
<method name="x_major_tick_color"><type><classname>svg_1d_plot</classname> &amp;</type><parameter name="col"><paramtype>const <classname>svg_color</classname> &amp;</paramtype></parameter><purpose>Set the color of X-axis major ticks. </purpose></method>
<method name="x_major_tick_color"><type><classname>svg_color</classname></type><description><para>
</para></description><returns><para>the color of X-axis major ticks. </para></returns></method>
<method name="x_major_tick_length"><type><classname>svg_1d_plot</classname> &amp;</type><parameter name="length"><paramtype>double</paramtype></parameter><purpose>Set length of X major ticks (SVG units, default pixels). </purpose></method>
<method name="x_major_tick_length"><type>double</type><purpose>Set length of X major ticks (SVG units, default pixels). </purpose></method>
<method name="x_major_tick_width"><type><classname>svg_1d_plot</classname> &amp;</type><parameter name="width"><paramtype>double</paramtype></parameter><purpose>Set width of X major ticks (SVG units, default pixels). </purpose></method>
<method name="x_major_tick_width"><type>double</type><purpose>Set width of X major ticks (SVG units, default pixels). </purpose></method>
<method name="x_max"><type><classname>svg_1d_plot</classname> &amp;</type><parameter name="x"><paramtype>double</paramtype></parameter><purpose>Set the maximum value on the X-axis. </purpose></method>
<method name="x_max"><type>double</type><purpose>autoscale set &amp; get parameters, &lt;Note: all these <emphasis>MUST</emphasis> preceed x_autoscale(data) call. </purpose><description><para>
</para></description><returns><para>the maximum value on the X-axis. </para></returns></method>
<method name="x_min"><type><classname>svg_1d_plot</classname> &amp;</type><parameter name="min_x"><paramtype>double</paramtype></parameter><purpose>Set the minimum value on the X-axis. </purpose></method>
<method name="x_min"><type>double</type><description><para>
</para></description><returns><para>the minimum value on the X-axis. </para></returns></method>
<method name="x_min_ticks"><type><classname>svg_1d_plot</classname> &amp;</type><parameter name="min_ticks"><paramtype>int</paramtype></parameter><purpose>Set X-axis autoscale to include at least minimum number of ticks (default = 6). </purpose></method>
<method name="x_min_ticks"><type>int</type><description><para>
</para></description><returns><para>X-axis autoscale minimum number of ticks. </para></returns></method>
<method name="x_minor_grid_color"><type><classname>svg_1d_plot</classname> &amp;</type><parameter name="col"><paramtype>const <classname>svg_color</classname> &amp;</paramtype></parameter><purpose>Set the color of X-axis minor grid lines. </purpose></method>
<method name="x_minor_grid_color"><type><classname>svg_color</classname></type><description><para>
</para></description><returns><para>the color of X-axis minor grid lines. </para></returns></method>
<method name="x_minor_grid_on"><type><classname>svg_1d_plot</classname> &amp;</type><parameter name="is"><paramtype>bool</paramtype></parameter><purpose>If set true, will include a minor X-axis grid. </purpose></method>
<method name="x_minor_grid_on"><type>bool</type><description><para>
</para></description><returns><para>true if will include a major X-axis grid. </para></returns></method>
<method name="x_minor_grid_width"><type><classname>svg_1d_plot</classname> &amp;</type><parameter name="w"><paramtype>double</paramtype></parameter><purpose>Set the width of X-axis minor grid lines. </purpose></method>
<method name="x_minor_grid_width"><type>double</type><description><para>
</para></description><returns><para>the width of X-axis minor grid lines. </para></returns></method>
<method name="x_minor_interval"><type>double</type><description><para>
</para></description><returns><para>interval between X minor ticks. </para></returns></method>
<method name="x_minor_interval"><type><classname>svg_1d_plot</classname> &amp;</type><parameter name="interval"><paramtype>double</paramtype></parameter><purpose>Set interval between X-axis minor ticks. </purpose></method>
<method name="x_minor_tick_color"><type><classname>svg_1d_plot</classname> &amp;</type><parameter name="col"><paramtype>const <classname>svg_color</classname> &amp;</paramtype></parameter><purpose>Set the color of X-axis minor ticks. </purpose></method>
<method name="x_minor_tick_color"><type><classname>svg_color</classname></type><description><para>
</para></description><returns><para>the color of X-axis minor ticks. </para></returns></method>
<method name="x_minor_tick_length"><type><classname>svg_1d_plot</classname> &amp;</type><parameter name="length"><paramtype>double</paramtype></parameter><purpose>Set length of X minor ticks (SVG units, default pixels). </purpose></method>
<method name="x_minor_tick_length"><type>double</type><description><para>
</para></description><returns><para>length of X minor ticks (SVG units, default pixels). </para></returns></method>
<method name="x_minor_tick_width"><type><classname>svg_1d_plot</classname> &amp;</type><parameter name="width"><paramtype>double</paramtype></parameter><purpose>Set width of X minor ticks (SVG units, default pixels). </purpose></method>
<method name="x_minor_tick_width"><type>double</type><description><para>
</para></description><returns><para>width of X minor ticks (SVG units, default pixels). </para></returns></method>
<method name="x_num_minor_ticks"><type><classname>svg_1d_plot</classname> &amp;</type><parameter name="num"><paramtype>unsigned int</paramtype></parameter><purpose>Set number of X-axis minor ticks between major ticks. </purpose></method>
<method name="x_num_minor_ticks"><type>unsigned int</type><description><para>
</para></description><returns><para>number of X-axis minor ticks between major ticks. </para></returns></method>
<method name="x_order_color"><type><classname>svg_1d_plot</classname> &amp;</type><parameter name="col"><paramtype>const <classname>svg_color</classname> &amp;</paramtype></parameter><purpose>Set the color of X order #, for example, the color of #42. </purpose></method>
<method name="x_order_color"><type><classname>svg_color</classname></type><description><para>
</para></description><returns><para>the color of X order #, for example, the color of #42. </para></returns></method>
<method name="x_order_on"><type><classname>svg_1d_plot</classname> &amp;</type><parameter name="b"><paramtype>bool</paramtype></parameter><purpose>Set true if to append append an order # to data point X values near data points markers. </purpose></method>
<method name="x_order_on"><type>bool</type><description><para>
</para></description><returns><para>true if to append an order # to data point X values near data points markers. </para></returns></method>
<method name="x_plusminus_color"><type><classname>svg_1d_plot</classname> &amp;</type><parameter name="col"><paramtype>const <classname>svg_color</classname> &amp;</paramtype></parameter><purpose>Set the color of X std_dev of value, for example, the color of 0.02 in "1.23 +-0.02 (9)". </purpose></method>
<method name="x_plusminus_color"><type><classname>svg_color</classname></type><description><para>
</para></description><returns><para>the color of X std_dev of value, for example, the color of 0.02 in "1.23 +-0.02 (9)". </para></returns></method>
<method name="x_plusminus_on"><type><classname>svg_1d_plot</classname> &amp;</type><parameter name="b"><paramtype>bool</paramtype></parameter><purpose>Set if to append std_dev estimate to data point X values near data points markers. </purpose></method>
<method name="x_plusminus_on"><type>bool</type><description><para>
</para></description><returns><para>true if to append std_dev estimate to data point X values near data points markers. </para></returns></method>
<method name="x_prefix"><type>const std::string</type><description><para>
</para></description><returns><para>the prefix. </para></returns></method>
<method name="x_range"><type><classname>svg_1d_plot</classname> &amp;</type><parameter name="min_x"><paramtype>double</paramtype></parameter><parameter name="max_x"><paramtype>double</paramtype></parameter><description><para>Set the range of values on the X-axis. The minimum and maximum values must be finite and not too near to the minima or maxima that can be represented by floating point double, std::numeric_limits&lt;double&gt;::min() or std::numeric_limits&lt;double&gt;::max(), and the range must not be too small. </para></description></method>
<method name="x_range"><type>std::pair&lt; double, double &gt;</type><description><para>
</para></description><returns><para>the range of values on the X-axis. </para></returns></method>
<method name="x_separator"><type>const std::string</type><description><para>
</para></description><returns><para>the separator, perhaps including Unicode. </para></returns></method>
<method name="x_size"><type><classname>svg_1d_plot</classname> &amp;</type><parameter name="i"><paramtype>unsigned int</paramtype></parameter><purpose>Set SVG image X-axis size (SVG units, default pixels). </purpose></method>
<method name="x_size"><type>unsigned int</type><description><para>
</para></description><returns><para>SVG image X-axis size as horizontal width (SVG units, default pixels). </para></returns></method>
<method name="x_steps"><type><classname>svg_1d_plot</classname> &amp;</type><parameter name="steps"><paramtype>int</paramtype></parameter><description><para>Set autoscale to set ticks in steps multiples of:<sbr/>
2,4,6,8,10, if 2<sbr/>
or 1,5,10 if 5<sbr/>
or 2,5,10 if 10.<sbr/>
default = 0 (none). <note><para>: Must <emphasis role="bold">preceed</emphasis> x_autoscale(data) call). </para></note>
</para></description></method>
<method name="x_steps"><type>int</type><description><para>
</para></description><returns><para>autoscale to set ticks in steps. </para></returns></method>
<method name="x_suffix"><type>const std::string</type><description><para>
</para></description><returns><para>the suffix (only used if separator != "") </para></returns></method>
<method name="x_ticks_down_on"><type><classname>svg_1d_plot</classname> &amp;</type><parameter name="cmd"><paramtype>bool</paramtype></parameter><purpose>Set true if Y major ticks should mark upwards. </purpose></method>
<method name="x_ticks_down_on"><type>bool</type><description><para>
</para></description><returns><para>true if Y major ticks should mark upwards. </para></returns></method>
<method name="x_ticks_on_window_or_axis"><type><classname>svg_1d_plot</classname> &amp;</type><parameter name="side"><paramtype>int</paramtype><description><para>-1 X ticks on bottom of plot window, 0 X ticks on X-axis horizontal line, +1 X ticks top of plot window. </para></description></parameter><description><para>Set position of X ticks on window or axis. 
</para></description></method>
<method name="x_ticks_on_window_or_axis"><type>int</type><description><para>
</para></description><returns><para>true if X axis ticks wanted on the window (rather than on axis).<sbr/>
&lt;-1 bottom of plot window, 0 on horiztonal X axis , +1 top of plot window. </para></returns></method>
<method name="x_ticks_up_on"><type><classname>svg_1d_plot</classname> &amp;</type><parameter name="cmd"><paramtype>bool</paramtype></parameter><purpose>Set true if X major ticks should mark upwards. </purpose></method>
<method name="x_ticks_up_on"><type>bool</type><description><para>
</para></description><returns><para>true if X major ticks should mark upwards. </para></returns></method>
<method name="x_ticks_values_color"><type><classname>svg_1d_plot</classname> &amp;</type><parameter name="col"><paramtype>const <classname>svg_color</classname> &amp;</paramtype></parameter><purpose>Set X axis tick value label color. </purpose></method>
<method name="x_ticks_values_color"><type><classname>svg_color</classname></type><description><para>
</para></description><returns><para>X-axis ticks value label color. </para></returns></method>
<method name="x_ticks_values_font_family"><type><classname>svg_1d_plot</classname> &amp;</type><parameter name="family"><paramtype>const std::string &amp;</paramtype></parameter><description><para>Set X ticks value label font family. Available fonts depend on the program rendering the SVG XML, usually a browser. The default font (usually "default_font") is used if a render program does not provide the font specified. These are probably usable: <programlisting language="c++">"arial", "impact", "courier", "lucida console",  "Lucida sans unicode", "verdana", "calibri", "century",
"lucida calligraphy", "tahoma", "vivaldi", "informal roman", "lucida handwriting", "lucida bright", "helvetica"
</programlisting> </para></description></method>
<method name="x_ticks_values_font_family"><type>const std::string &amp;</type><description><para>
</para></description><returns><para>X ticks value label font family. </para></returns></method>
<method name="x_ticks_values_font_size"><type><classname>svg_1d_plot</classname> &amp;</type><parameter name="i"><paramtype>unsigned int</paramtype></parameter><purpose>Set X ticks value label font size (svg units, default pixels). </purpose></method>
<method name="x_ticks_values_font_size"><type>unsigned int</type><purpose>Set X ticks value label font size (svg units, default pixels). </purpose></method>
<method name="x_ticks_values_ioflags"><type><classname>svg_1d_plot</classname> &amp;</type><parameter name="f"><paramtype>std::ios_base::fmtflags</paramtype></parameter><purpose>Set iostream format flags of data point X values near data points markers. </purpose></method>
<method name="x_ticks_values_ioflags"><type>std::ios_base::fmtflags</type><description><para>
</para></description><returns><para>iostream format flags of data point X values near data points markers. </para></returns></method>
<method name="x_ticks_values_precision"><type><classname>svg_1d_plot</classname> &amp;</type><parameter name="p"><paramtype>int</paramtype></parameter><purpose>Set iostream decimal digits precision of data point X values near data points markers. </purpose></method>
<method name="x_ticks_values_precision"><type>int</type><description><para>
</para></description><returns><para>iostream decimal digits precision of data point X values near data points markers. </para></returns></method>
<method name="x_tight"><type><classname>svg_1d_plot</classname> &amp;</type><parameter name="tight"><paramtype>double</paramtype></parameter><purpose>Set tolerance to autoscale to permit data points slightly outside both end ticks. </purpose></method>
<method name="x_tight"><type>double</type><description><para>
</para></description><returns><para>tolerance given to autoscale to permit data points slightly outside both end ticks. &lt;Get results of autoscaling. </para></returns></method>
<method name="x_value_font_size"><type><classname>svg_1d_plot</classname> &amp;</type><parameter name="i"><paramtype>unsigned int</paramtype></parameter><purpose>Set X tick value label font size (svg units, default pixels). </purpose></method>
<method name="x_value_font_size"><type>unsigned int</type><description><para>
</para></description><returns><para>X tick value label font size (svg units, default pixels). </para></returns></method>
<method name="x_value_ioflags"><type><classname>svg_1d_plot</classname> &amp;</type><parameter name="flags"><paramtype>std::ios_base::fmtflags</paramtype></parameter><description><para>Set iostream std::ios::fmtflags for X value label (default decimal == 0X201). Mainly useful for changing to scientific, fixed or hexadecimal format. For example: <programlisting language="c++">myplot.x_value_ioflags(std::ios::dec | std::ios::scientific)
</programlisting> </para></description></method>
<method name="x_value_ioflags"><type>std::ios_base::fmtflags</type><description><para>
</para></description><returns><para>stream std::ios::fmtflags for control of format of X value labels. </para></returns></method>
<method name="x_value_precision"><type><classname>svg_1d_plot</classname> &amp;</type><parameter name="digits"><paramtype>int</paramtype></parameter><description><para>Set precision of X-tick label values in decimal digits (default 3). 3 decimal digits precision is sufficient for small images. 4 or 5 decimal digits precision will give more cluttered plots. If the range of labels is very small, then more digits will be essential. </para></description></method>
<method name="x_value_precision"><type>int</type><description><para>
</para></description><returns><para>Precision of X-tick label values in decimal digits </para></returns></method>
<method name="x_values_color"><type><classname>svg_1d_plot</classname> &amp;</type><parameter name="col"><paramtype>const <classname>svg_color</classname> &amp;</paramtype></parameter><purpose>Set the color of data point X values near data points markers. </purpose></method>
<method name="x_values_color"><type><classname>svg_color</classname></type><description><para>
</para></description><returns><para>the color of data point X values near data points markers. </para></returns></method>
<method name="x_values_font_family"><type><classname>svg_1d_plot</classname> &amp;</type><parameter name="family"><paramtype>const std::string &amp;</paramtype></parameter><purpose>Set font family of data point X values near data points markers. </purpose></method>
<method name="x_values_font_family"><type>const std::string &amp;</type><description><para>
</para></description><returns><para>font family of data point X values near data points markers. </para></returns></method>
<method name="x_values_font_size"><type><classname>svg_1d_plot</classname> &amp;</type><parameter name="i"><paramtype>unsigned int</paramtype></parameter><purpose>Set font size of data point X values near data points markers. </purpose></method>
<method name="x_values_font_size"><type>unsigned int</type><description><para>
</para></description><returns><para>font size of data point X values near data points markers. </para></returns></method>
<method name="x_values_ioflags"><type><classname>svg_1d_plot</classname> &amp;</type><parameter name="f"><paramtype>std::ios_base::fmtflags</paramtype></parameter><purpose>Set iostream format flags of data point X values near data points markers. </purpose></method>
<method name="x_values_ioflags"><type>std::ios_base::fmtflags</type><description><para>
</para></description><returns><para>iostream format flags of data point X values near data points markers. </para></returns></method>
<method name="x_values_on"><type><classname>svg_1d_plot</classname> &amp;</type><parameter name="b"><paramtype>bool</paramtype></parameter><purpose>Set true to show data point values near data points markers. </purpose></method>
<method name="x_values_on"><type>bool</type><description><para>
</para></description><returns><para>true if to show data point values near data points markers. </para></returns></method>
<method name="x_values_precision"><type><classname>svg_1d_plot</classname> &amp;</type><parameter name="p"><paramtype>int</paramtype></parameter><purpose>Set iostream decimal digits precision of data point X values near data points markers. </purpose></method>
<method name="x_values_precision"><type>int</type><description><para>
</para></description><returns><para>iostream decimal digits precision of data point X values near data points markers. </para></returns></method>
<method name="x_values_rotation"><type><classname>svg_1d_plot</classname> &amp;</type><parameter name="rotate"><paramtype>rotate_style</paramtype></parameter><description><para>
</para></description><returns><para>the rotation (rotate_style) of data point X values near data points markers. </para></returns></method>
<method name="x_values_rotation"><type>int</type><purpose>Set the rotation (rotate_style) of data point X values near data points markers. </purpose></method>
<method name="x_with_zero"><type><classname>svg_1d_plot</classname> &amp;</type><parameter name="b"><paramtype>bool</paramtype></parameter><purpose>Set X-axis autoscale to include zero (default = false). </purpose></method>
<method name="x_with_zero"><type>bool</type><description><para>
</para></description><returns><para>true if X-axis autoscale to include zero (default = false). </para></returns></method>
<method name="y_axis_color"><type><classname>svg_1d_plot</classname> &amp;</type><parameter name="col"><paramtype>const <classname>svg_color</classname> &amp;</paramtype></parameter><purpose>Set the color of the Y-axis line. </purpose></method>
<method name="y_axis_color"><type><classname>svg_color</classname></type><description><para>
</para></description><returns><para>the color of the Y-axis line. </para></returns></method>
<method name="y_axis_on"><type><classname>svg_1d_plot</classname> &amp;</type><parameter name="is"><paramtype>bool</paramtype></parameter><purpose>If set true, draw a vertical Y-axis line. </purpose></method>
<method name="y_axis_on"><type>bool</type><description><para>
</para></description><returns><para>true if will draw a horizontal X-axis line. </para></returns></method>
<method name="y_label"><type><classname>svg_1d_plot</classname> &amp;</type><parameter name="str"><paramtype>const std::string &amp;</paramtype></parameter><purpose>Set the text for the Y-axis label (and set y_label_on(true)). </purpose></method>
<method name="y_label"><type>std::string</type><description><para>
</para></description><returns><para>the text for the Y-axis label. &lt; The label will only be shown if y_label_on() == true. </para></returns></method>
<method name="y_label_color"><type><classname>svg_1d_plot</classname> &amp;</type><parameter name="col"><paramtype>const <classname>svg_color</classname> &amp;</paramtype></parameter><purpose>Set the color of Y-axis label (including any units). </purpose></method>
<method name="y_label_color"><type><classname>svg_color</classname></type><description><para>
</para></description><returns><para>the color of Y-axis label (including any units). </para></returns></method>
<method name="y_label_units"><type><classname>svg_1d_plot</classname> &amp;</type><parameter name="str"><paramtype>const std::string &amp;</paramtype></parameter><purpose>Set the text to add units to the Y-axis label. </purpose></method>
<method name="y_label_units"><type>std::string</type><description><para>
</para></description><returns><para>the text to add units to the X-axis label. </para></returns></method>
<method name="y_labels_strip_e0s"><type>bool</type><description><para>
</para></description><returns><para>if to strip redundant zeros, signs and exponents, for example, reducing "1.2e+000" to "1.2" </para></returns></method>
<method name="y_minor_interval"><type>double</type><description><para>
</para></description><returns><para>interval between Y minor ticks. </para></returns></method>
<method name="y_size"><type>unsigned int</type><description><para>
</para></description><returns><para>SVG image Y-axis size as vertical height (SVG units, default pixels). </para></returns></method>
<method name="y_size"><type><classname>svg_1d_plot</classname> &amp;</type><parameter name="i"><paramtype>unsigned int</paramtype></parameter><purpose>Set SVG image Y-axis size (SVG units, default pixels). </purpose></method>
</method-group>
</class><class name="svg_1d_plot_series"><purpose>Holds a series of data values (points) to be plotted. </purpose><description><para>Scan each data point sorting them into the appropriate <computeroutput>std::vectors</computeroutput>, normal or not (NaN or infinite).<sbr/>
Member functions allow control of data points markers and lines joining them, and their appearance, shape, color and size.<sbr/>
Data points can include their value, and optionally uncertainty and number of degrees of freedom.<sbr/>
 Each data series can have a title that can be shown on a legend box with identifying symbols. </para></description><method-group name="public member functions">
<method name="bezier_on"><type><classname>svg_1d_plot_series</classname> &amp;</type><parameter name="on_"><paramtype>bool</paramtype></parameter><description><para>Set <computeroutput>true</computeroutput> if to draw bezier curved line joining plot points.</para><para>
</para></description><returns><para>Reference to <computeroutput><classname alt="boost::svg::svg_1d_plot_series">svg_1d_plot_series</classname></computeroutput> to make chainable. </para></returns></method>
<method name="bezier_on"><type>bool</type><description><para>
</para></description><returns><para><computeroutput>true</computeroutput> if to draw bezier curved line joining plot points. </para></returns></method>
<method name="fill_color"><type><classname>svg_1d_plot_series</classname> &amp;</type><parameter name="col_"><paramtype>const <classname>svg_color</classname> &amp;</paramtype></parameter><description><para>Set fill color for plot point marker(s).</para><para>
</para></description><returns><para>Reference to <computeroutput><classname alt="boost::svg::svg_1d_plot_series">svg_1d_plot_series</classname></computeroutput> to make chainable. </para></returns></method>
<method name="fill_color"><type><classname>svg_color</classname></type><description><para>Get fill color for plot point marker(s).</para><para>
</para></description><returns><para>Fill color for plot point marker(s). </para></returns></method>
<method name="limit_point_color"><type><classname>svg_1d_plot_series</classname> &amp;</type><parameter name="col_"><paramtype>const <classname>svg_color</classname> &amp;</paramtype></parameter><description><para>Set of stroke color of 'at limits' points.</para><para>
</para></description><returns><para>Reference to <computeroutput><classname alt="boost::svg::svg_1d_plot_series">svg_1d_plot_series</classname></computeroutput> to make chainable. </para></returns></method>
<method name="line_color"><type><classname>svg_1d_plot_series</classname> &amp;</type><parameter name="col_"><paramtype>const <classname>svg_color</classname> &amp;</paramtype></parameter><description><para>Set color of any line joining plot points.</para><para>
</para></description><returns><para>Reference to <computeroutput><classname alt="boost::svg::svg_1d_plot_series">svg_1d_plot_series</classname></computeroutput> to make chainable. </para></returns></method>
<method name="line_on"><type><classname>svg_1d_plot_series</classname> &amp;</type><parameter name="on_"><paramtype>bool</paramtype></parameter><description><para>Set <computeroutput>true</computeroutput> if to draw a line joining plot points. 
</para></description><returns><para>Reference to <computeroutput><classname alt="boost::svg::svg_1d_plot_series">svg_1d_plot_series</classname></computeroutput> to make chainable.</para></returns></method>
<method name="line_on"><type>bool</type><description><para>
</para></description><returns><para><computeroutput>true</computeroutput> if to draw a line joining plot points. </para></returns></method>
<method name="line_width"><type><classname>svg_1d_plot_series</classname> &amp;</type><parameter name="wid_"><paramtype>double</paramtype></parameter><description><para>Set width of any line joining plot points. 
</para></description><returns><para>Reference to <computeroutput><classname alt="boost::svg::svg_1d_plot_series">svg_1d_plot_series</classname></computeroutput> to make chainable.</para></returns></method>
<method name="line_width"><type>double</type><description><para>
</para></description><returns><para>Width of any line joining plot points. </para></returns></method>
<method name="series_count"><type>size_t</type><description><para>
</para></description><returns><para>Number of normal 'OK to plot' data values in data series. </para></returns></method>
<method name="series_limits_count"><type>size_t</type><description><para>
</para></description><returns><para>Number of 'at limit' values: too big, too small or NaN data values in data series. </para></returns></method>
<method name="shape"><type><classname>svg_1d_plot_series</classname> &amp;</type><parameter name="shape_"><paramtype>point_shape</paramtype></parameter><description><para>Set shape for plot point marker(s).</para><para>
</para></description><returns><para>Reference to <computeroutput><classname alt="boost::svg::svg_1d_plot_series">svg_1d_plot_series</classname></computeroutput> to make chainable. </para></returns></method>
<method name="shape"><type>point_shape</type><description><para>Get shape for plot point marker(s).</para><para>
</para></description><returns><para>Shape for plot point marker(s). </para></returns></method>
<method name="size"><type><classname>svg_1d_plot_series</classname> &amp;</type><parameter name="size_"><paramtype>int</paramtype></parameter><description><para>Set size of plot point marker(s).</para><para>
</para></description><returns><para>Reference to <computeroutput><classname alt="boost::svg::svg_1d_plot_series">svg_1d_plot_series</classname></computeroutput> to make chainable. </para></returns></method>
<method name="size"><type>int</type><description><para>
</para></description><returns><para>size of plot point marker(s). </para></returns></method>
<method name="stroke_color"><type><classname>svg_1d_plot_series</classname> &amp;</type><parameter name="col_"><paramtype>const <classname>svg_color</classname> &amp;</paramtype></parameter><description><para>Set stroke color for plot point marker(s).</para><para>
</para></description><returns><para>Reference to <computeroutput><classname alt="boost::svg::svg_1d_plot_series">svg_1d_plot_series</classname></computeroutput> to make chainable. </para></returns></method>
<method name="stroke_color"><type><classname>svg_color</classname></type><description><para>Get stroke color for plot point marker(s).</para><para>
</para></description><returns><para>Stroke color for plot point marker(s). </para></returns></method>
<method name="symbols"><type><classname>svg_1d_plot_series</classname> &amp;</type><parameter name="s"><paramtype>const std::string</paramtype></parameter><description><para>Set symbol for plot point marker(s).</para><para>
</para></description><returns><para>Reference to <computeroutput><classname alt="boost::svg::svg_1d_plot_series">svg_1d_plot_series</classname></computeroutput> to make chainable. </para></returns></method>
<method name="symbols"><type>const std::string</type><description><para>
</para></description><returns><para>symbol for plot point marker(s). </para></returns></method>
</method-group>
<constructor><template>
          <template-type-parameter name="C"><purpose><para>An iterator into STL container: <computeroutput>array</computeroutput>, <computeroutput>std::vector&lt;double&gt;</computeroutput>, <computeroutput>std::vector&lt;unc&gt;</computeroutput>, <computeroutput>std::vector&lt;Meas&gt;</computeroutput>, <computeroutput>std::set</computeroutput>, <computeroutput>std::map</computeroutput> ... </para></purpose></template-type-parameter>
        </template><parameter name="begin"><paramtype>C</paramtype><description><para>iterator to 1st element in container to show. </para></description></parameter><parameter name="end"><paramtype>C</paramtype><description><para>iterator to last element in container to show. </para></description></parameter><parameter name="title"><paramtype>const std::string &amp;</paramtype><default>""</default><description><para>Title of series of data values. </para></description></parameter><description><para>

</para></description></constructor>
</class>




























































</namespace>
</namespace>
</header>
<header name="boost/svg_plot/svg_2d_plot.hpp">
<para>Create 2D XY plots in Scalable Vector Graphic (SVG) format. </para><para>Provides <computeroutput>svg_2d_plot</computeroutput> data and function to create plots, and <computeroutput>svg_2d_plot_series</computeroutput> to allow data values to be added.</para><para>Very many functions allow fine control of the appearance and layout of plots, data markers and lines.<sbr/>
 (Many items common to 1D and 2D use functions and classes in <computeroutput>axis_plot_frame</computeroutput>). <para>Jacob Voytko &amp; Paul A. Bristow </para>
</para><namespace name="boost">
<namespace name="svg">
<class name="svg_2d_plot"><purpose>Provides <classname alt="boost::svg::svg_2d_plot">svg_2d_plot</classname> data and member functions to create plots.<sbr/>
 Very many functions allow very fine control of the appearance and layout of plots, data markers and lines. </purpose><description><para><para><emphasis role="bold">See Also:</emphasis><para><classname alt="boost::svg::svg_2d_plot_series">svg_2d_plot_series</classname> that allows data values to be added. </para></para>
<para><emphasis role="bold">See Also:</emphasis><para>svg_1d_plot.hpp for 1-D version.</para></para>
<classname alt="boost::svg::svg_2d_plot">svg_2d_plot</classname> allows us to store plot state locally in svg_plot.<sbr/>
 (We don't store it in svg because transforming the points after they are written to the document would be difficult. We store the Cartesian coordinates locally and transform them before we write them).<sbr/>
 (<classname alt="boost::svg::svg_2d_plot">svg_2d_plot</classname> inherits from axis_plot_frame.hpp containing functions common to 1 and 2-D). </para></description><method-group name="public member functions">
<method name="autoscale"><type>bool</type><description><para>
</para></description><returns><para><computeroutput>true</computeroutput> if to use autoscale values autoscaling for X-axis. </para></returns></method>
<method name="autoscale"><type><classname>svg_2d_plot</classname> &amp;</type><parameter name="b"><paramtype>bool</paramtype></parameter><purpose>Set <computeroutput>true</computeroutput> if to use autoscale values for X-axis. </purpose></method>
<method name="autoscale_check_limits"><type><classname>svg_2d_plot</classname> &amp;</type><parameter name="b"><paramtype>bool</paramtype></parameter><description><para>Set <computeroutput>true</computeroutput> to check that values used for autoscale are within limits. Default is <computeroutput>true</computeroutput>, but can switch off checks for speed if user can be sure all values are 'inside limits'. </para></description></method>
<method name="autoscale_check_limits"><type>bool</type><description><para>
</para></description><returns><para><computeroutput>true</computeroutput> if to check that values used for autoscaling are within limits. </para></returns></method>
<method name="autoscale_plusminus"><type><classname>svg_2d_plot</classname> &amp;</type><parameter name=""><paramtype>double</paramtype></parameter><purpose>Set how many std_dev or standard deviations to allow for ellipses when autoscaling. </purpose></method>
<method name="autoscale_plusminus"><type>double</type><description><para>
</para></description><returns><para>How many std_dev or standard deviations allowed for ellipses when autoscaling. </para></returns></method>
<method name="axes_on"><type><classname>svg_2d_plot</classname> &amp;</type><parameter name="is"><paramtype>bool</paramtype></parameter><purpose>Set <computeroutput>true</computeroutput> if to draw <emphasis role="bold">both</emphasis> x and y axes (note plural axes). </purpose></method>
<method name="axes_on"><type>bool</type><description><para>
</para></description><returns><para><computeroutput>true</computeroutput> if to draw <emphasis role="bold">both</emphasis> x and y axis on. </para></returns></method>
<method name="background_border_color"><type><classname>svg_2d_plot</classname> &amp;</type><parameter name="col"><paramtype>const <classname>svg_color</classname> &amp;</paramtype></parameter><purpose>Set plot background border color. </purpose></method>
<method name="background_border_color"><type><classname>svg_color</classname></type><description><para>
</para></description><returns><para>plot background border color. </para></returns></method>
<method name="background_border_width"><type><classname>svg_2d_plot</classname> &amp;</type><parameter name="w"><paramtype>double</paramtype></parameter><purpose>Set plot background border width. </purpose></method>
<method name="background_border_width"><type>double</type><description><para>
</para></description><returns><para>Plot background border width. </para></returns></method>
<method name="background_color"><type><classname>svg_color</classname></type><description><para>
</para></description><returns><para>Plot background color. </para></returns></method>
<method name="background_color"><type><classname>svg_2d_plot</classname> &amp;</type><parameter name="col"><paramtype>const <classname>svg_color</classname> &amp;</paramtype></parameter><purpose>Set plot background color. </purpose></method>
<method name="boost_license_on"><type><classname>svg_2d_plot</classname> &amp;</type><parameter name="l"><paramtype>bool</paramtype></parameter><purpose>Set <computeroutput>true</computeroutput> if the Boost license conditions should be included in the SVG document. </purpose></method>
<method name="boost_license_on"><type>bool</type><description><para>
</para></description><returns><para><computeroutput>true</computeroutput> if the Boost license conditions should be included in the SVG document. </para></returns></method>
<method name="confidence"><type><classname>svg_2d_plot</classname> &amp;</type><parameter name=""><paramtype>double</paramtype></parameter><purpose>Set confidence alpha for display of confidence intervals (default 0.05 for 95%). </purpose></method>
<method name="confidence"><type>double</type><description><para>
</para></description><returns><para>Confidence alpha for display of confidence intervals (default 0.05 for 95%). </para></returns></method>
<method name="coord_precision"><type><classname>svg_2d_plot</classname> &amp;</type><parameter name="digits"><paramtype>int</paramtype></parameter><description><para>Precision of SVG coordinates in decimal digits (default 3). 3 decimal digits precision is sufficient for small images. 4 or 5 decimal digits precision will give higher quality plots, especially for larger images, at the expense of larger .svg files, particularly if there are very many data points. </para></description></method>
<method name="coord_precision"><type>int</type><description><para>
</para></description><returns><para>precision of SVG coordinates in decimal digits. </para></returns></method>
<method name="copyright_date"><type><classname>svg_2d_plot</classname> &amp;</type><parameter name="d"><paramtype>const std::string</paramtype></parameter><description><para>Writes copyright date to the SVG document. and as metadata:&lt;meta name="date" content="2007" /&gt;  </para></description></method>
<method name="copyright_date"><type>const std::string</type><description><para>
</para></description><returns><para>SVG document copyright_date. </para></returns></method>
<method name="copyright_holder"><type><classname>svg_2d_plot</classname> &amp;</type><parameter name="d"><paramtype>const std::string</paramtype></parameter><description><para>Writes copyright_holder metadata to the SVG document (for header as ) /and as metadata:&lt;meta name="copyright" content="Paul A. Bristow" /&gt;  </para></description></method>
<method name="copyright_holder"><type>const std::string</type><description><para>
</para></description><returns><para>SVG document copyright holder. </para></returns></method>
<method name="data_lines_width"><type><classname>svg_2d_plot</classname> &amp;</type><parameter name="width"><paramtype>double</paramtype></parameter><purpose>Set the width of lines joining data points. </purpose></method>
<method name="data_lines_width"><type>double</type><description><para>
</para></description><returns><para>the width of lines joining data points. </para></returns></method>
<method name="derived"><type><classname>svg_2d_plot</classname> &amp;</type><description><para>Uses Curiously Recurring Template Pattern to allow 1D and 2D to reuse common code. See <ulink url="http://en.wikipedia.org/wiki/Curiously_Recurring_Template_Pattern">http://en.wikipedia.org/wiki/Curiously_Recurring_Template_Pattern</ulink> . </para></description></method>
<method name="derived" cv="const"><type>const <classname>svg_2d_plot</classname> &amp;</type><description><para>const version of derived() </para></description></method>
<method name="description"><type><classname>svg_2d_plot</classname> &amp;</type><parameter name="d"><paramtype>const std::string</paramtype></parameter><purpose>Writes description to the document for header as. </purpose><description><para>&lt;desc&gt; My Description &lt;/desc&gt;.  </para></description></method>
<method name="description"><type>const std::string &amp;</type><description><para>
</para></description><returns><para>Description of the document for header as&lt;desc&gt; My description &lt;/desc&gt;.  </para></returns></method>
<method name="document_title"><type><classname>svg_2d_plot</classname> &amp;</type><parameter name="d"><paramtype>const std::string</paramtype></parameter><purpose>Set document title to the document for header as. </purpose><description><para>&lt;title&gt; My Title &lt;/title&gt;.  </para></description></method>
<method name="document_title"><type>std::string</type><description><para>
</para></description><returns><para>Document title to the document for header as&lt;title&gt; My Title &lt;/title&gt;.  </para></returns></method>
<method name="draw_line"><type><classname>svg_2d_plot</classname> &amp;</type><parameter name="x1"><paramtype>double</paramtype></parameter><parameter name="y1"><paramtype>double</paramtype></parameter><parameter name="x2"><paramtype>double</paramtype></parameter><parameter name="y2"><paramtype>double</paramtype></parameter><parameter name="col"><paramtype>const <classname>svg_color</classname> &amp;</paramtype><default>black</default></parameter><description><para>Annotate plot with a line from SVG Coordinates X1, Y1 to X2, Y2. (Default color black). Note <emphasis role="bold">NOT</emphasis> the data values. See draw_plot_line if want to use user coordinates. </para></description></method>
<method name="draw_note"><type><classname>svg_2d_plot</classname> &amp;</type><parameter name="x"><paramtype>double</paramtype></parameter><parameter name="y"><paramtype>double</paramtype></parameter><parameter name="note"><paramtype>std::string</paramtype></parameter><parameter name="rot"><paramtype>rotate_style</paramtype><default>horizontal</default></parameter><parameter name="al"><paramtype>align_style</paramtype><default>center_align</default></parameter><parameter name=""><paramtype>const <classname>svg_color</classname> &amp;</paramtype><default>black</default></parameter><parameter name="tsty"><paramtype><classname>text_style</classname> &amp;</paramtype><default>no_style</default></parameter><purpose>Annotate plot with a text string (perhaps including Unicode), putting note at SVG Coordinates X, Y. </purpose><description><para>Defaults color black, rotation horizontal and align = center_align Using center_align is recommended as it will ensure that will center correctly (even if original string is made much longer because it contains Unicode, for example Greek or math symbols, taking about 6 characters per symbol) because the render engine does the centering. </para></description></method>
<method name="draw_plot_curve"><type><classname>svg_2d_plot</classname> &amp;</type><parameter name="x1"><paramtype>double</paramtype></parameter><parameter name="y1"><paramtype>double</paramtype></parameter><parameter name="x2"><paramtype>double</paramtype></parameter><parameter name="y2"><paramtype>double</paramtype></parameter><parameter name="x3"><paramtype>double</paramtype></parameter><parameter name="y3"><paramtype>double</paramtype></parameter><parameter name="col"><paramtype>const <classname>svg_color</classname> &amp;</paramtype><default>black</default></parameter><purpose>Annotate plot with a line from user's Cartesian Coordinates X1, Y1 via X2, Y2 to X3, Y3. </purpose><description><para>For example, -10, -10, +10, +10, Default color black. </para></description></method>
<method name="draw_plot_line"><type><classname>svg_2d_plot</classname> &amp;</type><parameter name="x1"><paramtype>double</paramtype></parameter><parameter name="y1"><paramtype>double</paramtype></parameter><parameter name="x2"><paramtype>double</paramtype></parameter><parameter name="y2"><paramtype>double</paramtype></parameter><parameter name="col"><paramtype>const <classname>svg_color</classname> &amp;</paramtype><default>black</default></parameter><purpose>Annotate plot with a line from user's Cartesian Coordinates X1, Y1 to X2, Y2. </purpose><description><para>For example, -10, -10, +10, +10, Default color black. </para></description></method>
<method name="image_border_margin"><type><classname>svg_2d_plot</classname> &amp;</type><parameter name="w"><paramtype>double</paramtype></parameter><purpose>Set the margin around the plot window border (svg units, default pixels). </purpose><description><para>This prevents the plot window getting too close to other elements of the plot. </para></description></method>
<method name="image_border_margin"><type>double</type><description><para>
</para></description><returns><para>the margin around the plot window border (svg units, default pixels). </para></returns></method>
<method name="image_border_width"><type><classname>svg_2d_plot</classname> &amp;</type><parameter name="w"><paramtype>double</paramtype></parameter><purpose>Set the svg image border width (svg units, default pixels). </purpose></method>
<method name="image_border_width"><type>double</type><description><para>
</para></description><returns><para>the svg image border width (svg units, default pixels). </para></returns></method>
<method name="image_x_size"><type>unsigned int</type><purpose>Obselete - deprecated use x_size() </purpose></method>
<method name="image_x_size"><type><classname>svg_2d_plot</classname> &amp;</type><parameter name="i"><paramtype>unsigned int</paramtype></parameter><purpose>Obselete - deprecated - use x_size(). </purpose></method>
<method name="image_y_size"><type>unsigned int</type><purpose>Obselete - deprecated - use y_size() </purpose></method>
<method name="image_y_size"><type><classname>svg_2d_plot</classname> &amp;</type><parameter name="i"><paramtype>unsigned int</paramtype></parameter><purpose>Obselete - deprecated - use y_size() </purpose></method>
<method name="legend_background_color"><type><classname>svg_2d_plot</classname> &amp;</type><parameter name="col"><paramtype>const <classname>svg_color</classname> &amp;</paramtype></parameter><purpose>Set the background fill color of the legend box. </purpose></method>
<method name="legend_background_color"><type><classname>svg_color</classname></type><description><para>
</para></description><returns><para>the background fill color of the legend box. </para></returns></method>
<method name="legend_border_color"><type><classname>svg_2d_plot</classname> &amp;</type><parameter name="col"><paramtype>const <classname>svg_color</classname> &amp;</paramtype></parameter><purpose>Set the border stroke color of the legend box. </purpose></method>
<method name="legend_border_color"><type><classname>svg_color</classname></type><description><para>
</para></description><returns><para>the border stroke color of the legend box. </para></returns></method>
<method name="legend_bottom_right"><type>const std::pair&lt; double, double &gt;</type><description><para>
</para></description><returns><para>SVG coordinate (default pixels) of bottom right of legend box. </para></returns></method>
<method name="legend_box_fill_on"><type>bool</type><description><para>
</para></description><returns><para>true if legend box has a background fill color. </para></returns></method>
<method name="legend_color"><type><classname>svg_2d_plot</classname> &amp;</type><parameter name="col"><paramtype>const <classname>svg_color</classname> &amp;</paramtype></parameter><purpose>Set the color of the title of the legend. </purpose></method>
<method name="legend_color"><type><classname>svg_color</classname></type><description><para>
</para></description><returns><para>the color of the title of the legend. </para></returns></method>
<method name="legend_font_family"><type><classname>svg_2d_plot</classname> &amp;</type><parameter name="family"><paramtype>const std::string &amp;</paramtype></parameter><purpose>Set the font family for the legend title. </purpose></method>
<method name="legend_font_family"><type>const std::string &amp;</type><description><para>
</para></description><returns><para>the font family for the legend title. </para></returns></method>
<method name="legend_font_weight"><type><classname>svg_2d_plot</classname> &amp;</type><parameter name="weight"><paramtype>const std::string &amp;</paramtype></parameter><purpose>Set the font weight for the legend title. </purpose></method>
<method name="legend_font_weight"><type>const std::string &amp;</type><description><para>
</para></description><returns><para>Font weight for the legend title. </para></returns></method>
<method name="legend_header_font_size"><type><classname>svg_2d_plot</classname> &amp;</type><parameter name="size"><paramtype>int</paramtype></parameter><purpose>Set legend header font size (svg units, default pixels). </purpose></method>
<method name="legend_header_font_size"><type>int</type><description><para>
</para></description><returns><para>legend header font size (svg units, default pixels). </para></returns></method>
<method name="legend_lines"><type><classname>svg_2d_plot</classname> &amp;</type><parameter name="is"><paramtype>bool</paramtype></parameter><description><para>Set true if legend should include samples of the lines joining data points. This allows different series of data points to be distinguished by different color and/or width. This is especially useful to show plots of different functions and/or different parameters in different colors. </para></description></method>
<method name="legend_lines"><type>bool</type><description><para>
</para></description><returns><para>true if legend should include samples of the lines joining data points. </para></returns></method>
<method name="legend_on"><type><classname>svg_2d_plot</classname> &amp;</type><parameter name="cmd"><paramtype>bool</paramtype></parameter><purpose>Set <computeroutput>true</computeroutput> if a legend is wanted. </purpose></method>
<method name="legend_on"><type>bool</type><description><para>
</para></description><returns><para><computeroutput>true</computeroutput> if a legend is wanted. </para></returns></method>
<method name="legend_outside"><type>bool</type><description><para>
</para></description><returns><para>if the legend should be outside the plot area. </para></returns></method>
<method name="legend_place"><type><classname>svg_2d_plot</classname> &amp;</type><parameter name="l"><paramtype>legend_places</paramtype></parameter><purpose>Set the position of the legend,. </purpose><description><para><para><emphasis role="bold">See Also:</emphasis><para>boost::svg::legend_places </para></para>
</para></description></method>
<method name="legend_place"><type>legend_places</type><description><para>
<para><emphasis role="bold">See Also:</emphasis><para>boost::svg::legend_places </para></para>
</para></description><returns><para>the position of the legend, </para></returns></method>
<method name="legend_title"><type><classname>svg_2d_plot</classname> &amp;</type><parameter name="title"><paramtype>const std::string</paramtype></parameter><purpose>Set the title for the legend. </purpose></method>
<method name="legend_title"><type>const std::string</type><description><para>
</para></description><returns><para>Title for the legend. </para></returns></method>
<method name="legend_title_font_size"><type><classname>svg_2d_plot</classname> &amp;</type><parameter name="size"><paramtype>unsigned int</paramtype></parameter><description><para>
</para></description><returns><para>Font family for the legend title. </para></returns></method>
<method name="legend_title_font_size"><type>unsigned int</type><description><para>
</para></description><returns><para>Font size for the legend title (svg units, default pixels). </para></returns></method>
<method name="legend_top_left"><type><classname>svg_2d_plot</classname> &amp;</type><parameter name="x"><paramtype>double</paramtype></parameter><parameter name="y"><paramtype>double</paramtype></parameter><purpose>Set position of top left of legend box (svg coordinates, default pixels). (Bottom right is controlled by contents, so the user cannot set it). </purpose></method>
<method name="legend_top_left"><type>const std::pair&lt; double, double &gt;</type><description><para>
</para></description><returns><para>SVG coordinate (default pixels) of top left of legend box. </para></returns></method>
<method name="legend_width"><type><classname>svg_2d_plot</classname> &amp;</type><parameter name="width"><paramtype>double</paramtype></parameter><purpose>Set the width for the legend box. </purpose></method>
<method name="legend_width"><type>double</type><description><para>
</para></description><returns><para>Width for the legend box. </para></returns></method>
<method name="license"><type><classname>svg_2d_plot</classname> &amp;</type><parameter name="repro"><paramtype>std::string</paramtype><default>"permits"</default></parameter><parameter name="distrib"><paramtype>std::string</paramtype><default>"permits"</default></parameter><parameter name="attrib"><paramtype>std::string</paramtype><default>"requires"</default></parameter><parameter name="commercial"><paramtype>std::string</paramtype><default>"permits"</default></parameter><parameter name="derivative"><paramtype>std::string</paramtype><default>"permits"</default></parameter><description><para>Set license conditions for reproduction, attribution, commercial use, and derivative works, usually "permits", "requires", or "prohibits", and set license_on == true. </para></description></method>
<method name="license_attribution"><type>const std::string</type><description><para>
</para></description><returns><para>SVG document attribution license conditions, usually "permits", "requires", or "prohibits". </para></returns></method>
<method name="license_commercialuse"><type>const std::string</type><description><para>
</para></description><returns><para>SVG document commercial use license conditions, usually "permits", "requires", or "prohibits". </para></returns></method>
<method name="license_distribution"><type>const std::string</type><description><para>
</para></description><returns><para>SVG document distribution license conditions, usually "permits", "requires", or "prohibits". </para></returns></method>
<method name="license_on"><type><classname>svg_2d_plot</classname> &amp;</type><parameter name="l"><paramtype>bool</paramtype></parameter><purpose>Set if license conditions should be included in the SVG document. </purpose></method>
<method name="license_on"><type>bool</type><description><para>
</para></description><returns><para><computeroutput>true</computeroutput> if license conditions should be included in the SVG document. </para></returns></method>
<method name="license_reproduction"><type>const std::string</type><description><para>
</para></description><returns><para>SVG document reproduction license conditions, usually "permits", "requires", or "prohibits". </para></returns></method>
<method name="limit_color"><type><classname>svg_2d_plot</classname> &amp;</type><parameter name=""><paramtype>const <classname>svg_color</classname> &amp;</paramtype></parameter><purpose>Set the color for 'at limit' point stroke color. </purpose></method>
<method name="limit_color"><type><classname>svg_color</classname></type><description><para>
</para></description><returns><para>the color for the 'at limit' point stroke color. </para></returns></method>
<method name="limit_fill_color"><type><classname>svg_2d_plot</classname> &amp;</type><parameter name=""><paramtype>const <classname>svg_color</classname> &amp;</paramtype></parameter><purpose>Set the color for 'at limit' point fill color. </purpose></method>
<method name="limit_fill_color"><type><classname>svg_color</classname></type><description><para>
</para></description><returns><para>the color for the 'at limit' point fill color. </para></returns></method>
<method name="one_sd_color"><type><classname>svg_2d_plot</classname> &amp;</type><parameter name=""><paramtype>const <classname>svg_color</classname> &amp;</paramtype></parameter><purpose>Set the color for the one standard deviation (~67% confidence) ellipse fill. </purpose></method>
<method name="one_sd_color"><type><classname>svg_color</classname></type><description><para>
</para></description><returns><para>Color for the one standard deviation (~67% confidence) ellipse fill. </para></returns></method>
<method name="plot"><type><classname>svg_2d_plot_series</classname> &amp;</type><template>
          <template-type-parameter name="T"><purpose><para>Type of data in series (must be convertible to Meas). </para></purpose></template-type-parameter>
        </template><parameter name="container"><paramtype>const T &amp;</paramtype></parameter><parameter name="title"><paramtype>const std::string &amp;</paramtype><default>""</default></parameter><purpose>Add a container of a data series to the plot.<sbr/>
 (Version converting to Meas using double with pair_double_2d_convert).<sbr/>
 <emphasis role="bold">Example:</emphasis> </purpose><description><para><programlisting language="c++">my_plot.plot(data1, "Sqrt(x)");
</programlisting> <note><para>This version assumes that <emphasis role="bold">ALL</emphasis> the data values in the container is used. </para></note>

</para></description><description><para>
</para></description><returns><para>Reference to data series just added to make chainable. </para></returns></method>
<method name="plot"><type><classname>svg_2d_plot_series</classname> &amp;</type><template>
          <template-type-parameter name="T"/>
          <template-type-parameter name="U"/>
        </template><parameter name="container"><paramtype>const T &amp;</paramtype></parameter><parameter name="title"><paramtype>const std::string &amp;</paramtype><default>""</default></parameter><parameter name="functor"><paramtype>U</paramtype><default><emphasis>unspecified</emphasis></default></parameter><description><para>Add a container of a data series to the plot.<sbr/>
This version permits a custom functor (rather than default conversion to <computeroutput>double</computeroutput>).<sbr/>
<note><para>that this version assumes that <emphasis role="bold">ALL</emphasis> the data values in the container is used. </para></note>
</para></description><description><para>
</para></description><returns><para>Reference to data series just added to make chainable. </para></returns></method>
<method name="plot"><type><classname>svg_2d_plot_series</classname> &amp;</type><template>
          <template-type-parameter name="T"/>
        </template><parameter name="begin"><paramtype>const T &amp;</paramtype></parameter><parameter name="end"><paramtype>const T &amp;</paramtype></parameter><parameter name="title"><paramtype>const std::string &amp;</paramtype><default>""</default></parameter><purpose>Add a data series to the plot (by default, converting automatically to <computeroutput>unc</computeroutput> doubles).<sbr/>
 This version permits <emphasis role="bold">part</emphasis> of the container to be used, a partial range, using iterators begin to end.<sbr/>
 For example: </purpose><description><para><programlisting language="c++">my_2d_plot.plot(my_data.begin(), my_data.end(), "My container");
</programlisting></para><para><programlisting language="c++">my_2d_plot.plot(&amp;my_data[1], &amp;my_data[3], "my_data 1 to 3"); // Add part of data series.
</programlisting> </para></description><description><para>
</para></description><returns><para>Reference to data series just added to make chainable. </para></returns></method>
<method name="plot"><type><classname>svg_2d_plot_series</classname> &amp;</type><template>
          <template-type-parameter name="T"/>
          <template-type-parameter name="U"/>
        </template><parameter name="begin"><paramtype>const T &amp;</paramtype></parameter><parameter name="end"><paramtype>const T &amp;</paramtype></parameter><parameter name="title"><paramtype>const std::string &amp;</paramtype><default>""</default></parameter><parameter name="functor"><paramtype>U</paramtype><default><emphasis>unspecified</emphasis></default></parameter><description><para>
</para></description><returns><para>Reference to data series just added to make chainable. </para></returns></method>
<method name="plot_background_color"><type><classname>svg_2d_plot</classname> &amp;</type><parameter name="col"><paramtype>const <classname>svg_color</classname> &amp;</paramtype></parameter><purpose>Set the fill color of the plot window background. </purpose></method>
<method name="plot_background_color"><type><classname>svg_color</classname></type><description><para>
</para></description><returns><para>the fill color of the plot window background. </para></returns></method>
<method name="plot_border_color"><type><classname>svg_2d_plot</classname> &amp;</type><parameter name="col"><paramtype>const <classname>svg_color</classname> &amp;</paramtype></parameter><purpose>Set the color for the plot window background. </purpose></method>
<method name="plot_border_color"><type><classname>svg_color</classname></type><description><para>
</para></description><returns><para>the color for the plot window background. </para></returns></method>
<method name="plot_border_width"><type><classname>svg_2d_plot</classname> &amp;</type><parameter name="w"><paramtype>double</paramtype></parameter><purpose>Set the margin around the plot window border (svg units, default pixels). </purpose><description><para>This prevents the plot window getting too close to other elements of the plot. </para></description></method>
<method name="plot_border_width"><type>double</type><description><para>
</para></description><returns><para>the width for the plot window border (svg units, default pixels). </para></returns></method>
<method name="plot_window_on"><type><classname>svg_2d_plot</classname> &amp;</type><parameter name="cmd"><paramtype>bool</paramtype></parameter><purpose>Set true if a plot window is wanted (or false if the whole image is to be used). </purpose></method>
<method name="plot_window_on"><type>bool</type><description><para>
</para></description><returns><para>true if a plot window is wanted (or false if the whole image is to be used). </para></returns></method>
<method name="plot_window_x"><type><classname>svg_2d_plot</classname> &amp;</type><parameter name="min_x"><paramtype>double</paramtype></parameter><parameter name="max_x"><paramtype>double</paramtype></parameter><purpose>Set the minimum and maximum (cartesian data units) for the plot window X axis. This is normally calculated from other plot values. </purpose></method>
<method name="plot_window_x"><type>std::pair&lt; double, double &gt;</type><description><para>
</para></description><returns><para>both the left and right (X axis) of the plot window. </para></returns></method>
<method name="plot_window_x_left"><type>double</type><description><para>
</para></description><returns><para>left of the plot window. </para></returns></method>
<method name="plot_window_x_right"><type>double</type><description><para>
</para></description><returns><para>right of the plot window. </para></returns></method>
<method name="plot_window_y"><type><classname>svg_2d_plot</classname> &amp;</type><parameter name="min_y"><paramtype>double</paramtype></parameter><parameter name="max_y"><paramtype>double</paramtype></parameter><purpose>Set the minimum and maximum (cartesian data units) for the plot window Y axis. This is normally calculated from other plot values. </purpose></method>
<method name="plot_window_y"><type>std::pair&lt; double, double &gt;</type><description><para>
</para></description><returns><para>both the top and bottom (Y axis) of the plot window. </para></returns></method>
<method name="plot_window_y_bottom"><type>double</type><description><para>
</para></description><returns><para>top of the plot window. </para></returns></method>
<method name="plot_window_y_top"><type>double</type><description><para>
</para></description><returns><para>top of the plot window. </para></returns></method>
<method name="size"><type><classname>svg_2d_plot</classname> &amp;</type><parameter name="x"><paramtype>unsigned int</paramtype></parameter><parameter name="y"><paramtype>unsigned int</paramtype></parameter><purpose>Set SVG image size (SVG units, default pixels). </purpose></method>
<method name="size"><type>std::pair&lt; double, double &gt;</type><description><para>
</para></description><returns><para>SVG image size, both horizontal width and vertical height (SVG units, default pixels). </para></returns></method>
<method name="three_sd_color"><type><classname>svg_2d_plot</classname> &amp;</type><parameter name=""><paramtype>const <classname>svg_color</classname> &amp;</paramtype></parameter><purpose>Set the color for three standard deviation (~99% confidence) ellipse fill. </purpose></method>
<method name="three_sd_color"><type><classname>svg_color</classname></type><description><para>
</para></description><returns><para>Color for three standard deviation (~99% confidence) ellipse fill. </para></returns></method>
<method name="title"><type><classname>svg_2d_plot</classname> &amp;</type><parameter name="title"><paramtype>const std::string</paramtype></parameter><description><para>Set a title for plot. The string may include Unicode for greek letter and symbols. <emphasis role="bold">example:</emphasis> A title that includes a greek omega and degree symbols: <programlisting language="c++">my_plot.title("Plot of &amp;#x3A9; function (&amp;#x00B0;C)");
</programlisting></para><para>Unicode symbols are at <ulink url="http://unicode.org/charts/symbols.html">http://unicode.org/charts/symbols.html</ulink>. </para></description></method>
<method name="title"><type>const std::string</type><description><para>
</para></description><returns><para>Title for plot (whose string may include Unicode for greek letter and symbols). </para></returns></method>
<method name="title_color"><type><classname>svg_2d_plot</classname> &amp;</type><parameter name="col"><paramtype>const <classname>svg_color</classname> &amp;</paramtype></parameter><purpose>Set the color of any title of the plot. </purpose></method>
<method name="title_color"><type><classname>svg_color</classname></type><description><para>
</para></description><returns><para>the color of any title of the plot. </para></returns></method>
<method name="title_font_alignment"><type><classname>svg_2d_plot</classname> &amp;</type><parameter name="alignment"><paramtype>align_style</paramtype></parameter><purpose>Set the alignment for the title. </purpose></method>
<method name="title_font_alignment"><type>align_style</type><description><para>
</para></description><returns><para>the alignment for the title. </para></returns></method>
<method name="title_font_decoration"><type><classname>svg_2d_plot</classname> &amp;</type><parameter name="decoration"><paramtype>const std::string &amp;</paramtype></parameter><purpose>Set the font decoration for the title (default normal, or underline, overline or strike-thru). </purpose></method>
<method name="title_font_decoration"><type>const std::string &amp;</type><description><para>
</para></description><returns><para>Font decoration for the title (default normal, or underline, overline or strike-thru). </para></returns></method>
<method name="title_font_family"><type><classname>svg_2d_plot</classname> &amp;</type><parameter name="family"><paramtype>const std::string &amp;</paramtype></parameter><purpose>Set the font family for the title (for example: .title_font_family("Lucida Sans Unicode");. </purpose></method>
<method name="title_font_family"><type>const std::string &amp;</type><description><para>
</para></description><returns><para>Font family for the title. </para></returns></method>
<method name="title_font_rotation"><type><classname>svg_2d_plot</classname> &amp;</type><parameter name="rotate"><paramtype>rotate_style</paramtype></parameter><purpose>Set the rotation for the title font (degrees, 0 to 360 in steps using rotate_style, for example horizontal, uphill... </purpose></method>
<method name="title_font_rotation"><type>int</type><description><para>
</para></description><returns><para>the rotation for the title font (degrees). </para></returns></method>
<method name="title_font_size"><type><classname>svg_2d_plot</classname> &amp;</type><parameter name="i"><paramtype>unsigned int</paramtype></parameter><purpose>Sets the font size for the title (SVG units, default pixels). </purpose></method>
<method name="title_font_size"><type>unsigned int</type><description><para>
</para></description><returns><para>Font size for the title (SVG units, default pixels). </para></returns></method>
<method name="title_font_stretch"><type><classname>svg_2d_plot</classname> &amp;</type><parameter name="stretch"><paramtype>const std::string &amp;</paramtype></parameter><purpose>Set the font stretch for the title (default normal), wider or narrow. </purpose></method>
<method name="title_font_stretch"><type>const std::string &amp;</type><description><para>
</para></description><returns><para>Font stretch for the title. </para></returns></method>
<method name="title_font_style"><type><classname>svg_2d_plot</classname> &amp;</type><parameter name="style"><paramtype>const std::string &amp;</paramtype></parameter><purpose>Set the font style for the title (default normal). </purpose></method>
<method name="title_font_style"><type>const std::string &amp;</type><description><para>
</para></description><returns><para>Font style for the title (default normal). </para></returns></method>
<method name="title_font_weight"><type><classname>svg_2d_plot</classname> &amp;</type><parameter name="weight"><paramtype>const std::string &amp;</paramtype></parameter><purpose>Set the font weight for the title (default normal). </purpose></method>
<method name="title_font_weight"><type>const std::string &amp;</type><description><para>
</para></description><returns><para>Font weight for the title. </para></returns></method>
<method name="title_on"><type><classname>svg_2d_plot</classname> &amp;</type><parameter name="cmd"><paramtype>bool</paramtype></parameter><purpose>If set true, show a title for the plot. Note: is set true by setting a title. </purpose></method>
<method name="title_on"><type>bool</type><description><para>
</para></description><returns><para>true if will show a title for the plot. </para></returns></method>
<method name="two_sd_color"><type><classname>svg_2d_plot</classname> &amp;</type><parameter name=""><paramtype>const <classname>svg_color</classname> &amp;</paramtype></parameter><purpose>Set the color for two standard deviation (~95% confidence) ellipse fill. </purpose></method>
<method name="two_sd_color"><type><classname>svg_color</classname></type><description><para>
</para></description><returns><para>Color for two standard deviation (~95% confidence) ellipse fill. </para></returns></method>
<method name="write"><type><classname>svg_2d_plot</classname> &amp;</type><parameter name="file"><paramtype>const std::string &amp;</paramtype></parameter><description><para>Write the plot image to a named file (default suffix .svg, added if no type already appended to file name).</para><para>
</para></description><returns><para>Reference to <classname alt="boost::svg::svg_2d_plot">svg_2d_plot</classname> to make chainable. </para></returns></method>
<method name="write"><type><classname>svg_2d_plot</classname> &amp;</type><parameter name="s_out"><paramtype>std::ostream &amp;</paramtype></parameter><description><para>Write the SVG image to a <computeroutput>std::ostream</computeroutput>. </para></description><description><para>
</para></description><returns><para>Reference to <classname alt="boost::svg::svg_2d_plot">svg_2d_plot</classname> to make chainable. </para></returns></method>
<method name="x_addlimits_color"><type><classname>svg_2d_plot</classname> &amp;</type><parameter name="col"><paramtype>const <classname>svg_color</classname> &amp;</paramtype></parameter><purpose>Set the color of X confidence limits of value, for example, the color in "&lt;1.23, 1.45&gt;". </purpose></method>
<method name="x_addlimits_color"><type><classname>svg_color</classname></type><description><para>
</para></description><returns><para>the color of X confidence limits of value, for example, the color of "&lt;1.23, 1.45&gt;)". </para></returns></method>
<method name="x_addlimits_on"><type><classname>svg_2d_plot</classname> &amp;</type><parameter name="b"><paramtype>bool</paramtype></parameter><purpose>Set if to append confidence limits to data point X values near data points markers. </purpose></method>
<method name="x_addlimits_on"><type>bool</type><description><para>
</para></description><returns><para>true if to append confidence limits estimate to data point X values near data points markers. </para></returns></method>
<method name="x_auto_max_value"><type>double</type><description><para>
</para></description><returns><para>X-axis maximum value computed by autoscale. </para></returns></method>
<method name="x_auto_min_value"><type>double</type><description><para>
</para></description><returns><para>X-axis minimum value computed by autoscale. </para></returns></method>
<method name="x_auto_tick_interval"><type>double</type><description><para>
</para></description><returns><para>the X-axis major tick interval computed by autoscale. </para></returns></method>
<method name="x_auto_ticks"><type>int</type><description><para>
</para></description><returns><para>the X-axis number of major ticks computed by autoscale. </para></returns></method>
<method name="x_autoscale"><type>bool</type><description><para>
</para></description><returns><para><computeroutput>true</computeroutput> if to use autoscale value for X-axis. </para></returns></method>
<method name="x_autoscale"><type><classname>svg_2d_plot</classname> &amp;</type><parameter name="b"><paramtype>bool</paramtype></parameter><purpose>Set <computeroutput>true</computeroutput> if to use autoscale values for X-axis. </purpose></method>
<method name="x_autoscale"><type><classname>svg_2d_plot</classname> &amp;</type><parameter name="p"><paramtype>std::pair&lt; double, double &gt;</paramtype></parameter><purpose>autoscale X axis using a pair of doubles. </purpose></method>
<method name="x_autoscale"><type><classname>svg_2d_plot</classname> &amp;</type><parameter name="container"><paramtype>const T &amp;</paramtype></parameter><purpose>&lt; </purpose><description><para>
</para></description></method>
<method name="x_autoscale"><type><classname>svg_2d_plot</classname> &amp;</type><parameter name="begin"><paramtype>const T &amp;</paramtype></parameter><parameter name="end"><paramtype>const T &amp;</paramtype></parameter><purpose>&lt; </purpose><description><para>
</para></description></method>
<method name="x_axis"><type><classname>axis_line_style</classname> &amp;</type><description><para>
</para></description><returns><para><computeroutput>true</computeroutput> if horizontal X-axis line to be drawn. </para></returns></method>
<method name="x_axis_color"><type><classname>svg_2d_plot</classname> &amp;</type><parameter name="col"><paramtype>const <classname>svg_color</classname> &amp;</paramtype></parameter><purpose>Set the color of the X-axis line. </purpose></method>
<method name="x_axis_color"><type><classname>svg_color</classname></type><description><para>
</para></description><returns><para>the color of the X-axis line. </para></returns></method>
<method name="x_axis_label_color"><type><classname>svg_2d_plot</classname> &amp;</type><parameter name="col"><paramtype>const <classname>svg_color</classname> &amp;</paramtype></parameter><purpose>Set X axis label color, for example, red. </purpose></method>
<method name="x_axis_label_color"><type><classname>svg_color</classname></type><description><para>
</para></description><returns><para>X axis label color. &lt;X-axis ticks values label style. </para></returns></method>
<method name="x_axis_on"><type><classname>svg_2d_plot</classname> &amp;</type><parameter name="is"><paramtype>bool</paramtype></parameter><purpose>If set true, draw a horizontal X-axis line. </purpose></method>
<method name="x_axis_on"><type>bool</type><description><para>
</para></description><returns><para>true if will draw a horizontal X-axis line. </para></returns></method>
<method name="x_axis_position"><type>const std::string</type><description><para>
</para></description><returns><para>the position (or intersection with Y-axis) of the X-axis. </para></returns></method>
<method name="x_axis_vertical"><type><classname>svg_2d_plot</classname> &amp;</type><parameter name="fraction"><paramtype>double</paramtype></parameter><purpose>Set vertical position of X-axis for 1D as fraction of plot window. </purpose></method>
<method name="x_axis_vertical"><type>bool</type><description><para>
</para></description><returns><para>vertical position of X-axis for 1D as fraction of plot window. </para></returns></method>
<method name="x_axis_width"><type><classname>svg_2d_plot</classname> &amp;</type><parameter name="width"><paramtype>double</paramtype></parameter><purpose>Set the width of X-axis lines. </purpose></method>
<method name="x_axis_width"><type>double</type><description><para>
</para></description><returns><para>the width of X-axis lines. </para></returns></method>
<method name="x_datetime_color"><type><classname>svg_2d_plot</classname> &amp;</type><parameter name="col"><paramtype>const <classname>svg_color</classname> &amp;</paramtype></parameter><purpose>Set the color of X date time , for example, the color of text in "". </purpose></method>
<method name="x_datetime_color"><type><classname>svg_color</classname></type><description><para>
</para></description><returns><para>the color of X date time, for example, the color of text in "". </para></returns></method>
<method name="x_datetime_on"><type><classname>svg_2d_plot</classname> &amp;</type><parameter name="b"><paramtype>bool</paramtype></parameter><purpose>Set true if to append date time to data point X values near data points markers. </purpose></method>
<method name="x_datetime_on"><type>bool</type><description><para>
</para></description><returns><para>true if to append an date time to data point X values near data points markers. </para></returns></method>
<method name="x_decor"><type><classname>svg_2d_plot</classname> &amp;</type><parameter name="pre"><paramtype>const std::string &amp;</paramtype></parameter><parameter name="sep"><paramtype>const std::string &amp;</paramtype><default>""</default></parameter><parameter name="suf"><paramtype>const std::string &amp;</paramtype><default>""</default></parameter><description><para>Set prefix, separator and suffix together for x_ values. Note if you want a space, you must use a Unicode space "&amp;#x00A0;", for example, ",&amp;#x00A0;" rather than ASCII space", ". If 1st char in separator == <sbr/>
, then Y values and info will be on a newline below. </para></description></method>
<method name="x_df_color"><type><classname>svg_2d_plot</classname> &amp;</type><parameter name="col"><paramtype>const <classname>svg_color</classname> &amp;</paramtype></parameter><purpose>Set the color of X degrees of freedom, for example, the color of 9 in "1.23 +-0.02 (9)". </purpose></method>
<method name="x_df_color"><type><classname>svg_color</classname></type><description><para>
</para></description><returns><para>the color of X degrees of freedom, for example, the color of 9 in "1.23 +-0.02 (9)". </para></returns></method>
<method name="x_df_on"><type><classname>svg_2d_plot</classname> &amp;</type><parameter name="b"><paramtype>bool</paramtype></parameter><purpose>Set true if to append a degrees of freedom estimate to data point X values near data points markers. </purpose></method>
<method name="x_df_on"><type>bool</type><description><para>
</para></description><returns><para>true if to append a degrees of freedom estimate to data point X values near data points markers. </para></returns></method>
<method name="x_id_color"><type><classname>svg_2d_plot</classname> &amp;</type><parameter name="col"><paramtype>const <classname>svg_color</classname> &amp;</paramtype></parameter><purpose>Set the color of X id or name, for example, the color of text in "my_id". </purpose></method>
<method name="x_id_color"><type><classname>svg_color</classname></type><description><para>
</para></description><returns><para>the color of X X id or name, for example, the color of text in "my_id". </para></returns></method>
<method name="x_id_on"><type><classname>svg_2d_plot</classname> &amp;</type><parameter name="b"><paramtype>bool</paramtype></parameter><purpose>Set true if to append append an ID or name to data point X values near data points markers. </purpose></method>
<method name="x_id_on"><type>bool</type><description><para>
</para></description><returns><para>true if to append an ID or name to data point X values near data points markers. </para></returns></method>
<method name="x_label"><type><classname>svg_2d_plot</classname> &amp;</type><parameter name="str"><paramtype>const std::string &amp;</paramtype></parameter><purpose>Set the text to label the X-axis (and set x_label_on(true)). </purpose></method>
<method name="x_label"><type>std::string</type><description><para>
</para></description><returns><para>the text to label the X-axis. </para></returns></method>
<method name="x_label_color"><type><classname>svg_2d_plot</classname> &amp;</type><parameter name="col"><paramtype>const <classname>svg_color</classname> &amp;</paramtype></parameter><description><para>
</para></description><returns><para>the color of the Y-axis line. </para></returns></method>
<method name="x_label_color"><type><classname>svg_color</classname></type><description><para>
</para></description><returns><para>the color of X-axis label (including any units). </para></returns></method>
<method name="x_label_font_family"><type><classname>svg_2d_plot</classname> &amp;</type><parameter name="family"><paramtype>const std::string &amp;</paramtype></parameter><description><para>Set X tick value label font family. Available fonts depend on the program rendering the SVG XML, usually a browser. The default font (usually "default_font") is used if a render program does not provide the font specified. These are probably usable: <programlisting language="c++">"arial", "impact", "courier", "lucida console",  "Lucida sans unicode", "verdana", "calibri", "century",
"lucida calligraphy", "tahoma", "vivaldi", "informal roman", "lucida handwriting", "lucida bright", "helvetica"
</programlisting> </para></description></method>
<method name="x_label_font_family"><type>const std::string &amp;</type><description><para>
</para></description><returns><para>X tick value label font family. </para></returns></method>
<method name="x_label_font_size"><type><classname>svg_2d_plot</classname> &amp;</type><parameter name="i"><paramtype>unsigned int</paramtype></parameter><purpose>Set X axis label font size (svg units, default pixels). </purpose></method>
<method name="x_label_font_size"><type>unsigned int</type><description><para>
</para></description><returns><para>X axis label font size (svg units, default pixels). </para></returns></method>
<method name="x_label_on"><type><classname>svg_2d_plot</classname> &amp;</type><parameter name="cmd"><paramtype>bool</paramtype></parameter><description><para>Set to include an X-axis text label. <para><emphasis role="bold">See Also:</emphasis><para>x_label_units</para></para>

</para></description><returns><para>Reference to <classname alt="boost::svg::svg_2d_plot">svg_2d_plot</classname> to make chainable. </para></returns></method>
<method name="x_label_on"><type>bool</type><description><para>
</para></description><returns><para><computeroutput>true</computeroutput> if to include an X-axis text label. </para></returns></method>
<method name="x_label_units"><type><classname>svg_2d_plot</classname> &amp;</type><parameter name="str"><paramtype>const std::string &amp;</paramtype></parameter><purpose>Set the text to add units to the X-axis label. </purpose></method>
<method name="x_label_units"><type>std::string</type><description><para>
</para></description><returns><para>the text to add units to the X-axis label. &lt;The label will only be shown if x_label_on() == true. </para></returns></method>
<method name="x_label_units_on"><type><classname>svg_2d_plot</classname> &amp;</type><parameter name="cmd"><paramtype>bool</paramtype></parameter><purpose>Set true if want X axis label to include units (as well as label like "length"). &lt;. </purpose><description><para><para><emphasis role="bold">See Also:</emphasis><para>x_label_units which also sets true. </para></para>
</para></description></method>
<method name="x_label_units_on"><type>bool</type><purpose>Set true if want X axis label to include units (as well as label like "length"). </purpose></method>
<method name="x_label_width"><type><classname>svg_2d_plot</classname> &amp;</type><parameter name="width"><paramtype>double</paramtype></parameter><purpose>Set the width (boldness) of X-axis label (including any units). (not recommended until browsers implement better). </purpose></method>
<method name="x_label_width"><type>double</type><description><para>
</para></description><returns><para>the width (boldness) of X-axis label (including any units). </para></returns></method>
<method name="x_labels_strip_e0s"><type><classname>svg_2d_plot</classname> &amp;</type><parameter name="cmd"><paramtype>bool</paramtype></parameter><purpose>Set if to strip redundant zeros, signs and exponents, for example, reducing "1.2e+000" to "1.2" This markedly reduces visual clutter, and is the default. </purpose></method>
<method name="x_major_grid_color"><type><classname>svg_2d_plot</classname> &amp;</type><parameter name="col"><paramtype>const <classname>svg_color</classname> &amp;</paramtype></parameter><purpose>Set the color of X-axis major grid lines. </purpose></method>
<method name="x_major_grid_color"><type><classname>svg_color</classname></type><purpose>Set the color of X-axis major grid lines. </purpose></method>
<method name="x_major_grid_on"><type><classname>svg_2d_plot</classname> &amp;</type><parameter name="is"><paramtype>bool</paramtype></parameter><purpose>If set true, will include a major X-axis grid. </purpose></method>
<method name="x_major_grid_on"><type>bool</type><description><para>
</para></description><returns><para>true if will include a major X-axis grid. </para></returns></method>
<method name="x_major_grid_width"><type><classname>svg_2d_plot</classname> &amp;</type><parameter name="w"><paramtype>double</paramtype></parameter><purpose>Set the width of X-axis major grid lines. </purpose></method>
<method name="x_major_grid_width"><type>double</type><description><para>
</para></description><returns><para>the color of X-axis major grid lines. </para></returns></method>
<method name="x_major_interval"><type><classname>svg_2d_plot</classname> &amp;</type><parameter name="inter"><paramtype>double</paramtype></parameter><purpose>Set the interval between X-axis major ticks. </purpose></method>
<method name="x_major_interval"><type>double</type><description><para>
</para></description><returns><para>the interval between X-axis major ticks. </para></returns></method>
<method name="x_major_label_rotation"><type><classname>svg_2d_plot</classname> &amp;</type><parameter name="rot"><paramtype>rotate_style</paramtype></parameter><description><para>Set rotation for X ticks major value labels. (Default horizontal). <para><emphasis role="bold">See Also:</emphasis><para>rotate_style </para></para>
</para></description></method>
<method name="x_major_label_rotation"><type>rotate_style</type><description><para>
<para><emphasis role="bold">See Also:</emphasis><para>rotate_style </para></para>
</para></description><returns><para>rotation for X ticks major value labels. </para></returns></method>
<method name="x_major_labels_side"><type><classname>svg_2d_plot</classname> &amp;</type><parameter name=""><paramtype>int</paramtype></parameter><description><para>Set which side (up, down or none) for major ticks label values: 

</para></description><returns><para>Reference to <classname alt="boost::svg::svg_2d_plot">svg_2d_plot</classname> to make chainable. </para></returns></method>
<method name="x_major_labels_side"><type>int</type><description><para>
</para></description><returns><para>side for label values for major ticks. </para></returns></method>
<method name="x_major_tick"><type><classname>svg_2d_plot</classname> &amp;</type><parameter name="d"><paramtype>double</paramtype></parameter><purpose>Set interval (Cartesian units) between major ticks. </purpose></method>
<method name="x_major_tick"><type>double</type><description><para>
</para></description><returns><para>interval (Cartesian units) between major ticks. </para></returns></method>
<method name="x_major_tick_color"><type><classname>svg_2d_plot</classname> &amp;</type><parameter name="col"><paramtype>const <classname>svg_color</classname> &amp;</paramtype></parameter><purpose>Set the color of X-axis major ticks. </purpose></method>
<method name="x_major_tick_color"><type><classname>svg_color</classname></type><description><para>
</para></description><returns><para>the color of X-axis major ticks. </para></returns></method>
<method name="x_major_tick_length"><type><classname>svg_2d_plot</classname> &amp;</type><parameter name="length"><paramtype>double</paramtype></parameter><purpose>Set length of X major ticks (SVG units, default pixels). </purpose></method>
<method name="x_major_tick_length"><type>double</type><purpose>Set length of X major ticks (SVG units, default pixels). </purpose></method>
<method name="x_major_tick_width"><type><classname>svg_2d_plot</classname> &amp;</type><parameter name="width"><paramtype>double</paramtype></parameter><purpose>Set width of X major ticks (SVG units, default pixels). </purpose></method>
<method name="x_major_tick_width"><type>double</type><purpose>Set width of X major ticks (SVG units, default pixels). </purpose></method>
<method name="x_max"><type><classname>svg_2d_plot</classname> &amp;</type><parameter name="x"><paramtype>double</paramtype></parameter><purpose>Set the maximum value on the X-axis. </purpose></method>
<method name="x_max"><type>double</type><purpose>autoscale set &amp; get parameters, &lt;Note: all these <emphasis>MUST</emphasis> preceed x_autoscale(data) call. </purpose><description><para>
</para></description><returns><para>the maximum value on the X-axis. </para></returns></method>
<method name="x_min"><type><classname>svg_2d_plot</classname> &amp;</type><parameter name="min_x"><paramtype>double</paramtype></parameter><purpose>Set the minimum value on the X-axis. </purpose></method>
<method name="x_min"><type>double</type><description><para>
</para></description><returns><para>the minimum value on the X-axis. </para></returns></method>
<method name="x_min_ticks"><type><classname>svg_2d_plot</classname> &amp;</type><parameter name="min_ticks"><paramtype>int</paramtype></parameter><purpose>Set X-axis autoscale to include at least minimum number of ticks (default = 6). </purpose></method>
<method name="x_min_ticks"><type>int</type><description><para>
</para></description><returns><para>X-axis autoscale minimum number of ticks. </para></returns></method>
<method name="x_minor_grid_color"><type><classname>svg_2d_plot</classname> &amp;</type><parameter name="col"><paramtype>const <classname>svg_color</classname> &amp;</paramtype></parameter><purpose>Set the color of X-axis minor grid lines. </purpose></method>
<method name="x_minor_grid_color"><type><classname>svg_color</classname></type><description><para>
</para></description><returns><para>the color of X-axis minor grid lines. </para></returns></method>
<method name="x_minor_grid_on"><type><classname>svg_2d_plot</classname> &amp;</type><parameter name="is"><paramtype>bool</paramtype></parameter><purpose>If set true, will include a minor X-axis grid. </purpose></method>
<method name="x_minor_grid_on"><type>bool</type><description><para>
</para></description><returns><para>true if will include a major X-axis grid. </para></returns></method>
<method name="x_minor_grid_width"><type><classname>svg_2d_plot</classname> &amp;</type><parameter name="w"><paramtype>double</paramtype></parameter><purpose>Set the width of X-axis minor grid lines. </purpose></method>
<method name="x_minor_grid_width"><type>double</type><description><para>
</para></description><returns><para>the width of X-axis minor grid lines. </para></returns></method>
<method name="x_minor_interval"><type>double</type><description><para>
</para></description><returns><para>interval between X minor ticks. </para></returns></method>
<method name="x_minor_interval"><type><classname>svg_2d_plot</classname> &amp;</type><parameter name="interval"><paramtype>double</paramtype></parameter><purpose>Set interval between X-axis minor ticks. </purpose></method>
<method name="x_minor_tick_color"><type><classname>svg_2d_plot</classname> &amp;</type><parameter name="col"><paramtype>const <classname>svg_color</classname> &amp;</paramtype></parameter><purpose>Set the color of X-axis minor ticks. </purpose></method>
<method name="x_minor_tick_color"><type><classname>svg_color</classname></type><description><para>
</para></description><returns><para>the color of X-axis minor ticks. </para></returns></method>
<method name="x_minor_tick_length"><type><classname>svg_2d_plot</classname> &amp;</type><parameter name="length"><paramtype>double</paramtype></parameter><purpose>Set length of X minor ticks (SVG units, default pixels). </purpose></method>
<method name="x_minor_tick_length"><type>double</type><description><para>
</para></description><returns><para>length of X minor ticks (SVG units, default pixels). </para></returns></method>
<method name="x_minor_tick_width"><type><classname>svg_2d_plot</classname> &amp;</type><parameter name="width"><paramtype>double</paramtype></parameter><purpose>Set width of X minor ticks (SVG units, default pixels). </purpose></method>
<method name="x_minor_tick_width"><type>double</type><description><para>
</para></description><returns><para>width of X minor ticks (SVG units, default pixels). </para></returns></method>
<method name="x_num_minor_ticks"><type><classname>svg_2d_plot</classname> &amp;</type><parameter name="num"><paramtype>unsigned int</paramtype></parameter><purpose>Set number of X-axis minor ticks between major ticks. </purpose></method>
<method name="x_num_minor_ticks"><type>unsigned int</type><description><para>
</para></description><returns><para>number of X-axis minor ticks between major ticks. </para></returns></method>
<method name="x_order_color"><type><classname>svg_2d_plot</classname> &amp;</type><parameter name="col"><paramtype>const <classname>svg_color</classname> &amp;</paramtype></parameter><purpose>Set the color of X order #, for example, the color of #42. </purpose></method>
<method name="x_order_color"><type><classname>svg_color</classname></type><description><para>
</para></description><returns><para>the color of X order #, for example, the color of #42. </para></returns></method>
<method name="x_order_on"><type><classname>svg_2d_plot</classname> &amp;</type><parameter name="b"><paramtype>bool</paramtype></parameter><purpose>Set true if to append append an order # to data point X values near data points markers. </purpose></method>
<method name="x_order_on"><type>bool</type><description><para>
</para></description><returns><para>true if to append an order # to data point X values near data points markers. </para></returns></method>
<method name="x_plusminus_color"><type><classname>svg_2d_plot</classname> &amp;</type><parameter name="col"><paramtype>const <classname>svg_color</classname> &amp;</paramtype></parameter><purpose>Set the color of X std_dev of value, for example, the color of 0.02 in "1.23 +-0.02 (9)". </purpose></method>
<method name="x_plusminus_color"><type><classname>svg_color</classname></type><description><para>
</para></description><returns><para>the color of X std_dev of value, for example, the color of 0.02 in "1.23 +-0.02 (9)". </para></returns></method>
<method name="x_plusminus_on"><type><classname>svg_2d_plot</classname> &amp;</type><parameter name="b"><paramtype>bool</paramtype></parameter><purpose>Set if to append std_dev estimate to data point X values near data points markers. </purpose></method>
<method name="x_plusminus_on"><type>bool</type><description><para>
</para></description><returns><para>true if to append std_dev estimate to data point X values near data points markers. </para></returns></method>
<method name="x_prefix"><type>const std::string</type><description><para>
</para></description><returns><para>the prefix. </para></returns></method>
<method name="x_range"><type><classname>svg_2d_plot</classname> &amp;</type><parameter name="min_x"><paramtype>double</paramtype></parameter><parameter name="max_x"><paramtype>double</paramtype></parameter><description><para>Set the range of values on the X-axis. The minimum and maximum values must be finite and not too near to the minima or maxima that can be represented by floating point double, std::numeric_limits&lt;double&gt;::min() or std::numeric_limits&lt;double&gt;::max(), and the range must not be too small. </para></description></method>
<method name="x_range"><type>std::pair&lt; double, double &gt;</type><description><para>
</para></description><returns><para>the range of values on the X-axis. </para></returns></method>
<method name="x_separator"><type>const std::string</type><description><para>
</para></description><returns><para>the separator, perhaps including Unicode. </para></returns></method>
<method name="x_size"><type><classname>svg_2d_plot</classname> &amp;</type><parameter name="i"><paramtype>unsigned int</paramtype></parameter><purpose>Set SVG image X-axis size (SVG units, default pixels). </purpose></method>
<method name="x_size"><type>unsigned int</type><description><para>
</para></description><returns><para>SVG image X-axis size as horizontal width (SVG units, default pixels). </para></returns></method>
<method name="x_steps"><type><classname>svg_2d_plot</classname> &amp;</type><parameter name="steps"><paramtype>int</paramtype></parameter><description><para>Set autoscale to set ticks in steps multiples of:<sbr/>
2,4,6,8,10, if 2<sbr/>
or 1,5,10 if 5<sbr/>
or 2,5,10 if 10.<sbr/>
default = 0 (none). <note><para>: Must <emphasis role="bold">preceed</emphasis> x_autoscale(data) call). </para></note>
</para></description></method>
<method name="x_steps"><type>int</type><description><para>
</para></description><returns><para>autoscale to set ticks in steps. </para></returns></method>
<method name="x_suffix"><type>const std::string</type><description><para>
</para></description><returns><para>the suffix (only used if separator != "") </para></returns></method>
<method name="x_ticks"><type><classname>ticks_labels_style</classname> &amp;</type><description><para>
</para></description><returns><para><computeroutput>true</computeroutput> if ticks are to be marked on the X-axis. </para></returns></method>
<method name="x_ticks_down_on"><type><classname>svg_2d_plot</classname> &amp;</type><parameter name="cmd"><paramtype>bool</paramtype></parameter><purpose>Set true if Y major ticks should mark upwards. </purpose></method>
<method name="x_ticks_down_on"><type>bool</type><description><para>
</para></description><returns><para>true if Y major ticks should mark upwards. </para></returns></method>
<method name="x_ticks_on_window_or_axis"><type><classname>svg_2d_plot</classname> &amp;</type><parameter name=""><paramtype>int</paramtype></parameter><description><para>

</para></description><returns><para>reference to <classname alt="boost::svg::svg_2d_plot">svg_2d_plot</classname> to make chainable. </para></returns></method>
<method name="x_ticks_on_window_or_axis"><type>int</type><description><para>
</para></description><returns><para>if ticks on the plot window or on the X-axis. </para></returns></method>
<method name="x_ticks_up_on"><type><classname>svg_2d_plot</classname> &amp;</type><parameter name="cmd"><paramtype>bool</paramtype></parameter><purpose>Set true if X major ticks should mark upwards. </purpose></method>
<method name="x_ticks_up_on"><type>bool</type><description><para>
</para></description><returns><para>true if X major ticks should mark upwards. </para></returns></method>
<method name="x_ticks_values_color"><type><classname>svg_2d_plot</classname> &amp;</type><parameter name="col"><paramtype>const <classname>svg_color</classname> &amp;</paramtype></parameter><purpose>Set X axis tick value label color. </purpose></method>
<method name="x_ticks_values_color"><type><classname>svg_color</classname></type><description><para>
</para></description><returns><para>X-axis ticks value label color. </para></returns></method>
<method name="x_ticks_values_font_family"><type><classname>svg_2d_plot</classname> &amp;</type><parameter name="family"><paramtype>const std::string &amp;</paramtype></parameter><description><para>Set X ticks value label font family. Available fonts depend on the program rendering the SVG XML, usually a browser. The default font (usually "default_font") is used if a render program does not provide the font specified. These are probably usable: <programlisting language="c++">"arial", "impact", "courier", "lucida console",  "Lucida sans unicode", "verdana", "calibri", "century",
"lucida calligraphy", "tahoma", "vivaldi", "informal roman", "lucida handwriting", "lucida bright", "helvetica"
</programlisting> </para></description></method>
<method name="x_ticks_values_font_family"><type>const std::string &amp;</type><description><para>
</para></description><returns><para>X ticks value label font family. </para></returns></method>
<method name="x_ticks_values_font_size"><type><classname>svg_2d_plot</classname> &amp;</type><parameter name="i"><paramtype>unsigned int</paramtype></parameter><purpose>Set X ticks value label font size (svg units, default pixels). </purpose></method>
<method name="x_ticks_values_font_size"><type>unsigned int</type><purpose>Set X ticks value label font size (svg units, default pixels). </purpose></method>
<method name="x_ticks_values_ioflags"><type><classname>svg_2d_plot</classname> &amp;</type><parameter name="f"><paramtype>std::ios_base::fmtflags</paramtype></parameter><purpose>Set iostream format flags of data point X values near data points markers. </purpose></method>
<method name="x_ticks_values_ioflags"><type>std::ios_base::fmtflags</type><description><para>
</para></description><returns><para>iostream format flags of data point X values near data points markers. </para></returns></method>
<method name="x_ticks_values_precision"><type><classname>svg_2d_plot</classname> &amp;</type><parameter name="p"><paramtype>int</paramtype></parameter><purpose>Set iostream decimal digits precision of data point X values near data points markers. </purpose></method>
<method name="x_ticks_values_precision"><type>int</type><description><para>
</para></description><returns><para>iostream decimal digits precision of data point X values near data points markers. </para></returns></method>
<method name="x_tight"><type><classname>svg_2d_plot</classname> &amp;</type><parameter name="tight"><paramtype>double</paramtype></parameter><purpose>Set tolerance to autoscale to permit data points slightly outside both end ticks. </purpose></method>
<method name="x_tight"><type>double</type><description><para>
</para></description><returns><para>tolerance given to autoscale to permit data points slightly outside both end ticks. &lt;Get results of autoscaling. </para></returns></method>
<method name="x_value_font_size"><type><classname>svg_2d_plot</classname> &amp;</type><parameter name="i"><paramtype>unsigned int</paramtype></parameter><purpose>Set X tick value label font size (svg units, default pixels). </purpose></method>
<method name="x_value_font_size"><type>unsigned int</type><description><para>
</para></description><returns><para>X tick value label font size (svg units, default pixels). </para></returns></method>
<method name="x_value_ioflags"><type><classname>svg_2d_plot</classname> &amp;</type><parameter name="flags"><paramtype>std::ios_base::fmtflags</paramtype></parameter><description><para>Set iostream std::ios::fmtflags for X value label (default decimal == 0X201). Mainly useful for changing to scientific, fixed or hexadecimal format. For example: <programlisting language="c++">myplot.x_value_ioflags(std::ios::dec | std::ios::scientific)
</programlisting> </para></description></method>
<method name="x_value_ioflags"><type>std::ios_base::fmtflags</type><description><para>
</para></description><returns><para>stream std::ios::fmtflags for control of format of X value labels. </para></returns></method>
<method name="x_value_precision"><type><classname>svg_2d_plot</classname> &amp;</type><parameter name="digits"><paramtype>int</paramtype></parameter><description><para>Set precision of X-tick label values in decimal digits (default 3). 3 decimal digits precision is sufficient for small images. 4 or 5 decimal digits precision will give more cluttered plots. If the range of labels is very small, then more digits will be essential. </para></description></method>
<method name="x_value_precision"><type>int</type><description><para>
</para></description><returns><para>Precision of X-tick label values in decimal digits </para></returns></method>
<method name="x_values_color"><type><classname>svg_2d_plot</classname> &amp;</type><parameter name="col"><paramtype>const <classname>svg_color</classname> &amp;</paramtype></parameter><purpose>Set the color of data point X values near data points markers. </purpose></method>
<method name="x_values_color"><type><classname>svg_color</classname></type><description><para>
</para></description><returns><para>the color of data point X values near data points markers. </para></returns></method>
<method name="x_values_font_family"><type><classname>svg_2d_plot</classname> &amp;</type><parameter name="family"><paramtype>const std::string &amp;</paramtype></parameter><purpose>Set font family of data point X values near data points markers. </purpose></method>
<method name="x_values_font_family"><type>const std::string &amp;</type><description><para>
</para></description><returns><para>font family of data point X values near data points markers. </para></returns></method>
<method name="x_values_font_size"><type><classname>svg_2d_plot</classname> &amp;</type><parameter name="i"><paramtype>unsigned int</paramtype></parameter><purpose>Set font size of data point X values near data points markers. </purpose></method>
<method name="x_values_font_size"><type>unsigned int</type><description><para>
</para></description><returns><para>font size of data point X values near data points markers. </para></returns></method>
<method name="x_values_ioflags"><type><classname>svg_2d_plot</classname> &amp;</type><parameter name="f"><paramtype>std::ios_base::fmtflags</paramtype></parameter><purpose>Set iostream format flags of data point X values near data points markers. </purpose></method>
<method name="x_values_ioflags"><type>std::ios_base::fmtflags</type><description><para>
</para></description><returns><para>iostream format flags of data point X values near data points markers. </para></returns></method>
<method name="x_values_on"><type><classname>svg_2d_plot</classname> &amp;</type><parameter name="b"><paramtype>bool</paramtype></parameter><purpose>Set true to show data point values near data points markers. </purpose></method>
<method name="x_values_on"><type>bool</type><description><para>
</para></description><returns><para>true if to show data point values near data points markers. </para></returns></method>
<method name="x_values_precision"><type><classname>svg_2d_plot</classname> &amp;</type><parameter name="p"><paramtype>int</paramtype></parameter><purpose>Set iostream decimal digits precision of data point X values near data points markers. </purpose></method>
<method name="x_values_precision"><type>int</type><description><para>
</para></description><returns><para>iostream decimal digits precision of data point X values near data points markers. </para></returns></method>
<method name="x_values_rotation"><type><classname>svg_2d_plot</classname> &amp;</type><parameter name="rotate"><paramtype>rotate_style</paramtype></parameter><description><para>
</para></description><returns><para>the rotation (rotate_style) of data point X values near data points markers. </para></returns></method>
<method name="x_values_rotation"><type>int</type><purpose>Set the rotation (rotate_style) of data point X values near data points markers. </purpose></method>
<method name="x_with_zero"><type><classname>svg_2d_plot</classname> &amp;</type><parameter name="b"><paramtype>bool</paramtype></parameter><purpose>Set X-axis autoscale to include zero (default = false). </purpose></method>
<method name="x_with_zero"><type>bool</type><description><para>
</para></description><returns><para>true if X-axis autoscale to include zero (default = false). </para></returns></method>
<method name="xy_autoscale"><type><classname>svg_2d_plot</classname> &amp;</type><template>
          <template-type-parameter name="T"/>
        </template><parameter name="container"><paramtype>const T &amp;</paramtype></parameter><description><para>Whole data series to use to calculate autoscaled values for <emphasis role="bold">both</emphasis> X and Y axes.</para><para>
</para></description><returns><para>reference to <classname alt="boost::svg::svg_2d_plot">svg_2d_plot</classname> to make chainable. </para></returns></method>
<method name="xy_autoscale"><type>bool</type><description><para>
</para></description><returns><para><computeroutput>true</computeroutput> if to autoscale both X and Y Axes. </para></returns></method>
<method name="xy_values_on"><type>bool</type><description><para>
</para></description><returns><para><computeroutput>true</computeroutput> if values of X and Y data points are shown (for example: 1.23). </para></returns></method>
<method name="xy_values_on"><type><classname>svg_2d_plot</classname> &amp;</type><parameter name="b"><paramtype>bool</paramtype></parameter><description><para>Set <computeroutput>true</computeroutput> if values of X and Y data points are to be shown (as 1.23).</para><para>(Will override x_values_on and/or y_values_on that would otherwise cause overwriting).</para><para>
</para></description><returns><para>reference to <classname alt="boost::svg::svg_2d_plot">svg_2d_plot</classname> to make chainable. </para></returns></method>
<method name="y_addlimits_color"><type><classname>svg_2d_plot</classname> &amp;</type><parameter name="col"><paramtype>const <classname>svg_color</classname> &amp;</paramtype></parameter><description><para>Set color of Y confidence interval.</para><para>
</para></description><returns><para>Reference to <classname alt="boost::svg::svg_2d_plot">svg_2d_plot</classname> to make chainable. </para></returns></method>
<method name="y_addlimits_color"><type>const <classname>svg_color</classname></type><description><para>
</para></description><returns><para>Color of Y confidence interval. </para></returns></method>
<method name="y_addlimits_on"><type>bool</type><description><para>
</para></description><returns><para><computeroutput>true</computeroutput> if values of Y data points are to include confidence interval. </para></returns></method>
<method name="y_addlimits_on"><type><classname>svg_2d_plot</classname> &amp;</type><parameter name="b"><paramtype>bool</paramtype></parameter><description><para>Set true if values of Y data points are to include confidence interval.</para><para>
</para></description><returns><para>Reference to <classname alt="boost::svg::svg_2d_plot">svg_2d_plot</classname> to make chainable. </para></returns></method>
<method name="y_autoscale"><type>bool</type><description><para>
</para></description><returns><para><computeroutput>true</computeroutput> if to autoscale minimum and maximum for Y-axis. </para></returns></method>
<method name="y_autoscale"><type><classname>svg_2d_plot</classname> &amp;</type><parameter name="b"><paramtype>bool</paramtype></parameter><description><para>Set <computeroutput>true</computeroutput> if to autoscale minimum and maximum for Y-axis.</para><para>
</para></description><returns><para>Reference to <classname alt="boost::svg::svg_2d_plot">svg_2d_plot</classname> to make chainable. </para></returns></method>
<method name="y_autoscale"><type><classname>svg_2d_plot</classname> &amp;</type><parameter name="minimum"><paramtype>double</paramtype><description><para>Value to use for autoscale that will be rounded down. </para></description></parameter><parameter name="maximum"><paramtype>double</paramtype><description><para>Value to use for autoscale that will be rounded up.</para></description></parameter><description><para>Set minimum &amp; maximum Y values to use to autoscale Y-axis. 

</para></description><returns><para>reference to <classname alt="boost::svg::svg_2d_plot">svg_2d_plot</classname> to make chainable. </para></returns></method>
<method name="y_autoscale"><type><classname>svg_2d_plot</classname> &amp;</type><parameter name="p"><paramtype>std::pair&lt; double, double &gt;</paramtype></parameter><description><para>Set Y min &amp; max values as a <emphasis role="bold">pair</emphasis> to use to autoscale.</para><para>
</para></description><returns><para>reference to <classname alt="boost::svg::svg_2d_plot">svg_2d_plot</classname> to make chainable. </para></returns></method>
<method name="y_autoscale"><type><classname>svg_2d_plot</classname> &amp;</type><template>
          <template-type-parameter name="T"><purpose><para>an STL container: array, vector ... </para></purpose></template-type-parameter>
        </template><parameter name="begin"><paramtype>const T &amp;</paramtype></parameter><parameter name="end"><paramtype>const T &amp;</paramtype></parameter><description><para>
</para></description><description><para>Data series using iterator's range to use to calculate autoscaled values.</para><para>
</para></description><returns><para>reference to <classname alt="boost::svg::svg_2d_plot">svg_2d_plot</classname> to make chainable. </para></returns></method>
<method name="y_autoscale"><type><classname>svg_2d_plot</classname> &amp;</type><template>
          <template-type-parameter name="T"/>
        </template><parameter name="container"><paramtype>const T &amp;</paramtype></parameter><description><para>Whole data series to use to calculate autoscaled values. </para></description></method>
<method name="y_axis"><type><classname>axis_line_style</classname> &amp;</type><description><para>
</para></description><returns><para><computeroutput>true</computeroutput> if vertical Y-axis line to be drawn. </para></returns></method>
<method name="y_axis_color"><type><classname>svg_2d_plot</classname> &amp;</type><parameter name="col"><paramtype>const <classname>svg_color</classname> &amp;</paramtype></parameter><description><para>Set Y-axis linecolor. (set only stroke color).</para><para>
</para></description><returns><para>Reference to <classname alt="boost::svg::svg_2d_plot">svg_2d_plot</classname> to make chainable. </para></returns></method>
<method name="y_axis_color"><type><classname>svg_color</classname></type><description><para>
</para></description><returns><para>Ty_axis stroke color. </para></returns></method>
<method name="y_axis_label_color"><type><classname>svg_2d_plot</classname> &amp;</type><parameter name="col"><paramtype>const <classname>svg_color</classname> &amp;</paramtype></parameter><description><para>Set y_axis stroke color. <note><para>Setting the stroke color may produce fuzzy characters :-(</para></note>

</para></description><returns><para>Reference to <classname alt="boost::svg::svg_2d_plot">svg_2d_plot</classname> to make chainable. </para></returns></method>
<method name="y_axis_label_color"><type><classname>svg_color</classname></type><description><para>
</para></description><returns><para>Y-axis label stroke color. </para></returns></method>
<method name="y_axis_on"><type><classname>svg_2d_plot</classname> &amp;</type><parameter name="is"><paramtype>bool</paramtype></parameter><purpose>If set true, draw a vertical Y-axis line. </purpose></method>
<method name="y_axis_on"><type>bool</type><description><para>
</para></description><returns><para>true if will draw a horizontal X-axis line. </para></returns></method>
<method name="y_axis_position"><type>const std::string</type><description><para>
</para></description><returns><para>Text information about Y-axis position. </para></returns></method>
<method name="y_axis_value_color"><type><classname>svg_2d_plot</classname> &amp;</type><parameter name="col"><paramtype>const <classname>svg_color</classname> &amp;</paramtype></parameter><description><para>Set color of Y-axis <emphasis role="bold">value</emphasis> labels.</para><para>
</para></description><returns><para>Reference to <classname alt="boost::svg::svg_2d_plot">svg_2d_plot</classname> to make chainable. </para></returns></method>
<method name="y_axis_value_color"><type><classname>svg_color</classname></type><description><para>
</para></description><returns><para>Color of Y-axis tick value labels. </para></returns></method>
<method name="y_axis_width"><type><classname>svg_2d_plot</classname> &amp;</type><parameter name="width"><paramtype>double</paramtype></parameter><description><para>Set width of Y-axis line.</para><para>
</para></description><returns><para>Reference to <classname alt="boost::svg::svg_2d_plot">svg_2d_plot</classname> to make chainable. </para></returns></method>
<method name="y_axis_width"><type>double</type><description><para>
</para></description><returns><para>Width of Y-axis line. </para></returns></method>
<method name="y_decor"><type><classname>svg_2d_plot</classname> &amp;</type><parameter name="pre"><paramtype>const std::string &amp;</paramtype></parameter><parameter name="sep"><paramtype>const std::string &amp;</paramtype><default>""</default></parameter><parameter name="suf"><paramtype>const std::string &amp;</paramtype><default>""</default></parameter><purpose>Set prefix, separator and suffix for Y-axis.<sbr/>
 <emphasis role="bold">Example:</emphasis> </purpose><description><para><programlisting language="c++">my_1d_plot.x_decor("[ x = ", "", "&amp;#x00A0;sec]");
</programlisting> <note><para>If you want a space, you must use a <emphasis role="bold">Unicode</emphasis> space. </para></note>
</para></description><description><para>
</para></description><returns><para>Reference to <classname alt="boost::svg::svg_2d_plot">svg_2d_plot</classname> to make chainable. </para></returns></method>
<method name="y_df_color"><type><classname>svg_2d_plot</classname> &amp;</type><parameter name="col"><paramtype>const <classname>svg_color</classname> &amp;</paramtype></parameter><description><para>Set color of Y degrees of freedom.</para><para>
</para></description><returns><para>Reference to <classname alt="boost::svg::svg_2d_plot">svg_2d_plot</classname> to make chainable. </para></returns></method>
<method name="y_df_color"><type>const <classname>svg_color</classname></type><description><para>
</para></description><returns><para>Color of Y degrees of freedom. </para></returns></method>
<method name="y_df_on"><type>bool</type><description><para>
</para></description><returns><para><computeroutput>true</computeroutput> if values of Y data points are to include degrees of freedom estimates. </para></returns></method>
<method name="y_df_on"><type><classname>svg_2d_plot</classname> &amp;</type><parameter name="b"><paramtype>bool</paramtype></parameter><description><para>Set <computeroutput>true</computeroutput> if values of Y data points are to include degrees of freedom estimates.</para><para>
</para></description><returns><para>Reference to <classname alt="boost::svg::svg_2d_plot">svg_2d_plot</classname> to make chainable. </para></returns></method>
<method name="y_label"><type><classname>svg_2d_plot</classname> &amp;</type><parameter name="str"><paramtype>const std::string &amp;</paramtype></parameter><purpose>Set the text for the Y-axis label (and set y_label_on(true)). </purpose></method>
<method name="y_label"><type>std::string</type><description><para>
</para></description><returns><para>the text for the Y-axis label. &lt; The label will only be shown if y_label_on() == true. </para></returns></method>
<method name="y_label_axis"><type><classname>svg_2d_plot</classname> &amp;</type><parameter name="str"><paramtype>const std::string &amp;</paramtype></parameter><description><para>Set text to label Y-axis.</para><para>
</para></description><returns><para>Reference to <classname alt="boost::svg::svg_2d_plot">svg_2d_plot</classname> to make chainable. </para></returns></method>
<method name="y_label_axis"><type>std::string</type><description><para>
</para></description><returns><para>text to label Y-axis. </para></returns></method>
<method name="y_label_color"><type><classname>svg_2d_plot</classname> &amp;</type><parameter name="col"><paramtype>const <classname>svg_color</classname> &amp;</paramtype></parameter><purpose>Set the color of Y-axis label (including any units). </purpose></method>
<method name="y_label_color"><type><classname>svg_color</classname></type><description><para>
</para></description><returns><para>the color of Y-axis label (including any units). </para></returns></method>
<method name="y_label_font_family"><type><classname>svg_2d_plot</classname> &amp;</type><parameter name="family"><paramtype>const std::string &amp;</paramtype></parameter><description><para>Set Y-axis label text font family (for example: "Lucida Sans Unicode"). Available fonts depend on the program rendering the SVG XML, usually a browser. The default font (usually "Lucida Sans Unicode") is used if a renderer (in a browser or a converter to PDF like RenderX) does not provide the font specified. A Unicode font has a better chance of providing Unicode symbols, for example, specified as <computeroutput>&amp;#x221E</computeroutput>;. These fonts are probably usable: <programlisting language="c++">"arial", "impact", "courier", "lucida console",  "Lucida Sans Unicode", "Verdana", "calibri", "century",
"lucida calligraphy", "tahoma", "vivaldi", "informal roman", "lucida handwriting", "lucida bright", "helvetica"
</programlisting></para><para>
</para></description><returns><para>Reference to <classname alt="boost::svg::svg_2d_plot">svg_2d_plot</classname> to make chainable. </para></returns></method>
<method name="y_label_font_family"><type>const std::string &amp;</type><description><para>
</para></description><returns><para>Font family for label on Y-axis. </para></returns></method>
<method name="y_label_font_size"><type><classname>svg_2d_plot</classname> &amp;</type><parameter name="i"><paramtype>unsigned int</paramtype></parameter><description><para>Set Y-axis label text font size. </para></description></method>
<method name="y_label_font_size"><type>unsigned int</type><description><para>
</para></description><returns><para>Y-axis label text font size. </para></returns></method>
<method name="y_label_on"><type><classname>svg_2d_plot</classname> &amp;</type><parameter name="cmd"><paramtype>bool</paramtype></parameter><description><para>Set <computeroutput>true</computeroutput> if to label Y-axis with name (and units).</para><para>
</para></description><returns><para>Reference to <classname alt="boost::svg::svg_2d_plot">svg_2d_plot</classname> to make chainable. </para></returns></method>
<method name="y_label_on"><type>bool</type><description><para>
</para></description><returns><para><computeroutput>true</computeroutput> if Y-axis is to labelled. </para></returns></method>
<method name="y_label_units"><type><classname>svg_2d_plot</classname> &amp;</type><parameter name="str"><paramtype>const std::string &amp;</paramtype></parameter><purpose>Set the text to add units to the Y-axis label. </purpose></method>
<method name="y_label_units"><type>std::string</type><description><para>
</para></description><returns><para>the text to add units to the X-axis label. </para></returns></method>
<method name="y_label_units_on"><type><classname>svg_2d_plot</classname> &amp;</type><parameter name="b"><paramtype>bool</paramtype></parameter><description><para>Set <computeroutput>true</computeroutput> to add <emphasis role="bold">units</emphasis> text to the Y-axis label. <para><emphasis role="bold">See Also:</emphasis><para><computeroutput>svg_2d_plot::y_label_units</computeroutput> </para></para>

</para></description><returns><para>Reference to <classname alt="boost::svg::svg_2d_plot">svg_2d_plot</classname> to make chainable. </para></returns></method>
<method name="y_label_units_on"><type>bool</type><description><para>
</para></description><returns><para><computeroutput>true</computeroutput> if to add units text to the Y-axis label. </para></returns></method>
<method name="y_label_weight"><type><classname>svg_2d_plot</classname> &amp;</type><parameter name="s"><paramtype>std::string</paramtype></parameter><description><para>Set Y-axis label text font weight (for example: "bold"). ("bold" is only one that works so far, and quality may be poor for some browsers).</para><para>
</para></description><returns><para>Reference to <classname alt="boost::svg::svg_2d_plot">svg_2d_plot</classname> to make chainable. </para></returns></method>
<method name="y_label_weight"><type>const std::string &amp;</type><description><para>
</para></description><returns><para>Y-axis label text font weight (for example: "bold"). </para></returns></method>
<method name="y_label_width"><type><classname>svg_2d_plot</classname> &amp;</type><parameter name="width"><paramtype>double</paramtype></parameter><description><para>Set width of Y-axis value labels.</para><para>
</para></description><returns><para>Reference to <classname alt="boost::svg::svg_2d_plot">svg_2d_plot</classname> to make chainable. </para></returns></method>
<method name="y_label_width"><type>double</type><description><para>
</para></description><returns><para>Width of Y-axis value labels. </para></returns></method>
<method name="y_labels_strip_e0s"><type><classname>svg_2d_plot</classname> &amp;</type><parameter name="cmd"><paramtype>bool</paramtype></parameter><description><para>If <computeroutput>true</computeroutput> then strip unnecessary zeros, signs from labels.</para><para>
</para></description><returns><para>Reference to <classname alt="boost::svg::svg_2d_plot">svg_2d_plot</classname> to make chainable. </para></returns></method>
<method name="y_labels_strip_e0s"><type>bool</type><description><para>
</para></description><returns><para><computeroutput>true</computeroutput> if to strip unnecessary zeros, signs from labels. </para></returns></method>
<method name="y_major_grid_color"><type><classname>svg_2d_plot</classname> &amp;</type><parameter name="col"><paramtype>const <classname>svg_color</classname> &amp;</paramtype></parameter><description><para>Set color of Y major grid lines.</para><para>
</para></description><returns><para>Reference to <classname alt="boost::svg::svg_2d_plot">svg_2d_plot</classname> to make chainable. </para></returns></method>
<method name="y_major_grid_color"><type>const <classname>svg_color</classname></type><description><para>
</para></description><returns><para>Color of Y major grid lines. </para></returns></method>
<method name="y_major_grid_on"><type><classname>svg_2d_plot</classname> &amp;</type><parameter name="is"><paramtype>bool</paramtype></parameter><description><para>Set true to include major grid lines.</para><para>
</para></description><returns><para>Reference to <classname alt="boost::svg::svg_2d_plot">svg_2d_plot</classname> to make chainable. </para></returns></method>
<method name="y_major_grid_on"><type>bool</type><description><para>
</para></description><returns><para>true to include major grid lines. </para></returns></method>
<method name="y_major_grid_width"><type><classname>svg_2d_plot</classname> &amp;</type><parameter name="width"><paramtype>double</paramtype></parameter><description><para>Set width of major grid lines.</para><para>
</para></description><returns><para>Reference to <classname alt="boost::svg::svg_2d_plot">svg_2d_plot</classname> to make chainable. </para></returns></method>
<method name="y_major_grid_width"><type>double</type><description><para>Set width of major grid lines. </para></description></method>
<method name="y_major_interval"><type>double</type><description><para>
</para></description><returns><para>major interval between ticks on Y-axis. </para></returns></method>
<method name="y_major_interval"><type><classname>svg_2d_plot</classname> &amp;</type><parameter name="inter"><paramtype>double</paramtype></parameter><description><para>Set major interval between ticks on Y-axis.</para><para>
</para></description><returns><para>reference to <classname alt="boost::svg::svg_2d_plot">svg_2d_plot</classname> to make chainable. </para></returns></method>
<method name="y_major_label_rotation"><type><classname>svg_2d_plot</classname> &amp;</type><parameter name="rot"><paramtype>rotate_style</paramtype><description><para>Default orientation is horizontal. </para></description></parameter><description><para>Rotation or orientation of labels for major ticks on vertical Y-axis line. 
<para><emphasis role="bold">See Also:</emphasis><para><computeroutput>rotate_style</computeroutput> for possible values: horizontal, uphill...</para></para>

</para></description><returns><para>Reference to <classname alt="boost::svg::svg_2d_plot">svg_2d_plot</classname> to make chainable. </para></returns></method>
<method name="y_major_label_rotation"><type>int</type><description><para>
</para></description><returns><para>Rotation of Y-axis major tick labels. </para></returns></method>
<method name="y_major_labels_side"><type><classname>svg_2d_plot</classname> &amp;</type><parameter name="place"><paramtype>int</paramtype></parameter><description><para>Position of labels for major ticks on vertical Y-axis line. <itemizedlist>
<listitem><para><computeroutput>side</computeroutput> &gt; 0 label to left of Y-axis line (default), </para></listitem>
<listitem><para><computeroutput>side</computeroutput> = 0 (false) means no major tick labels on Y-axis. </para></listitem>
<listitem><para><computeroutput>side</computeroutput> &gt; 0 means to right of Y-axis line.</para></listitem>
</itemizedlist>

</para></description><returns><para>Reference to <classname alt="boost::svg::svg_2d_plot">svg_2d_plot</classname> to make chainable. </para></returns></method>
<method name="y_major_labels_side"><type>int</type><description><para>
</para></description><returns><para>Position of labels (if any) for major ticks on vertical Y-axis line. </para></returns></method>
<method name="y_major_tick_color"><type><classname>svg_2d_plot</classname> &amp;</type><parameter name="col"><paramtype>const <classname>svg_color</classname> &amp;</paramtype></parameter><description><para>Set color of Y major tick lines.</para><para>
</para></description><returns><para>Reference to <classname alt="boost::svg::svg_2d_plot">svg_2d_plot</classname> to make chainable. </para></returns></method>
<method name="y_major_tick_color"><type>const <classname>svg_color</classname></type><description><para>
</para></description><returns><para>Color of Y major tick lines. </para></returns></method>
<method name="y_major_tick_length"><type>double</type><description><para>
</para></description><returns><para>Major tick length on Y-axis. </para></returns></method>
<method name="y_major_tick_length"><type><classname>svg_2d_plot</classname> &amp;</type><parameter name="length"><paramtype>double</paramtype></parameter><description><para>Set major tick length on Y-axis.</para><para>
</para></description><returns><para>Reference to <classname alt="boost::svg::svg_2d_plot">svg_2d_plot</classname> to make chainable. </para></returns></method>
<method name="y_major_tick_width"><type><classname>svg_2d_plot</classname> &amp;</type><parameter name="width"><paramtype>double</paramtype></parameter><description><para>Set width of major ticks on Y-axis.</para><para>
</para></description><returns><para>reference to <classname alt="boost::svg::svg_2d_plot">svg_2d_plot</classname> to make chainable. </para></returns></method>
<method name="y_major_tick_width"><type>double</type><description><para>
</para></description><returns><para>Width of major ticks on Y-axis. </para></returns></method>
<method name="y_max"><type>double</type><description><para>
</para></description><returns><para>Maximum for Y-axis. </para></returns></method>
<method name="y_min"><type>double</type><description><para>
</para></description><returns><para>Minimum for Y-axis. </para></returns></method>
<method name="y_minor_grid_color"><type><classname>svg_2d_plot</classname> &amp;</type><parameter name="col"><paramtype>const <classname>svg_color</classname> &amp;</paramtype></parameter><description><para>Set color of Y minor grid lines.</para><para>
</para></description><returns><para>Reference to <classname alt="boost::svg::svg_2d_plot">svg_2d_plot</classname> to make chainable. </para></returns></method>
<method name="y_minor_grid_color"><type>const <classname>svg_color</classname></type><description><para>
</para></description><returns><para>Color of Y minor grid lines. </para></returns></method>
<method name="y_minor_grid_on"><type><classname>svg_2d_plot</classname> &amp;</type><parameter name="is"><paramtype>bool</paramtype></parameter><description><para>Set true to include minor grid lines.</para><para>
</para></description><returns><para>Reference to <classname alt="boost::svg::svg_2d_plot">svg_2d_plot</classname> to make chainable. </para></returns></method>
<method name="y_minor_grid_on"><type>bool</type><description><para>Set true to include minor grid lines. </para></description></method>
<method name="y_minor_grid_width"><type><classname>svg_2d_plot</classname> &amp;</type><parameter name="width"><paramtype>double</paramtype></parameter><description><para>Set width of minor grid lines.</para><para>
</para></description><returns><para>reference to <classname alt="boost::svg::svg_2d_plot">svg_2d_plot</classname> to make chainable. </para></returns></method>
<method name="y_minor_grid_width"><type>double</type><description><para>
</para></description><returns><para>Width of minor grid lines. </para></returns></method>
<method name="y_minor_interval"><type>double</type><description><para>
</para></description><returns><para>interval between Y minor ticks. </para></returns></method>
<method name="y_minor_tick_color"><type><classname>svg_2d_plot</classname> &amp;</type><parameter name="col"><paramtype>const <classname>svg_color</classname> &amp;</paramtype></parameter><description><para>Set color of Y minor tick lines.</para><para>
</para></description><returns><para>Reference to <classname alt="boost::svg::svg_2d_plot">svg_2d_plot</classname> to make chainable. </para></returns></method>
<method name="y_minor_tick_color"><type>const <classname>svg_color</classname></type><description><para>
</para></description><returns><para>Color of Y minor tick lines. </para></returns></method>
<method name="y_minor_tick_length"><type><classname>svg_2d_plot</classname> &amp;</type><parameter name="length"><paramtype>double</paramtype></parameter><description><para>Set minor tick length on Y-axis.</para><para>
</para></description><returns><para>Reference to <classname alt="boost::svg::svg_2d_plot">svg_2d_plot</classname> to make chainable. </para></returns></method>
<method name="y_minor_tick_length"><type>double</type><description><para>
</para></description><returns><para>Minor tick length on Y-axis. </para></returns></method>
<method name="y_minor_tick_width"><type><classname>svg_2d_plot</classname> &amp;</type><parameter name="width"><paramtype>double</paramtype></parameter><description><para>Set width of minor ticks on Y-axis.</para><para>
</para></description><returns><para>Reference to <classname alt="boost::svg::svg_2d_plot">svg_2d_plot</classname> to make chainable. </para></returns></method>
<method name="y_minor_tick_width"><type>double</type><description><para>
</para></description><returns><para>Width of minor ticks on Y-axis. </para></returns></method>
<method name="y_num_minor_ticks"><type><classname>svg_2d_plot</classname> &amp;</type><parameter name="num"><paramtype>unsigned int</paramtype></parameter><description><para>Set number of minor ticks on Y-axis.</para><para>
</para></description><returns><para>Reference to <classname alt="boost::svg::svg_2d_plot">svg_2d_plot</classname> to make chainable. </para></returns></method>
<method name="y_num_minor_ticks"><type>unsigned int</type><description><para>
</para></description><returns><para>Number of minor ticks on Y-axis. </para></returns></method>
<method name="y_plusminus_color"><type><classname>svg_2d_plot</classname> &amp;</type><parameter name="col"><paramtype>const <classname>svg_color</classname> &amp;</paramtype></parameter><description><para>
</para></description><description><para>Set color of Y uncertainty of value.</para><para>
</para></description><returns><para>Reference to <classname alt="boost::svg::svg_2d_plot">svg_2d_plot</classname> to make chainable. </para></returns><returns><para>Reference to <classname alt="boost::svg::svg_2d_plot">svg_2d_plot</classname> to make chainable. </para></returns></method>
<method name="y_plusminus_color"><type>const <classname>svg_color</classname></type><description><para>
</para></description><returns><para>Color of Y uncertainty of value. </para></returns></method>
<method name="y_plusminus_on"><type>bool</type><description><para>
</para></description><returns><para><computeroutput>true</computeroutput> if values of Y data points are to include uncertainty estimates. </para></returns></method>
<method name="y_plusminus_on"><type><classname>svg_2d_plot</classname> &amp;</type><parameter name="b"><paramtype>bool</paramtype></parameter><description><para>Set true if values of Y data points are to include uncertainty estimates. </para></description></method>
<method name="y_prefix"><type>const std::string</type><description><para>Get the prefix (only used if separator != "") </para></description></method>
<method name="y_range"><type><classname>svg_2d_plot</classname> &amp;</type><parameter name="min_y"><paramtype>double</paramtype></parameter><parameter name="max_y"><paramtype>double</paramtype></parameter><description><para>Set the range (max and min) for Y-axis from the parameters provided.</para><para>
</para></description><returns><para>Reference to <classname alt="boost::svg::svg_2d_plot">svg_2d_plot</classname> to make chainable. </para></returns></method>
<method name="y_range"><type>std::pair&lt; double, double &gt;</type><description><para>
</para></description><returns><para>The range (max and min) for Y-axis. </para></returns></method>
<method name="y_separator"><type>const std::string</type><description><para>Get separator (also controls use of the prefix &amp; suffix - they are only used if separator != ""). <note><para>For a space, you must use a Unicode space<programlisting language="c++">"&amp;#x00A0;" 
</programlisting> rather than " ". </para></note>
</para></description></method>
<method name="y_size"><type>unsigned int</type><description><para>
</para></description><returns><para>SVG image Y-axis size as vertical height (SVG units, default pixels). </para></returns></method>
<method name="y_size"><type><classname>svg_2d_plot</classname> &amp;</type><parameter name="i"><paramtype>unsigned int</paramtype></parameter><purpose>Set SVG image Y-axis size (SVG units, default pixels). </purpose></method>
<method name="y_suffix"><type>const std::string</type><description><para>Get the suffix (only used if separator != "") </para></description></method>
<method name="y_ticks"><type><classname>ticks_labels_style</classname> &amp;</type><description><para>
</para></description><returns><para><computeroutput>true</computeroutput> if ticks are to be marked on the Y-axis. </para></returns></method>
<method name="y_ticks_left_on"><type><classname>svg_2d_plot</classname> &amp;</type><parameter name="cmd"><paramtype>bool</paramtype></parameter><description><para>Set true if ticks on the Y-axis are to be on left of axis line.</para><para>
</para></description><returns><para>Reference to <classname alt="boost::svg::svg_2d_plot">svg_2d_plot</classname> to make chainable. </para></returns></method>
<method name="y_ticks_left_on"><type>bool</type><description><para>
</para></description><returns><para>true if ticks on the Y-axis are to be on left of axis line. </para></returns></method>
<method name="y_ticks_on_window_or_axis"><type><classname>svg_2d_plot</classname> &amp;</type><parameter name=""><paramtype>int</paramtype></parameter><description><para>Set Y ticks on window or axis 

</para></description><returns><para>reference to <classname alt="boost::svg::svg_2d_plot">svg_2d_plot</classname> to make chainable. </para></returns></method>
<method name="y_ticks_on_window_or_axis"><type>int</type><description><para>
</para></description><returns><para>true if Y-axis ticks wanted on the window (rather than on axis).<sbr/>
-1 left of plot window, 0 on Y-axis, +1 right of plot window. </para></returns></method>
<method name="y_ticks_right_on"><type><classname>svg_2d_plot</classname> &amp;</type><parameter name="cmd"><paramtype>bool</paramtype></parameter><description><para>Set true if ticks on the Y-axis are to be on right of axis line.</para><para>
</para></description><returns><para>Reference to <classname alt="boost::svg::svg_2d_plot">svg_2d_plot</classname> to make chainable. </para></returns></method>
<method name="y_ticks_right_on"><type>bool</type><description><para>
</para></description><returns><para>true if ticks on the Y-axis are to be on right of axis line. </para></returns></method>
<method name="y_ticks_values_color"><type><classname>svg_2d_plot</classname> &amp;</type><parameter name="col"><paramtype>const <classname>svg_color</classname> &amp;</paramtype></parameter><description><para>Set color for Y_axis tick values.</para><para>
</para></description><returns><para>Reference to <classname alt="boost::svg::svg_2d_plot">svg_2d_plot</classname> to make chainable. </para></returns></method>
<method name="y_ticks_values_color"><type><classname>svg_color</classname></type><description><para>
</para></description><returns><para>color for Y-axis ticks values. </para></returns></method>
<method name="y_ticks_values_font_family"><type><classname>svg_2d_plot</classname> &amp;</type><parameter name="family"><paramtype>const std::string &amp;</paramtype></parameter><description><para>Set font family for Y-axis ticks values. Available fonts depend on the program rendering the SVG XML, usually a browser. The default font (usually "verdana") is used if a render program does not provide the font specified.</para><para>These are probably usable:</para><para><programlisting language="c++">"arial", "impact", "courier", "lucida console",  "Lucida sans unicode", "verdana", "calibri", "century",
"lucida calligraphy", "tahoma", "vivaldi", "informal roman", "lucida handwriting", "lucida bright", "helvetica"
</programlisting></para><para>
</para></description><returns><para>Reference to <classname alt="boost::svg::svg_2d_plot">svg_2d_plot</classname> to make chainable. </para></returns></method>
<method name="y_ticks_values_font_family"><type>const std::string &amp;</type><description><para>
</para></description><returns><para>font family for Y-axis ticks values. </para></returns></method>
<method name="y_ticks_values_font_size"><type><classname>svg_2d_plot</classname> &amp;</type><parameter name="i"><paramtype>unsigned int</paramtype></parameter><description><para>Set font size for Y-axis ticks values (svg units, default pixels).</para><para>
</para></description><returns><para>Reference to <classname alt="boost::svg::svg_2d_plot">svg_2d_plot</classname> to make chainable. </para></returns></method>
<method name="y_ticks_values_font_size"><type>unsigned int</type><description><para>
</para></description><returns><para>Font size for Y-axis values. </para></returns></method>
<method name="y_ticks_values_ioflags"><type><classname>svg_2d_plot</classname> &amp;</type><parameter name="f"><paramtype>std::ios_base::fmtflags</paramtype></parameter><description><para>Set <computeroutput>std::iostream</computeroutput> format flags of ticks Y values. Useful to set hexadecimal, fixed and scientific, (std::ios::scientific). </para></description></method>
<method name="y_ticks_values_ioflags"><type>std::ios_base::fmtflags</type><description><para>
</para></description><returns><para><computeroutput>std::iostream</computeroutput> format flags of ticks Y values. Might be used to set hexadecimal, fixed and scientific, (std::ios::scientific). </para></returns></method>
<method name="y_ticks_values_precision"><type><classname>svg_2d_plot</classname> &amp;</type><parameter name="p"><paramtype>int</paramtype></parameter><description><para>Set <computeroutput>std::iostream</computeroutput> decimal digits precision of ticks Y values. </para></description></method>
<method name="y_ticks_values_precision"><type>int</type><description><para>
</para></description><returns><para><computeroutput>std::iostream</computeroutput> decimal digits precision of ticks Y values.. </para></returns></method>
<method name="y_value_ioflags"><type><classname>svg_2d_plot</classname> &amp;</type><parameter name="flags"><paramtype>std::ios_base::fmtflags</paramtype></parameter><description><para>Set std::ioflags of Y tick label values (default 0x201 == dec).</para><para><emphasis role="bold">Example:</emphasis> </para><para><programlisting language="c++">my_plot.x_value_ioflags(ios::dec | ios::scientific).x_value_precision(2);
</programlisting></para><para>
</para></description><returns><para>Reference to <classname alt="boost::svg::svg_2d_plot">svg_2d_plot</classname> to make chainable. </para></returns></method>
<method name="y_value_ioflags"><type>int</type><description><para>
</para></description><returns><para>All stream ioflags for control of format of Y tick value labels. </para></returns></method>
<method name="y_value_precision"><type><classname>svg_2d_plot</classname> &amp;</type><parameter name="digits"><paramtype>int</paramtype></parameter><description><para>Set precision of Y tick label values in decimal digits (default 3).</para><para><emphasis role="bold">Example:</emphasis> </para><para><programlisting language="c++">my_plot.x_value_ioflags(ios::dec | ios::scientific).x_value_precision(2);
</programlisting></para><para>
</para></description><returns><para>Reference to <classname alt="boost::svg::svg_2d_plot">svg_2d_plot</classname> to make chainable. </para></returns></method>
<method name="y_value_precision"><type>int</type><description><para>
</para></description><returns><para>Precision of Y tick value labels in decimal digits (default 3). </para></returns></method>
<method name="y_values_color"><type><classname>svg_2d_plot</classname> &amp;</type><parameter name="col"><paramtype>const <classname>svg_color</classname> &amp;</paramtype></parameter><description><para>Set color for Y-axis values.</para><para>
</para></description><returns><para>reference to <classname alt="boost::svg::svg_2d_plot">svg_2d_plot</classname> to make chainable. </para></returns></method>
<method name="y_values_color"><type><classname>svg_color</classname></type><description><para>
</para></description><returns><para>Color for Y-axis values. </para></returns></method>
<method name="y_values_font_family"><type><classname>svg_2d_plot</classname> &amp;</type><parameter name="family"><paramtype>const std::string &amp;</paramtype></parameter><description><para>Set font family for Y-axis values. Available fonts depend on the program rendering the SVG XML, usually a browser. The default font (usually "verdana") is used if a render program does not provide the font specified. These are probably usable: "arial", "impact", "courier", "lucida console", "Lucida sans unicode", "verdana", "calibri", "century", "lucida calligraphy", "tahoma", "vivaldi", "informal roman", "lucida handwriting", "lucida bright", "helvetica"</para><para>
</para></description><returns><para>Reference to <classname alt="boost::svg::svg_2d_plot">svg_2d_plot</classname> to make chainable. </para></returns></method>
<method name="y_values_font_family"><type>const std::string &amp;</type><description><para>
</para></description><returns><para>Font family for Y-axis values. </para></returns></method>
<method name="y_values_font_size"><type><classname>svg_2d_plot</classname> &amp;</type><parameter name="i"><paramtype>unsigned int</paramtype></parameter><description><para>Set font size for Y-axis values.</para><para>
</para></description><returns><para>Reference to <classname alt="boost::svg::svg_2d_plot">svg_2d_plot</classname> to make chainable. </para></returns></method>
<method name="y_values_font_size"><type>unsigned int</type><description><para>
</para></description><returns><para>Font size for Y-axis values. </para></returns></method>
<method name="y_values_ioflags"><type><classname>svg_2d_plot</classname> &amp;</type><parameter name="f"><paramtype>std::ios_base::fmtflags</paramtype></parameter><description><para>Set <computeroutput>iostream</computeroutput> format flags for data point values.</para><para>
</para></description><returns><para>reference to <classname alt="boost::svg::svg_2d_plot">svg_2d_plot</classname> to make chainable. </para></returns></method>
<method name="y_values_ioflags"><type>std::ios_base::fmtflags</type><description><para>
</para></description><returns><para><computeroutput>std::iostream</computeroutput> format flags for data point values. </para></returns></method>
<method name="y_values_on"><type>bool</type><description><para>
(Will override xy_values_on that would otherwise cause overwriting). So the last values_on setting will prevail.</para></description><returns><para><computeroutput>true</computeroutput> if values of Y data points are shown (for example: 1.23).</para></returns></method>
<method name="y_values_on"><type><classname>svg_2d_plot</classname> &amp;</type><parameter name="b"><paramtype>bool</paramtype></parameter><description><para>Set <computeroutput>true</computeroutput> if values of Y data points are shown (for example: 1.23, 2.34).</para><para>
</para></description><returns><para>Reference to <classname alt="boost::svg::svg_2d_plot">svg_2d_plot</classname> to make chainable. </para></returns></method>
<method name="y_values_precision"><type><classname>svg_2d_plot</classname> &amp;</type><parameter name="p"><paramtype>int</paramtype></parameter><description><para>Set <computeroutput>iostream</computeroutput> precision for data points Y values.</para><para>
</para></description><returns><para>Reference to <classname alt="boost::svg::svg_2d_plot">svg_2d_plot</classname> to make chainable. </para></returns></method>
<method name="y_values_precision"><type>int</type><description><para>
</para></description><returns><para><computeroutput>iostream</computeroutput> precision for data points Y values. </para></returns></method>
<method name="y_values_rotation"><type><classname>svg_2d_plot</classname> &amp;</type><parameter name="rotate"><paramtype>rotate_style</paramtype></parameter><description><para>Set rotation for value labels on Y-axis ticks. <para><emphasis role="bold">See Also:</emphasis><para>rotate_style</para></para>

</para></description><returns><para>Reference to <classname alt="boost::svg::svg_2d_plot">svg_2d_plot</classname> to make chainable. </para></returns></method>
<method name="y_values_rotation"><type>int</type><description><para>
</para></description><returns><para>rotation for value labels on Y-axis. </para></returns></method>
</method-group>
<constructor><purpose>Default constructor inheriting from public <computeroutput><classname alt="boost::svg::detail::axis_plot_frame">axis_plot_frame&lt;svg_2d_plot&gt;</classname></computeroutput>, providing all the very many default plot options, some of which use some or all of the style defaults.<sbr/>
 All these settings can be changed by these chainable functions.<sbr/>
 <emphasis role="bold">Example:</emphasis> </purpose><description><para><programlisting language="c++">svg_2d_plot my_plot;
my_plot.background_color(ghostwhite) // Whole image.
  .legend_border_color(yellow) // Just the legend box.
  .legend_background_color(lightyellow)  // Fill color of the legend box.
  .plot_background_color(svg_color(white)) // Just the plot window
  .plot_border_color(svg_color(green)) // The border rectangle color.
  .plot_border_width(1) // Thin border (SVG units, default pixels).
  .title_color(red) // Title of whole image.
;
</programlisting> <sbr/>
 <para><emphasis role="bold">See Also:</emphasis><para>Rationale for default plot options and style settings in documentation. </para></para>
</para></description></constructor>
</class><class name="svg_2d_plot_series"><purpose>Holds a series of 2D data values (points) to be plotted. </purpose><description><para>Data values are sorted into normal and 'at limits': NaN, infinity or too small or too large.<sbr/>
<sbr/>
 Member functions allow control of data points markers and lines joining them, and their appearance, shape, color and size.<sbr/>
 Data points can include their value, and optionally uncertainty and optionally number of degrees of freedom.<sbr/>
 Each data series can have a title that can be shown on a legend box with identifying symbols.</para><para><computeroutput>std::multimap</computeroutput> is used rather than <computeroutput>std::vector</computeroutput> of <computeroutput>std::pair</computeroutput> s because <computeroutput>std::multimap</computeroutput> sorts and ensures that lines joining data points are unaffected by the order in which data is presented. (For 1-D a vector of doubles can be used). </para></description><method-group name="public member functions">
<method name="area_fill"><type><classname>svg_2d_plot_series</classname> &amp;</type><parameter name="col_"><paramtype>const <classname>svg_color</classname> &amp;</paramtype></parameter><description><para>Set Data series area fill color. \note @c area_fill(false) will produce a @b blank color, and so NO FILL.
</para><para><computeroutput>area_fill(blank)</computeroutput> will produce the default non-blank color (black?).</para></description></method>
<method name="area_fill"><type><classname>svg_color</classname> &amp;</type><description><para>
</para></description><returns><para>Color for any area fill below line(s) joining data points. </para></returns></method>
<method name="bar_area_fill"><type><classname>svg_2d_plot_series</classname> &amp;</type><parameter name="col"><paramtype>const <classname>svg_color</classname> &amp;</paramtype><description><para>Set bar area fill color.</para></description></parameter><description><para>

</para></description><returns><para>Reference to <classname alt="boost::svg::svg_2d_plot_series">svg_2d_plot_series</classname> to make chainable. </para></returns></method>
<method name="bar_area_fill"><type><classname>svg_color</classname> &amp;</type><description><para>
</para></description><returns><para>Color of bar area fill. </para></returns></method>
<method name="bar_color"><type><classname>svg_2d_plot_series</classname> &amp;</type><parameter name="col"><paramtype>const <classname>svg_color</classname> &amp;</paramtype></parameter><description><para>Set bar color.</para><para>
</para></description><returns><para>Reference to <classname alt="boost::svg::svg_2d_plot_series">svg_2d_plot_series</classname> to make chainable. </para></returns></method>
<method name="bar_color"><type><classname>svg_color</classname> &amp;</type><description><para>
</para></description><returns><para>Bar color. </para></returns></method>
<method name="bar_opt"><type><classname>svg_2d_plot_series</classname> &amp;</type><parameter name=""><paramtype>bar_option</paramtype></parameter><description><para>Set bar options.</para><para>
</para></description><returns><para>Reference to <classname alt="boost::svg::svg_2d_plot_series">svg_2d_plot_series</classname> to make chainable. </para></returns></method>
<method name="bar_opt"><type>bar_option</type><description><para>
</para></description><returns><para>Bar options. </para></returns></method>
<method name="bar_width"><type><classname>svg_2d_plot_series</classname> &amp;</type><parameter name="wid_"><paramtype>double</paramtype></parameter><description><para>Set Bar width.</para><para>
</para></description><returns><para>Reference to <classname alt="boost::svg::svg_2d_plot_series">svg_2d_plot_series</classname> to make chainable. </para></returns></method>
<method name="bar_width"><type>double</type><description><para>
</para></description><returns><para>Bar width. </para></returns></method>
<method name="bezier_on"><type><classname>svg_2d_plot_series</classname> &amp;</type><parameter name="on_"><paramtype>bool</paramtype></parameter><description><para>Set <computeroutput>true</computeroutput> to draw bezier curved line linking data points.</para><para>
</para></description><returns><para>Reference to <classname alt="boost::svg::svg_2d_plot_series">svg_2d_plot_series</classname> to make chainable. </para></returns></method>
<method name="bezier_on"><type>bool</type><description><para>
</para></description><returns><para><computeroutput>true</computeroutput> if line joing data points should be a bezier curve. </para></returns></method>
<method name="fill_color"><type><classname>svg_2d_plot_series</classname> &amp;</type><parameter name="col_"><paramtype>const <classname>svg_color</classname> &amp;</paramtype></parameter><description><para>Set data series point marker fill color. </para></description></method>
<method name="histogram"><type><classname>svg_2d_plot_series</classname> &amp;</type><parameter name="opt_"><paramtype>histogram_option</paramtype><description><para>no_histogram = 0, </para></description><description><para>bar = +1 // Stick or column line (stroke width) vertical to X-axis.</para></description></parameter><description><para>

</para></description><returns><para>Reference to <classname alt="boost::svg::svg_2d_plot_series">svg_2d_plot_series</classname> to make chainable. </para></returns></method>
<method name="limits_count"><type>int</type><description><para>
</para></description><returns><para>number of values 'at limit' in a data series. </para></returns></method>
<method name="line_color"><type><classname>svg_2d_plot_series</classname> &amp;</type><parameter name="col_"><paramtype>const <classname>svg_color</classname> &amp;</paramtype></parameter><description><para>Set Data series line color. </para></description></method>
<method name="line_color"><type><classname>svg_color</classname> &amp;</type><description><para>
</para></description><returns><para>color of a line to join data points. </para></returns></method>
<method name="line_on"><type><classname>svg_2d_plot_series</classname> &amp;</type><parameter name="on_"><paramtype>bool</paramtype></parameter><description><para>Set <computeroutput>true</computeroutput> to draw line linking data points.</para><para>
</para></description><returns><para>Reference to <classname alt="boost::svg::svg_2d_plot_series">svg_2d_plot_series</classname> to make chainable. </para></returns></method>
<method name="line_on"><type>bool</type><description><para>
</para></description><returns><para><computeroutput>true</computeroutput> if a line is to join data points. </para></returns></method>
<method name="line_style"><type><classname>plot_line_style</classname></type><description><para>
</para></description><returns><para>Line style for line joining data points. </para></returns></method>
<method name="line_width"><type><classname>svg_2d_plot_series</classname> &amp;</type><parameter name="wid_"><paramtype>double</paramtype></parameter><description><para>Set data series line width.</para><para>(Sets legend line width too).</para><para>
</para></description><returns><para>Reference to <classname alt="boost::svg::svg_2d_plot_series">svg_2d_plot_series</classname> to make chainable. </para></returns></method>
<method name="line_width"><type>double</type><description><para>
</para></description><returns><para>Width of line joining data points. </para></returns></method>
<method name="shape"><type><classname>svg_2d_plot_series</classname> &amp;</type><parameter name="shape_"><paramtype>point_shape</paramtype></parameter><description><para>Set Data series point marker shape. </para></description></method>
<method name="shape"><type>point_shape</type><description><para>
</para></description><returns><para>Shape of data point marker(s). </para></returns></method>
<method name="size"><type><classname>svg_2d_plot_series</classname> &amp;</type><parameter name="size_"><paramtype>int</paramtype></parameter><description><para>Set Data series point marker size. </para></description></method>
<method name="size"><type>int</type><description><para>
</para></description><returns><para>Size of data point marker(s). </para></returns></method>
<method name="stroke_color"><type><classname>svg_2d_plot_series</classname> &amp;</type><parameter name="col_"><paramtype>const <classname>svg_color</classname> &amp;</paramtype></parameter><description><para>Set Data series point marker stroke color. </para></description></method>
<method name="values_count"><type>int</type><description><para>
</para></description><returns><para>number of normal values in a data series. </para></returns></method>
</method-group>
<constructor><template>
          <template-type-parameter name="T"><purpose><para>an STL container: for example: <computeroutput>multimap</computeroutput>. </para></purpose></template-type-parameter>
        </template><parameter name="begin"><paramtype>T</paramtype><description><para>Starting iterator into container of data series begin() to start at the beginning. </para></description></parameter><parameter name="end"><paramtype>T</paramtype><description><para>Ending iterator into container of data series, end() to finish with the last item. </para></description></parameter><parameter name="title"><paramtype>std::string</paramtype><default>""</default><description><para>Title for the plot. </para></description></parameter><description><para>Constructor for a data series to plot 

</para></description></constructor>
</class>




























































</namespace>
</namespace>
</header>
<header name="boost/svg_plot/svg_boxplot.hpp">
<para>Create box plots in Scalable Vector Graphic (SVG) format. </para><para>Provides <computeroutput>svg_boxplot</computeroutput> data and functions to create plots, <computeroutput>and</computeroutput> svg_boxplot_series to allow data values to be added to the boxplot.<sbr/>
 Very many functions allow fine control of the appearance and layout of plots and data markers. (Items common to 1D, 2D and boxplot use <computeroutput>axis_plot_frame</computeroutput>).</para><para>A convenient way of graphically depicting groups of numerical data through their five-number summaries.<sbr/>
Show 1st quartile, median and 3rd quartile as a box. <ulink url="http://en.wikipedia.org/wiki/Boxplot">http://en.wikipedia.org/wiki/Boxplot</ulink></para><para><para><emphasis role="bold">See Also:</emphasis><para>Some Implementations of the Boxplot: Michael Frigge, David C. Hoaglin and Boris Iglewicz The American Statistician, Vol. 43, No. 1 (Feb., 1989), pp. 50-54</para></para>
<para><emphasis role="bold">See Also:</emphasis><para>The Bagplot: A Bivariate Boxplot Peter J. Rousseeuw, Ida Ruts and John W. Tukey The American Statistician, Vol. 53, No. 4 (Nov., 1999), pp. 382-387</para></para>
<para>Jacob Voytko &amp; Paul A. Bristow </para>
</para><namespace name="boost">
<namespace name="svg">
<class name="svg_boxplot"><purpose>A plot that can display boxplots of several data series.<sbr/>
Holds all info about the plot (but not any data series - see <computeroutput><classname alt="boost::svg::svg_boxplot_series">svg_boxplot_series</classname></computeroutput>)<sbr/>
. </purpose><description><para>(<computeroutput>axis_plot_frame.hpp</computeroutput> contains functions common to 1 and 2-D, and boxplot). </para></description><method-group name="public member functions">
<method name="autoscale"><type>bool</type><description><para>
</para></description><returns><para><computeroutput>true</computeroutput> if to use autoscale values autoscaling for X-axis. </para></returns></method>
<method name="autoscale"><type><classname>svg_boxplot</classname> &amp;</type><parameter name="b"><paramtype>bool</paramtype></parameter><purpose>Set <computeroutput>true</computeroutput> if to use autoscale values for X-axis. </purpose></method>
<method name="autoscale_check_limits"><type><classname>svg_boxplot</classname> &amp;</type><parameter name="b"><paramtype>bool</paramtype></parameter><description><para>Set <computeroutput>true</computeroutput> to check that values used for autoscale are within limits. Default is <computeroutput>true</computeroutput>, but can switch off checks for speed if user can be sure all values are 'inside limits'. </para></description></method>
<method name="autoscale_check_limits"><type>bool</type><description><para>
</para></description><returns><para><computeroutput>true</computeroutput> if to check that values used for autoscaling are within limits. </para></returns></method>
<method name="autoscale_plusminus"><type><classname>svg_boxplot</classname> &amp;</type><parameter name=""><paramtype>double</paramtype></parameter><purpose>Set how many std_dev or standard deviations to allow for ellipses when autoscaling. </purpose></method>
<method name="autoscale_plusminus"><type>double</type><description><para>
</para></description><returns><para>How many std_dev or standard deviations allowed for ellipses when autoscaling. </para></returns></method>
<method name="axes_on"><type><classname>svg_boxplot</classname> &amp;</type><parameter name="is"><paramtype>bool</paramtype></parameter><purpose>Set <computeroutput>true</computeroutput> if to draw <emphasis role="bold">both</emphasis> x and y axes (note plural axes). </purpose></method>
<method name="axes_on"><type>bool</type><description><para>
</para></description><returns><para><computeroutput>true</computeroutput> if to draw <emphasis role="bold">both</emphasis> x and y axis on. </para></returns></method>
<method name="axis_color"><type><classname>svg_boxplot</classname> &amp;</type><parameter name="color"><paramtype>const <classname>svg_color</classname> &amp;</paramtype></parameter><description><para>Set color of vertical whisker axis line in box.</para><para>
</para></description><returns><para>Reference to <classname alt="boost::svg::svg_boxplot">svg_boxplot</classname> to make chainable. </para></returns></method>
<method name="axis_color"><type><classname>svg_color</classname></type><description><para>
</para></description><returns><para>Color of vertical whisker axis line in box. </para></returns></method>
<method name="axis_width"><type><classname>svg_boxplot</classname> &amp;</type><parameter name="l"><paramtype>double</paramtype></parameter><description><para>Set width of the box, not the border.</para><para>
</para></description><returns><para>Reference to <classname alt="boost::svg::svg_boxplot">svg_boxplot</classname> to make chainable. </para></returns></method>
<method name="axis_width"><type>double</type><description><para>
</para></description><returns><para>Width of the box, not the border. </para></returns></method>
<method name="background_border_color"><type><classname>svg_boxplot</classname> &amp;</type><parameter name="col"><paramtype>const <classname>svg_color</classname> &amp;</paramtype></parameter><description><para>Set SVG image background border color.</para><para>
</para></description><returns><para>Reference to <classname alt="boost::svg::svg_boxplot">svg_boxplot</classname> to make chainable. </para></returns></method>
<method name="background_border_color"><type><classname>svg_color</classname></type><description><para>
</para></description><returns><para>Color of the border of the background for the SVG image. </para></returns></method>
<method name="background_border_width"><type><classname>svg_boxplot</classname> &amp;</type><parameter name="w"><paramtype>double</paramtype></parameter><purpose>Set plot background border width. </purpose></method>
<method name="background_border_width"><type>double</type><description><para>
</para></description><returns><para>Plot background border width. </para></returns></method>
<method name="background_color"><type><classname>svg_boxplot</classname> &amp;</type><parameter name="col"><paramtype>const <classname>svg_color</classname> &amp;</paramtype></parameter><description><para>Set SVG image background color. </para></description></method>
<method name="background_color"><type><classname>svg_color</classname></type><description><para>
</para></description><returns><para>Color of the background for the SVG image. </para></returns></method>
<method name="boost_license_on"><type><classname>svg_boxplot</classname> &amp;</type><parameter name="l"><paramtype>bool</paramtype></parameter><purpose>Set <computeroutput>true</computeroutput> if the Boost license conditions should be included in the SVG document. </purpose></method>
<method name="boost_license_on"><type>bool</type><description><para>
</para></description><returns><para><computeroutput>true</computeroutput> if the Boost license conditions should be included in the SVG document. </para></returns></method>
<method name="box_border"><type><classname>svg_boxplot</classname> &amp;</type><parameter name="color"><paramtype>const <classname>svg_color</classname> &amp;</paramtype></parameter><description><para>Set color of box border.</para><para>
</para></description><returns><para>Reference to <classname alt="boost::svg::svg_boxplot">svg_boxplot</classname> to make chainable. </para></returns></method>
<method name="box_border"><type><classname>svg_color</classname></type><description><para>
</para></description><returns><para>Color of box border. </para></returns></method>
<method name="box_fill"><type><classname>svg_boxplot</classname> &amp;</type><parameter name="color"><paramtype>const <classname>svg_color</classname> &amp;</paramtype></parameter><description><para>Set color of box fill (not border).</para><para>
</para></description><returns><para>Reference to <classname alt="boost::svg::svg_boxplot">svg_boxplot</classname> to make chainable. </para></returns></method>
<method name="box_fill"><type><classname>svg_color</classname></type><description><para>
</para></description><returns><para>Color of box fill (not border). </para></returns></method>
<method name="box_width"><type><classname>svg_boxplot</classname> &amp;</type><parameter name="width"><paramtype>double</paramtype></parameter><description><para>Set width of the box. (Width of the box, not the border).</para><para>
</para></description><returns><para>Reference to <classname alt="boost::svg::svg_boxplot">svg_boxplot</classname> to make chainable. </para></returns></method>
<method name="box_width"><type>double</type><description><para>
</para></description><returns><para>width of the box. (Width of the box, not the border). </para></returns></method>
<method name="confidence"><type><classname>svg_boxplot</classname> &amp;</type><parameter name=""><paramtype>double</paramtype></parameter><purpose>Set confidence alpha for display of confidence intervals (default 0.05 for 95%). </purpose></method>
<method name="confidence"><type>double</type><description><para>
</para></description><returns><para>Confidence alpha for display of confidence intervals (default 0.05 for 95%). </para></returns></method>
<method name="coord_precision"><type><classname>svg_boxplot</classname> &amp;</type><parameter name="digits"><paramtype>int</paramtype></parameter><description><para>Precision of SVG coordinates in decimal digits (default 3). 3 decimal digits precision is sufficient for small images. 4 or 5 decimal digits precision will give higher quality plots, especially for larger images, at the expense of larger .svg files, particularly if there are very many data points. </para></description></method>
<method name="coord_precision"><type>int</type><description><para>
</para></description><returns><para>precision of SVG coordinates in decimal digits. </para></returns></method>
<method name="copyright_date"><type><classname>svg_boxplot</classname> &amp;</type><parameter name="d"><paramtype>const std::string</paramtype></parameter><description><para>Writes copyright date to the SVG document. and as metadata:&lt;meta name="date" content="2007" /&gt;  </para></description></method>
<method name="copyright_date"><type>const std::string</type><description><para>
</para></description><returns><para>SVG document copyright_date. </para></returns></method>
<method name="copyright_holder"><type><classname>svg_boxplot</classname> &amp;</type><parameter name="d"><paramtype>const std::string</paramtype></parameter><description><para>Writes copyright_holder metadata to the SVG document (for header as ) /and as metadata:&lt;meta name="copyright" content="Paul A. Bristow" /&gt;  </para></description></method>
<method name="copyright_holder"><type>const std::string</type><description><para>
</para></description><returns><para>SVG document copyright holder. </para></returns></method>
<method name="data_lines_width"><type><classname>svg_boxplot</classname> &amp;</type><parameter name="width"><paramtype>double</paramtype></parameter><purpose>Set the width of lines joining data points. </purpose></method>
<method name="data_lines_width"><type>double</type><description><para>
</para></description><returns><para>the width of lines joining data points. </para></returns></method>
<method name="derived"><type><classname>svg_boxplot</classname> &amp;</type><description><para>Uses Curiously Recurring Template Pattern to allow 1D and 2D to reuse common code. See <ulink url="http://en.wikipedia.org/wiki/Curiously_Recurring_Template_Pattern">http://en.wikipedia.org/wiki/Curiously_Recurring_Template_Pattern</ulink> . </para></description></method>
<method name="derived" cv="const"><type>const <classname>svg_boxplot</classname> &amp;</type><description><para>const version of derived() </para></description></method>
<method name="description"><type><classname>svg_boxplot</classname> &amp;</type><parameter name="d"><paramtype>const std::string</paramtype></parameter><purpose>Writes description to the document for header as. </purpose><description><para>&lt;desc&gt; My Description &lt;/desc&gt;.  </para></description></method>
<method name="description"><type>const std::string &amp;</type><description><para>
</para></description><returns><para>Description of the document for header as&lt;desc&gt; My description &lt;/desc&gt;.  </para></returns></method>
<method name="document_title"><type><classname>svg_boxplot</classname> &amp;</type><parameter name="d"><paramtype>const std::string</paramtype></parameter><purpose>Set document title to the document for header as. </purpose><description><para>&lt;title&gt; My Title &lt;/title&gt;.  </para></description></method>
<method name="document_title"><type>std::string</type><description><para>
</para></description><returns><para>Document title to the document for header as&lt;title&gt; My Title &lt;/title&gt;.  </para></returns></method>
<method name="draw_line"><type><classname>svg_boxplot</classname> &amp;</type><parameter name="x1"><paramtype>double</paramtype></parameter><parameter name="y1"><paramtype>double</paramtype></parameter><parameter name="x2"><paramtype>double</paramtype></parameter><parameter name="y2"><paramtype>double</paramtype></parameter><parameter name="col"><paramtype>const <classname>svg_color</classname> &amp;</paramtype><default>black</default></parameter><description><para>Annotate plot with a line from SVG Coordinates X1, Y1 to X2, Y2. (Default color black). Note <emphasis role="bold">NOT</emphasis> the data values. See draw_plot_line if want to use user coordinates. </para></description></method>
<method name="draw_note"><type><classname>svg_boxplot</classname> &amp;</type><parameter name="x"><paramtype>double</paramtype></parameter><parameter name="y"><paramtype>double</paramtype></parameter><parameter name="note"><paramtype>std::string</paramtype></parameter><parameter name="rot"><paramtype>rotate_style</paramtype><default>horizontal</default></parameter><parameter name="al"><paramtype>align_style</paramtype><default>center_align</default></parameter><parameter name=""><paramtype>const <classname>svg_color</classname> &amp;</paramtype><default>black</default></parameter><parameter name="tsty"><paramtype><classname>text_style</classname> &amp;</paramtype><default>no_style</default></parameter><purpose>Annotate plot with a text string (perhaps including Unicode), putting note at SVG Coordinates X, Y. </purpose><description><para>Defaults color black, rotation horizontal and align = center_align Using center_align is recommended as it will ensure that will center correctly (even if original string is made much longer because it contains Unicode, for example Greek or math symbols, taking about 6 characters per symbol) because the render engine does the centering. </para></description></method>
<method name="draw_plot_curve"><type><classname>svg_boxplot</classname> &amp;</type><parameter name="x1"><paramtype>double</paramtype></parameter><parameter name="y1"><paramtype>double</paramtype></parameter><parameter name="x2"><paramtype>double</paramtype></parameter><parameter name="y2"><paramtype>double</paramtype></parameter><parameter name="x3"><paramtype>double</paramtype></parameter><parameter name="y3"><paramtype>double</paramtype></parameter><parameter name="col"><paramtype>const <classname>svg_color</classname> &amp;</paramtype><default>black</default></parameter><purpose>Annotate plot with a line from user's Cartesian Coordinates X1, Y1 via X2, Y2 to X3, Y3. </purpose><description><para>For example, -10, -10, +10, +10, Default color black. </para></description></method>
<method name="draw_plot_line"><type><classname>svg_boxplot</classname> &amp;</type><parameter name="x1"><paramtype>double</paramtype></parameter><parameter name="y1"><paramtype>double</paramtype></parameter><parameter name="x2"><paramtype>double</paramtype></parameter><parameter name="y2"><paramtype>double</paramtype></parameter><parameter name="col"><paramtype>const <classname>svg_color</classname> &amp;</paramtype><default>black</default></parameter><purpose>Annotate plot with a line from user's Cartesian Coordinates X1, Y1 to X2, Y2. </purpose><description><para>For example, -10, -10, +10, +10, Default color black. </para></description></method>
<method name="extreme_outlier_color"><type><classname>svg_boxplot</classname> &amp;</type><parameter name="color"><paramtype>const <classname>svg_color</classname> &amp;</paramtype></parameter><description><para>Color of extreme outlier.</para><para>
</para></description><returns><para>Reference to <classname alt="boost::svg::svg_boxplot">svg_boxplot</classname> to make chainable. </para></returns></method>
<method name="extreme_outlier_color"><type><classname>svg_color</classname></type><description><para>
</para></description><returns><para>Color of extreme outlier. </para></returns></method>
<method name="extreme_outlier_fill"><type><classname>svg_boxplot</classname> &amp;</type><parameter name="color"><paramtype>const <classname>svg_color</classname> &amp;</paramtype></parameter><description><para>Set color of extreme outlier fill.</para><para>
</para></description><returns><para>Reference to <classname alt="boost::svg::svg_boxplot">svg_boxplot</classname> to make chainable. </para></returns></method>
<method name="extreme_outlier_fill"><type><classname>svg_color</classname></type><description><para>
</para></description><returns><para>Color of extreme outlier fill. </para></returns></method>
<method name="extreme_outlier_shape"><type><classname>svg_boxplot</classname> &amp;</type><parameter name="shape"><paramtype>point_shape</paramtype></parameter><description><para>Set shape of extreme outlier marker.</para><para>
</para></description><returns><para>Reference to <classname alt="boost::svg::svg_boxplot">svg_boxplot</classname> to make chainable. </para></returns></method>
<method name="extreme_outlier_shape"><type>point_shape</type><description><para>
</para></description><returns><para>Shape of extreme outlier marker. </para></returns></method>
<method name="extreme_outlier_size"><type><classname>svg_boxplot</classname> &amp;</type><parameter name="size"><paramtype>int</paramtype></parameter><description><para>Set size of extreme outlier marker.</para><para>
</para></description><returns><para>Reference to <classname alt="boost::svg::svg_boxplot">svg_boxplot</classname> to make chainable. </para></returns></method>
<method name="extreme_outlier_size"><type>int</type><description><para>
</para></description><returns><para>Size of extreme outlier marker. </para></returns></method>
<method name="extreme_outlier_values_on"><type><classname>svg_boxplot</classname> &amp;</type><parameter name="cmd"><paramtype>bool</paramtype></parameter><description><para>Set <computeroutput>true</computeroutput> to show extreme outlier values.</para><para>
</para></description><returns><para>Reference to <classname alt="boost::svg::svg_boxplot">svg_boxplot</classname> to make chainable. </para></returns></method>
<method name="extreme_outlier_values_on"><type>bool</type><description><para>
</para></description><returns><para><computeroutput>true</computeroutput> if to show extreme outlier value(s). </para></returns></method>
<method name="image_border_margin"><type><classname>svg_boxplot</classname> &amp;</type><parameter name="w"><paramtype>double</paramtype></parameter><purpose>Set the margin around the plot window border (svg units, default pixels). </purpose><description><para>This prevents the plot window getting too close to other elements of the plot. </para></description></method>
<method name="image_border_margin"><type>double</type><description><para>
</para></description><returns><para>the margin around the plot window border (svg units, default pixels). </para></returns></method>
<method name="image_border_width"><type><classname>svg_boxplot</classname> &amp;</type><parameter name="w"><paramtype>double</paramtype></parameter><purpose>Set the svg image border width (svg units, default pixels). </purpose></method>
<method name="image_border_width"><type>double</type><description><para>
</para></description><returns><para>the svg image border width (svg units, default pixels). </para></returns></method>
<method name="image_x_size"><type>unsigned int</type><purpose>Obselete - deprecated use x_size() </purpose></method>
<method name="image_x_size"><type><classname>svg_boxplot</classname> &amp;</type><parameter name="i"><paramtype>unsigned int</paramtype></parameter><purpose>Obselete - deprecated - use x_size(). </purpose></method>
<method name="image_y_size"><type>unsigned int</type><purpose>Obselete - deprecated - use y_size() </purpose></method>
<method name="image_y_size"><type><classname>svg_boxplot</classname> &amp;</type><parameter name="i"><paramtype>unsigned int</paramtype></parameter><purpose>Obselete - deprecated - use y_size() </purpose></method>
<method name="legend_background_color"><type><classname>svg_boxplot</classname> &amp;</type><parameter name="col"><paramtype>const <classname>svg_color</classname> &amp;</paramtype></parameter><purpose>Set the background fill color of the legend box. </purpose></method>
<method name="legend_background_color"><type><classname>svg_color</classname></type><description><para>
</para></description><returns><para>the background fill color of the legend box. </para></returns></method>
<method name="legend_border_color"><type><classname>svg_boxplot</classname> &amp;</type><parameter name="col"><paramtype>const <classname>svg_color</classname> &amp;</paramtype></parameter><purpose>Set the border stroke color of the legend box. </purpose></method>
<method name="legend_border_color"><type><classname>svg_color</classname></type><description><para>
</para></description><returns><para>the border stroke color of the legend box. </para></returns></method>
<method name="legend_bottom_right"><type>const std::pair&lt; double, double &gt;</type><description><para>
</para></description><returns><para>SVG coordinate (default pixels) of bottom right of legend box. </para></returns></method>
<method name="legend_box_fill_on"><type>bool</type><description><para>
</para></description><returns><para>true if legend box has a background fill color. </para></returns></method>
<method name="legend_color"><type><classname>svg_boxplot</classname> &amp;</type><parameter name="col"><paramtype>const <classname>svg_color</classname> &amp;</paramtype></parameter><purpose>Set the color of the title of the legend. </purpose></method>
<method name="legend_color"><type><classname>svg_color</classname></type><description><para>
</para></description><returns><para>the color of the title of the legend. </para></returns></method>
<method name="legend_font_family"><type><classname>svg_boxplot</classname> &amp;</type><parameter name="family"><paramtype>const std::string &amp;</paramtype></parameter><purpose>Set the font family for the legend title. </purpose></method>
<method name="legend_font_family"><type>const std::string &amp;</type><description><para>
</para></description><returns><para>the font family for the legend title. </para></returns></method>
<method name="legend_font_weight"><type><classname>svg_boxplot</classname> &amp;</type><parameter name="weight"><paramtype>const std::string &amp;</paramtype></parameter><purpose>Set the font weight for the legend title. </purpose></method>
<method name="legend_font_weight"><type>const std::string &amp;</type><description><para>
</para></description><returns><para>Font weight for the legend title. </para></returns></method>
<method name="legend_header_font_size"><type><classname>svg_boxplot</classname> &amp;</type><parameter name="size"><paramtype>int</paramtype></parameter><purpose>Set legend header font size (svg units, default pixels). </purpose></method>
<method name="legend_header_font_size"><type>int</type><description><para>
</para></description><returns><para>legend header font size (svg units, default pixels). </para></returns></method>
<method name="legend_lines"><type><classname>svg_boxplot</classname> &amp;</type><parameter name="is"><paramtype>bool</paramtype></parameter><description><para>Set true if legend should include samples of the lines joining data points. This allows different series of data points to be distinguished by different color and/or width. This is especially useful to show plots of different functions and/or different parameters in different colors. </para></description></method>
<method name="legend_lines"><type>bool</type><description><para>
</para></description><returns><para>true if legend should include samples of the lines joining data points. </para></returns></method>
<method name="legend_on"><type><classname>svg_boxplot</classname> &amp;</type><parameter name="cmd"><paramtype>bool</paramtype></parameter><purpose>Set <computeroutput>true</computeroutput> if a legend is wanted. </purpose></method>
<method name="legend_on"><type>bool</type><description><para>
</para></description><returns><para><computeroutput>true</computeroutput> if a legend is wanted. </para></returns></method>
<method name="legend_outside"><type>bool</type><description><para>
</para></description><returns><para>if the legend should be outside the plot area. </para></returns></method>
<method name="legend_place"><type><classname>svg_boxplot</classname> &amp;</type><parameter name="l"><paramtype>legend_places</paramtype></parameter><purpose>Set the position of the legend,. </purpose><description><para><para><emphasis role="bold">See Also:</emphasis><para>boost::svg::legend_places </para></para>
</para></description></method>
<method name="legend_place"><type>legend_places</type><description><para>
<para><emphasis role="bold">See Also:</emphasis><para>boost::svg::legend_places </para></para>
</para></description><returns><para>the position of the legend, </para></returns></method>
<method name="legend_title"><type><classname>svg_boxplot</classname> &amp;</type><parameter name="title"><paramtype>const std::string</paramtype></parameter><purpose>Set the title for the legend. </purpose></method>
<method name="legend_title"><type>const std::string</type><description><para>
</para></description><returns><para>Title for the legend. </para></returns></method>
<method name="legend_title_font_size"><type><classname>svg_boxplot</classname> &amp;</type><parameter name="size"><paramtype>unsigned int</paramtype></parameter><description><para>
</para></description><returns><para>Font family for the legend title. </para></returns></method>
<method name="legend_title_font_size"><type>unsigned int</type><description><para>
</para></description><returns><para>Font size for the legend title (svg units, default pixels). </para></returns></method>
<method name="legend_top_left"><type><classname>svg_boxplot</classname> &amp;</type><parameter name="x"><paramtype>double</paramtype></parameter><parameter name="y"><paramtype>double</paramtype></parameter><purpose>Set position of top left of legend box (svg coordinates, default pixels). (Bottom right is controlled by contents, so the user cannot set it). </purpose></method>
<method name="legend_top_left"><type>const std::pair&lt; double, double &gt;</type><description><para>
</para></description><returns><para>SVG coordinate (default pixels) of top left of legend box. </para></returns></method>
<method name="legend_width"><type><classname>svg_boxplot</classname> &amp;</type><parameter name="width"><paramtype>double</paramtype></parameter><purpose>Set the width for the legend box. </purpose></method>
<method name="legend_width"><type>double</type><description><para>
</para></description><returns><para>Width for the legend box. </para></returns></method>
<method name="license"><type><classname>svg_boxplot</classname> &amp;</type><parameter name="repro"><paramtype>std::string</paramtype><default>"permits"</default></parameter><parameter name="distrib"><paramtype>std::string</paramtype><default>"permits"</default></parameter><parameter name="attrib"><paramtype>std::string</paramtype><default>"requires"</default></parameter><parameter name="commercial"><paramtype>std::string</paramtype><default>"permits"</default></parameter><parameter name="derivative"><paramtype>std::string</paramtype><default>"permits"</default></parameter><description><para>Set license conditions for reproduction, attribution, commercial use, and derivative works, usually "permits", "requires", or "prohibits", and set license_on == true. </para></description></method>
<method name="license_attribution"><type>const std::string</type><description><para>
</para></description><returns><para>SVG document attribution license conditions, usually "permits", "requires", or "prohibits". </para></returns></method>
<method name="license_commercialuse"><type>const std::string</type><description><para>
</para></description><returns><para>SVG document commercial use license conditions, usually "permits", "requires", or "prohibits". </para></returns></method>
<method name="license_distribution"><type>const std::string</type><description><para>
</para></description><returns><para>SVG document distribution license conditions, usually "permits", "requires", or "prohibits". </para></returns></method>
<method name="license_on"><type><classname>svg_boxplot</classname> &amp;</type><parameter name="l"><paramtype>bool</paramtype></parameter><purpose>Set if license conditions should be included in the SVG document. </purpose></method>
<method name="license_on"><type>bool</type><description><para>
</para></description><returns><para><computeroutput>true</computeroutput> if license conditions should be included in the SVG document. </para></returns></method>
<method name="license_reproduction"><type>const std::string</type><description><para>
</para></description><returns><para>SVG document reproduction license conditions, usually "permits", "requires", or "prohibits". </para></returns></method>
<method name="limit_color"><type><classname>svg_boxplot</classname> &amp;</type><parameter name=""><paramtype>const <classname>svg_color</classname> &amp;</paramtype></parameter><purpose>Set the color for 'at limit' point stroke color. </purpose></method>
<method name="limit_color"><type><classname>svg_color</classname></type><description><para>
</para></description><returns><para>the color for the 'at limit' point stroke color. </para></returns></method>
<method name="limit_fill_color"><type><classname>svg_boxplot</classname> &amp;</type><parameter name=""><paramtype>const <classname>svg_color</classname> &amp;</paramtype></parameter><purpose>Set the color for 'at limit' point fill color. </purpose></method>
<method name="limit_fill_color"><type><classname>svg_color</classname></type><description><para>
</para></description><returns><para>the color for the 'at limit' point fill color. </para></returns></method>
<method name="median_color"><type><classname>svg_boxplot</classname> &amp;</type><parameter name="color"><paramtype>const <classname>svg_color</classname> &amp;</paramtype></parameter><description><para>Set color of median line in box.</para><para>
</para></description><returns><para>Reference to <classname alt="boost::svg::svg_boxplot">svg_boxplot</classname> to make chainable. </para></returns></method>
<method name="median_color"><type><classname>svg_color</classname></type><description><para>
</para></description><returns><para>color of median line in box. </para></returns></method>
<method name="median_values_on"><type><classname>svg_boxplot</classname> &amp;</type><parameter name="cmd"><paramtype>bool</paramtype></parameter><description><para>Set <computeroutput>true</computeroutput> to show median value(s).</para><para>
</para></description><returns><para>Reference to <classname alt="boost::svg::svg_boxplot">svg_boxplot</classname> to make chainable. </para></returns></method>
<method name="median_values_on"><type>bool</type><description><para>
</para></description><returns><para><computeroutput>true</computeroutput> if to show median value(s). </para></returns></method>
<method name="median_width"><type><classname>svg_boxplot</classname> &amp;</type><parameter name="l"><paramtype>double</paramtype></parameter><description><para>Set width of the box (not the border).</para><para>
</para></description><returns><para>Reference to <classname alt="boost::svg::svg_boxplot">svg_boxplot</classname> to make chainable. </para></returns></method>
<method name="median_width"><type>double</type><description><para>
</para></description><returns><para>width of the box (not the border). </para></returns></method>
<method name="one_sd_color"><type><classname>svg_boxplot</classname> &amp;</type><parameter name=""><paramtype>const <classname>svg_color</classname> &amp;</paramtype></parameter><purpose>Set the color for the one standard deviation (~67% confidence) ellipse fill. </purpose></method>
<method name="one_sd_color"><type><classname>svg_color</classname></type><description><para>
</para></description><returns><para>Color for the one standard deviation (~67% confidence) ellipse fill. </para></returns></method>
<method name="outlier_color"><type><classname>svg_boxplot</classname> &amp;</type><parameter name="color"><paramtype>const <classname>svg_color</classname> &amp;</paramtype></parameter><description><para>Set color of outlier.</para><para>
</para></description><returns><para>Reference to <classname alt="boost::svg::svg_boxplot">svg_boxplot</classname> to make chainable. </para></returns></method>
<method name="outlier_color"><type><classname>svg_color</classname></type><description><para>
</para></description><returns><para>Color of mild outlier. </para></returns></method>
<method name="outlier_fill"><type><classname>svg_boxplot</classname> &amp;</type><parameter name="color"><paramtype>const <classname>svg_color</classname> &amp;</paramtype></parameter><description><para>Set color of mild outlier fill.</para><para>
</para></description><returns><para>Reference to <classname alt="boost::svg::svg_boxplot">svg_boxplot</classname> to make chainable. </para></returns></method>
<method name="outlier_fill"><type><classname>svg_color</classname></type><description><para>
</para></description><returns><para>Color of outlier fill. </para></returns></method>
<method name="outlier_shape"><type><classname>svg_boxplot</classname> &amp;</type><parameter name="shape"><paramtype>point_shape</paramtype></parameter><description><para>Set shape of outlier marker.</para><para>
</para></description><returns><para>Reference to <classname alt="boost::svg::svg_boxplot">svg_boxplot</classname> to make chainable. </para></returns></method>
<method name="outlier_shape"><type>point_shape</type><description><para>
</para></description><returns><para>Outlier marker shape. </para></returns></method>
<method name="outlier_size"><type><classname>svg_boxplot</classname> &amp;</type><parameter name="size"><paramtype>int</paramtype></parameter><description><para>Set size of outlier marker.</para><para>
</para></description><returns><para>Reference to <classname alt="boost::svg::svg_boxplot">svg_boxplot</classname> to make chainable. </para></returns></method>
<method name="outlier_size"><type>int</type><description><para>
</para></description><returns><para>Size of outlier marker. </para></returns></method>
<method name="outlier_style"><type><classname>svg_boxplot</classname> &amp;</type><parameter name="os"><paramtype><classname>plot_point_style</classname> &amp;</paramtype></parameter><description><para>Set outlier style.</para><para>
</para></description><returns><para>Reference to <classname alt="boost::svg::svg_boxplot">svg_boxplot</classname> to make chainable. </para></returns></method>
<method name="outlier_style"><type><classname>plot_point_style</classname> &amp;</type><description><para>&lt; 
</para></description><returns><para>Outlier_style. </para></returns></method>
<method name="outlier_values_on"><type><classname>svg_boxplot</classname> &amp;</type><parameter name="cmd"><paramtype>bool</paramtype></parameter><description><para>Set <computeroutput>true</computeroutput> to show mild outlier values.</para><para>
</para></description><returns><para>Reference to <classname alt="boost::svg::svg_boxplot">svg_boxplot</classname> to make chainable. </para></returns></method>
<method name="outlier_values_on"><type>bool</type><description><para>
</para></description><returns><para><computeroutput>true</computeroutput> if to show mild outlier value(s). </para></returns></method>
<method name="plot"><type><classname>svg_boxplot_series</classname> &amp;</type><template>
          <template-type-parameter name="T"><purpose><para>STL Container type holding data series.</para></purpose></template-type-parameter>
        </template><parameter name="container"><paramtype>const T &amp;</paramtype><description><para>STL Container holding data series values to boxplot (must be convertible to double). </para></description></parameter><parameter name="title"><paramtype>const std::string &amp;</paramtype><description><para>Title of data series. </para></description></parameter><parameter name="bw"><paramtype>double</paramtype><description><para>Box width. </para></description></parameter><parameter name="bs"><paramtype><classname>svg_style</classname></paramtype><description><para>Box_style </para></description></parameter><parameter name="ms"><paramtype><classname>svg_style</classname></paramtype><description><para>Median marker style. </para></description></parameter><parameter name="as"><paramtype><classname>svg_style</classname></paramtype><description><para>Axis style. </para></description></parameter><parameter name="wl"><paramtype>double</paramtype><description><para>Whisker length. </para></description></parameter><parameter name="minws"><paramtype><classname>svg_style</classname></paramtype><description><para>Min whisker style. </para></description></parameter><parameter name="maxws"><paramtype><classname>svg_style</classname></paramtype><description><para>Max whisker style. </para></description></parameter><parameter name="os"><paramtype><classname>plot_point_style</classname></paramtype><description><para>Mild outlier style. </para></description></parameter><parameter name="extos"><paramtype><classname>plot_point_style</classname></paramtype><description><para>Extreme outlier style. </para></description></parameter><parameter name="q_def"><paramtype>int</paramtype><description><para>Quartile definition H&amp;F #. </para></description></parameter><parameter name="vs"><paramtype><classname>value_style</classname></paramtype><description><para>Style for data values. </para></description></parameter><parameter name="ss"><paramtype><classname>text_style</classname></paramtype><description><para>Series style - for series title.</para></description></parameter><purpose>Add a data series (the whole container) to boxplot. </purpose><description><para>

<emphasis role="bold">Example:</emphasis> </para><para><programlisting language="c++">myboxplot.plot(myvalues);
</programlisting> </para></description></method>
<method name="plot"><type><classname>svg_boxplot_series</classname> &amp;</type><template>
          <template-type-parameter name="T"><purpose><para>data series value type (must be convertible to <computeroutput>double</computeroutput>). </para></purpose></template-type-parameter>
        </template><parameter name="container"><paramtype>const T &amp;</paramtype><description><para>A container of data series to boxplot. </para></description></parameter><parameter name="title"><paramtype>const std::string &amp;</paramtype><default>""</default><description><para>Title for boxplot. (Warning given if the default "" is used.) </para></description></parameter><description><para>Add a container of data series to boxplot.<sbr/>
Plot version copying box'n'whiskers parameters from parent boxplot. 


</para></description><returns><para>Reference to data series just added. </para></returns></method>
<method name="plot_background_color"><type><classname>svg_boxplot</classname> &amp;</type><parameter name="col"><paramtype>const <classname>svg_color</classname> &amp;</paramtype></parameter><description><para>Set plot window background color.</para><para>
</para></description><returns><para>Reference to <classname alt="boost::svg::svg_boxplot">svg_boxplot</classname> to make chainable. </para></returns></method>
<method name="plot_background_color"><type><classname>svg_color</classname></type><description><para>
</para></description><returns><para>Color of the background for the plot. </para></returns></method>
<method name="plot_border_color"><type><classname>svg_boxplot</classname> &amp;</type><parameter name="col"><paramtype>const <classname>svg_color</classname> &amp;</paramtype></parameter><description><para>Set plot window border color.</para><para>
</para></description><returns><para>Reference to <classname alt="boost::svg::svg_boxplot">svg_boxplot</classname> to make chainable. </para></returns></method>
<method name="plot_border_color"><type><classname>svg_color</classname></type><description><para>
</para></description><returns><para>Color of the border of the background for the plot. </para></returns></method>
<method name="plot_border_width"><type><classname>svg_boxplot</classname> &amp;</type><parameter name="w"><paramtype>double</paramtype></parameter><purpose>Set the margin around the plot window border (svg units, default pixels). </purpose><description><para>This prevents the plot window getting too close to other elements of the plot. </para></description></method>
<method name="plot_border_width"><type>double</type><description><para>
</para></description><returns><para>the width for the plot window border (svg units, default pixels). </para></returns></method>
<method name="plot_window_on"><type><classname>svg_boxplot</classname> &amp;</type><parameter name="cmd"><paramtype>bool</paramtype></parameter><purpose>Set true if a plot window is wanted (or false if the whole image is to be used). </purpose></method>
<method name="plot_window_on"><type>bool</type><description><para>
</para></description><returns><para>true if a plot window is wanted (or false if the whole image is to be used). </para></returns></method>
<method name="plot_window_x"><type><classname>svg_boxplot</classname> &amp;</type><parameter name="min_x"><paramtype>double</paramtype></parameter><parameter name="max_x"><paramtype>double</paramtype></parameter><purpose>Set the minimum and maximum (cartesian data units) for the plot window X axis. This is normally calculated from other plot values. </purpose></method>
<method name="plot_window_x"><type>std::pair&lt; double, double &gt;</type><description><para>
</para></description><returns><para>both the left and right (X axis) of the plot window. </para></returns></method>
<method name="plot_window_x_left"><type>double</type><description><para>
</para></description><returns><para>left of the plot window. </para></returns></method>
<method name="plot_window_x_right"><type>double</type><description><para>
</para></description><returns><para>right of the plot window. </para></returns></method>
<method name="plot_window_y"><type><classname>svg_boxplot</classname> &amp;</type><parameter name="min_y"><paramtype>double</paramtype></parameter><parameter name="max_y"><paramtype>double</paramtype></parameter><purpose>Set the minimum and maximum (cartesian data units) for the plot window Y axis. This is normally calculated from other plot values. </purpose></method>
<method name="plot_window_y"><type>std::pair&lt; double, double &gt;</type><description><para>
</para></description><returns><para>both the top and bottom (Y axis) of the plot window. </para></returns></method>
<method name="plot_window_y_bottom"><type>double</type><description><para>
</para></description><returns><para>top of the plot window. </para></returns></method>
<method name="plot_window_y_top"><type>double</type><description><para>
</para></description><returns><para>top of the plot window. </para></returns></method>
<method name="quartile_definition"><type><classname>svg_boxplot</classname> &amp;</type><parameter name="def"><paramtype>int</paramtype></parameter><description><para>Set definition of quartile.</para><para>
</para></description><returns><para>Reference to <computeroutput><classname alt="boost::svg::svg_boxplot">svg_boxplot</classname></computeroutput> to make chainable. </para></returns></method>
<method name="quartile_definition"><type>int</type><description><para>
</para></description><returns><para>Definition # of quartile. </para></returns></method>
<method name="size"><type>std::pair&lt; double, double &gt;</type><description><para>
</para></description><returns><para>SVG image size, both horizontal width and vertical height (SVG units, default pixels). </para></returns></method>
<method name="size"><type><classname>svg_boxplot</classname> &amp;</type><parameter name="x"><paramtype>unsigned int</paramtype></parameter><parameter name="y"><paramtype>unsigned int</paramtype></parameter><description><para>Set SVG image width (x) and height (y).</para><para>
</para></description><returns><para>Reference to <classname alt="boost::svg::svg_boxplot">svg_boxplot</classname> to make chainable. </para></returns></method>
<method name="three_sd_color"><type><classname>svg_boxplot</classname> &amp;</type><parameter name=""><paramtype>const <classname>svg_color</classname> &amp;</paramtype></parameter><purpose>Set the color for three standard deviation (~99% confidence) ellipse fill. </purpose></method>
<method name="three_sd_color"><type><classname>svg_color</classname></type><description><para>
</para></description><returns><para>Color for three standard deviation (~99% confidence) ellipse fill. </para></returns></method>
<method name="title"><type><classname>svg_boxplot</classname> &amp;</type><parameter name="title"><paramtype>const std::string</paramtype></parameter><description><para>Set a title for plot. The string may include Unicode for greek letter and symbols. <emphasis role="bold">example:</emphasis> A title that includes a greek omega and degree symbols: <programlisting language="c++">my_plot.title("Plot of &amp;#x3A9; function (&amp;#x00B0;C)");
</programlisting></para><para>Unicode symbols are at <ulink url="http://unicode.org/charts/symbols.html">http://unicode.org/charts/symbols.html</ulink>. </para></description></method>
<method name="title"><type><classname>svg_boxplot</classname> &amp;</type><parameter name="str"><paramtype>const std::string &amp;</paramtype></parameter><description><para>Set title text for plot.</para><para>
</para></description><returns><para>Reference to <classname alt="boost::svg::svg_boxplot">svg_boxplot</classname> to make chainable. </para></returns></method>
<method name="title"><type>std::string</type><description><para>
</para></description><returns><para>title of the plot. </para></returns></method>
<method name="title_color"><type><classname>svg_boxplot</classname> &amp;</type><parameter name="col"><paramtype>const <classname>svg_color</classname> &amp;</paramtype></parameter><description><para>Set boxplot title color.</para><para>
</para></description><returns><para>Reference to <classname alt="boost::svg::svg_boxplot">svg_boxplot</classname> to make chainable. </para></returns></method>
<method name="title_color"><type><classname>svg_color</classname></type><description><para>
</para></description><returns><para>color of the title. </para></returns></method>
<method name="title_font_alignment"><type><classname>svg_boxplot</classname> &amp;</type><parameter name="alignment"><paramtype>align_style</paramtype></parameter><purpose>Set the alignment for the title. </purpose></method>
<method name="title_font_alignment"><type>align_style</type><description><para>
</para></description><returns><para>the alignment for the title. </para></returns></method>
<method name="title_font_decoration"><type><classname>svg_boxplot</classname> &amp;</type><parameter name="decoration"><paramtype>const std::string &amp;</paramtype></parameter><purpose>Set the font decoration for the title (default normal, or underline, overline or strike-thru). </purpose></method>
<method name="title_font_decoration"><type>const std::string &amp;</type><description><para>
</para></description><returns><para>Font decoration for the title (default normal, or underline, overline or strike-thru). </para></returns></method>
<method name="title_font_family"><type><classname>svg_boxplot</classname> &amp;</type><parameter name="family"><paramtype>const std::string &amp;</paramtype></parameter><purpose>Set the font family for the title (for example: .title_font_family("Lucida Sans Unicode");. </purpose></method>
<method name="title_font_family"><type>const std::string &amp;</type><description><para>
</para></description><returns><para>Font family for the title. </para></returns></method>
<method name="title_font_rotation"><type><classname>svg_boxplot</classname> &amp;</type><parameter name="rotate"><paramtype>rotate_style</paramtype></parameter><purpose>Set the rotation for the title font (degrees, 0 to 360 in steps using rotate_style, for example horizontal, uphill... </purpose></method>
<method name="title_font_rotation"><type>int</type><description><para>
</para></description><returns><para>the rotation for the title font (degrees). </para></returns></method>
<method name="title_font_size"><type><classname>svg_boxplot</classname> &amp;</type><parameter name="i"><paramtype>unsigned int</paramtype></parameter><purpose>Sets the font size for the title (SVG units, default pixels). </purpose></method>
<method name="title_font_size"><type>unsigned int</type><description><para>
</para></description><returns><para>Font size for the title (SVG units, default pixels). </para></returns></method>
<method name="title_font_stretch"><type><classname>svg_boxplot</classname> &amp;</type><parameter name="stretch"><paramtype>const std::string &amp;</paramtype></parameter><purpose>Set the font stretch for the title (default normal), wider or narrow. </purpose></method>
<method name="title_font_stretch"><type>const std::string &amp;</type><description><para>
</para></description><returns><para>Font stretch for the title. </para></returns></method>
<method name="title_font_style"><type><classname>svg_boxplot</classname> &amp;</type><parameter name="style"><paramtype>const std::string &amp;</paramtype></parameter><purpose>Set the font style for the title (default normal). </purpose></method>
<method name="title_font_style"><type>const std::string &amp;</type><description><para>
</para></description><returns><para>Font style for the title (default normal). </para></returns></method>
<method name="title_font_weight"><type><classname>svg_boxplot</classname> &amp;</type><parameter name="weight"><paramtype>const std::string &amp;</paramtype></parameter><purpose>Set the font weight for the title (default normal). </purpose></method>
<method name="title_font_weight"><type>const std::string &amp;</type><description><para>
</para></description><returns><para>Font weight for the title. </para></returns></method>
<method name="title_on"><type>bool</type><description><para>
</para></description><returns><para>true if will show a title for the plot. </para></returns></method>
<method name="title_on"><type><classname>svg_boxplot</classname> &amp;</type><parameter name="cmd"><paramtype>bool</paramtype></parameter><purpose>Write SVG boxplot to ostream. </purpose><description><para>Set true to show whole boxplot title.</para><para>
</para></description><returns><para>Reference to <classname alt="boost::svg::svg_boxplot">svg_boxplot</classname> to make chainable. </para></returns></method>
<method name="title_size"><type><classname>svg_boxplot</classname> &amp;</type><parameter name="size"><paramtype>unsigned int</paramtype></parameter><description><para>Set font size for title text.</para><para>
</para></description><returns><para>Reference to <classname alt="boost::svg::svg_boxplot">svg_boxplot</classname> to make chainable. </para></returns></method>
<method name="two_sd_color"><type><classname>svg_boxplot</classname> &amp;</type><parameter name=""><paramtype>const <classname>svg_color</classname> &amp;</paramtype></parameter><purpose>Set the color for two standard deviation (~95% confidence) ellipse fill. </purpose></method>
<method name="two_sd_color"><type><classname>svg_color</classname></type><description><para>
</para></description><returns><para>Color for two standard deviation (~95% confidence) ellipse fill. </para></returns></method>
<method name="whisker_length"><type><classname>svg_boxplot</classname> &amp;</type><parameter name="width"><paramtype>double</paramtype></parameter><description><para>Set the length of the whisker.</para><para>
</para></description><returns><para>Reference to <classname alt="boost::svg::svg_boxplot">svg_boxplot</classname> to make chainable. </para></returns></method>
<method name="whisker_length"><type>double</type><description><para>Get whisker length (width of the box, not the margin). </para></description><description><para>&lt; 
</para></description><returns><para>Length of whisker. </para></returns></method>
<method name="write"><type><classname>svg_boxplot</classname> &amp;</type><parameter name="file"><paramtype>const std::string &amp;</paramtype></parameter><description><para>Write SVG image to file. </para></description></method>
<method name="write"><type><classname>svg_boxplot</classname> &amp;</type><parameter name="s_out"><paramtype>std::ostream &amp;</paramtype></parameter><purpose>Write SVG boxplot to file. </purpose><description><para>Write SVG image to ostream.</para><para>
</para></description><returns><para>Reference to <classname alt="boost::svg::svg_boxplot">svg_boxplot</classname> to make chainable. </para></returns></method>
<method name="x_addlimits_color"><type><classname>svg_boxplot</classname> &amp;</type><parameter name="col"><paramtype>const <classname>svg_color</classname> &amp;</paramtype></parameter><purpose>Set the color of X confidence limits of value, for example, the color in "&lt;1.23, 1.45&gt;". </purpose></method>
<method name="x_addlimits_color"><type><classname>svg_color</classname></type><description><para>
</para></description><returns><para>the color of X confidence limits of value, for example, the color of "&lt;1.23, 1.45&gt;)". </para></returns></method>
<method name="x_addlimits_on"><type><classname>svg_boxplot</classname> &amp;</type><parameter name="b"><paramtype>bool</paramtype></parameter><purpose>Set if to append confidence limits to data point X values near data points markers. </purpose></method>
<method name="x_addlimits_on"><type>bool</type><description><para>
</para></description><returns><para>true if to append confidence limits estimate to data point X values near data points markers. </para></returns></method>
<method name="x_auto_max_value"><type>double</type><description><para>
</para></description><returns><para>X-axis maximum value computed by autoscale. </para></returns></method>
<method name="x_auto_min_value"><type>double</type><description><para>
</para></description><returns><para>X-axis minimum value computed by autoscale. </para></returns></method>
<method name="x_auto_tick_interval"><type>double</type><description><para>
</para></description><returns><para>the X-axis major tick interval computed by autoscale. </para></returns></method>
<method name="x_auto_ticks"><type>int</type><description><para>
</para></description><returns><para>the X-axis number of major ticks computed by autoscale. </para></returns></method>
<method name="x_autoscale"><type>bool</type><description><para>
</para></description><returns><para><computeroutput>true</computeroutput> if to use autoscale value for X-axis. </para></returns></method>
<method name="x_autoscale"><type><classname>svg_boxplot</classname> &amp;</type><parameter name="b"><paramtype>bool</paramtype></parameter><purpose>Set <computeroutput>true</computeroutput> if to use autoscale values for X-axis. </purpose></method>
<method name="x_autoscale"><type><classname>svg_boxplot</classname> &amp;</type><parameter name="p"><paramtype>std::pair&lt; double, double &gt;</paramtype></parameter><purpose>autoscale X axis using a pair of doubles. </purpose></method>
<method name="x_autoscale"><type><classname>svg_boxplot</classname> &amp;</type><parameter name="container"><paramtype>const T &amp;</paramtype></parameter><purpose>&lt; </purpose><description><para>
</para></description></method>
<method name="x_autoscale"><type><classname>svg_boxplot</classname> &amp;</type><parameter name="begin"><paramtype>const T &amp;</paramtype></parameter><parameter name="end"><paramtype>const T &amp;</paramtype></parameter><purpose>&lt; </purpose><description><para>
</para></description></method>
<method name="x_axis_color"><type><classname>svg_boxplot</classname> &amp;</type><parameter name="col"><paramtype>const <classname>svg_color</classname> &amp;</paramtype></parameter><purpose>Set the color of the X-axis line. </purpose></method>
<method name="x_axis_color"><type><classname>svg_color</classname></type><description><para>
</para></description><returns><para>the color of the X-axis line. </para></returns></method>
<method name="x_axis_label_color"><type><classname>svg_boxplot</classname> &amp;</type><parameter name="col"><paramtype>const <classname>svg_color</classname> &amp;</paramtype></parameter><purpose>Set X axis label color, for example, red. </purpose></method>
<method name="x_axis_label_color"><type><classname>svg_color</classname></type><description><para>
</para></description><returns><para>X axis label color. &lt;X-axis ticks values label style. </para></returns></method>
<method name="x_axis_on"><type><classname>svg_boxplot</classname> &amp;</type><parameter name="is"><paramtype>bool</paramtype></parameter><purpose>If set true, draw a horizontal X-axis line. </purpose></method>
<method name="x_axis_on"><type>bool</type><description><para>
</para></description><returns><para>true if will draw a horizontal X-axis line. </para></returns></method>
<method name="x_axis_position"><type><classname>svg_boxplot</classname> &amp;</type><parameter name="pos"><paramtype>int</paramtype></parameter><description><para>Set position of the horizontal X-axis line (on the border).<sbr/>
But controlled by the intersection with Y-axis, so this only changes the default position from bottom to top, but will be changed if X-axis intersects the Y-axis (that is, if Y-axis includes zero).</para><para>
</para></description><returns><para>Reference to <classname alt="boost::svg::svg_boxplot">svg_boxplot</classname> to make chainable. </para></returns></method>
<method name="x_axis_position"><type>double</type><description><para>
</para></description><returns><para>position of the horizontal X-axis line (on the border). </para></returns></method>
<method name="x_axis_vertical"><type><classname>svg_boxplot</classname> &amp;</type><parameter name="fraction"><paramtype>double</paramtype></parameter><purpose>Set vertical position of X-axis for 1D as fraction of plot window. </purpose></method>
<method name="x_axis_vertical"><type>bool</type><description><para>
</para></description><returns><para>vertical position of X-axis for 1D as fraction of plot window. </para></returns></method>
<method name="x_axis_width"><type><classname>svg_boxplot</classname> &amp;</type><parameter name="width"><paramtype>double</paramtype></parameter><purpose>Set the width of X-axis lines. </purpose></method>
<method name="x_axis_width"><type>double</type><description><para>
</para></description><returns><para>the width of X-axis lines. </para></returns></method>
<method name="x_datetime_color"><type><classname>svg_boxplot</classname> &amp;</type><parameter name="col"><paramtype>const <classname>svg_color</classname> &amp;</paramtype></parameter><purpose>Set the color of X date time , for example, the color of text in "". </purpose></method>
<method name="x_datetime_color"><type><classname>svg_color</classname></type><description><para>
</para></description><returns><para>the color of X date time, for example, the color of text in "". </para></returns></method>
<method name="x_datetime_on"><type><classname>svg_boxplot</classname> &amp;</type><parameter name="b"><paramtype>bool</paramtype></parameter><purpose>Set true if to append date time to data point X values near data points markers. </purpose></method>
<method name="x_datetime_on"><type>bool</type><description><para>
</para></description><returns><para>true if to append an date time to data point X values near data points markers. </para></returns></method>
<method name="x_decor"><type><classname>svg_boxplot</classname> &amp;</type><parameter name="pre"><paramtype>const std::string &amp;</paramtype></parameter><parameter name="sep"><paramtype>const std::string &amp;</paramtype><default>""</default></parameter><parameter name="suf"><paramtype>const std::string &amp;</paramtype><default>""</default></parameter><description><para>Set prefix, separator and suffix together for x_ values. Note if you want a space, you must use a Unicode space "&amp;#x00A0;", for example, ",&amp;#x00A0;" rather than ASCII space", ". If 1st char in separator == <sbr/>
, then Y values and info will be on a newline below. </para></description></method>
<method name="x_df_color"><type><classname>svg_boxplot</classname> &amp;</type><parameter name="col"><paramtype>const <classname>svg_color</classname> &amp;</paramtype></parameter><purpose>Set the color of X degrees of freedom, for example, the color of 9 in "1.23 +-0.02 (9)". </purpose></method>
<method name="x_df_color"><type><classname>svg_color</classname></type><description><para>
</para></description><returns><para>the color of X degrees of freedom, for example, the color of 9 in "1.23 +-0.02 (9)". </para></returns></method>
<method name="x_df_on"><type><classname>svg_boxplot</classname> &amp;</type><parameter name="b"><paramtype>bool</paramtype></parameter><purpose>Set true if to append a degrees of freedom estimate to data point X values near data points markers. </purpose></method>
<method name="x_df_on"><type>bool</type><description><para>
</para></description><returns><para>true if to append a degrees of freedom estimate to data point X values near data points markers. </para></returns></method>
<method name="x_id_color"><type><classname>svg_boxplot</classname> &amp;</type><parameter name="col"><paramtype>const <classname>svg_color</classname> &amp;</paramtype></parameter><purpose>Set the color of X id or name, for example, the color of text in "my_id". </purpose></method>
<method name="x_id_color"><type><classname>svg_color</classname></type><description><para>
</para></description><returns><para>the color of X X id or name, for example, the color of text in "my_id". </para></returns></method>
<method name="x_id_on"><type><classname>svg_boxplot</classname> &amp;</type><parameter name="b"><paramtype>bool</paramtype></parameter><purpose>Set true if to append append an ID or name to data point X values near data points markers. </purpose></method>
<method name="x_id_on"><type>bool</type><description><para>
</para></description><returns><para>true if to append an ID or name to data point X values near data points markers. </para></returns></method>
<method name="x_label"><type>std::string</type><description><para>
</para></description><returns><para>the text to label the X-axis. </para></returns></method>
<method name="x_label"><type><classname>svg_boxplot</classname> &amp;</type><parameter name="str"><paramtype>const std::string &amp;</paramtype></parameter><description><para>Set label for X axis (can also append optional units). <para><emphasis role="bold">See Also:</emphasis><para>x_label_units_on and </para></para>
<para><emphasis role="bold">See Also:</emphasis><para>x_label_units</para></para>

</para></description><returns><para>Reference to <classname alt="boost::svg::svg_boxplot">svg_boxplot</classname> to make chainable. </para></returns></method>
<method name="x_label_color"><type><classname>svg_boxplot</classname> &amp;</type><parameter name="col"><paramtype>const <classname>svg_color</classname> &amp;</paramtype></parameter><description><para>Set the font color for the X axis label.</para><para>
</para></description><returns><para>Reference to <classname alt="boost::svg::svg_boxplot">svg_boxplot</classname> to make chainable. </para></returns></method>
<method name="x_label_color"><type><classname>svg_color</classname></type><description><para>
</para></description><returns><para>Color of the X axis label. </para></returns></method>
<method name="x_label_font_family"><type><classname>svg_boxplot</classname> &amp;</type><parameter name="family"><paramtype>const std::string &amp;</paramtype></parameter><description><para>Set X tick value label font family. Available fonts depend on the program rendering the SVG XML, usually a browser. The default font (usually "default_font") is used if a render program does not provide the font specified. These are probably usable: <programlisting language="c++">"arial", "impact", "courier", "lucida console",  "Lucida sans unicode", "verdana", "calibri", "century",
"lucida calligraphy", "tahoma", "vivaldi", "informal roman", "lucida handwriting", "lucida bright", "helvetica"
</programlisting> </para></description></method>
<method name="x_label_font_family"><type>const std::string &amp;</type><description><para>
</para></description><returns><para>X tick value label font family. </para></returns></method>
<method name="x_label_font_size"><type><classname>svg_boxplot</classname> &amp;</type><parameter name="i"><paramtype>unsigned int</paramtype></parameter><purpose>Set X axis label font size (svg units, default pixels). </purpose></method>
<method name="x_label_font_size"><type>unsigned int</type><description><para>
</para></description><returns><para>X axis label font size (svg units, default pixels). </para></returns></method>
<method name="x_label_on"><type><classname>svg_boxplot</classname> &amp;</type><parameter name="cmd"><paramtype>bool</paramtype></parameter><purpose>true if to include title in plot. </purpose><description><para>Set true if X axis name or label, for example: "length of thing".</para><para>
</para></description><returns><para>Reference to <classname alt="boost::svg::svg_boxplot">svg_boxplot</classname> to make chainable. </para></returns></method>
<method name="x_label_on"><type>bool</type><description><para>
</para></description><returns><para>label for the X axis. </para></returns></method>
<method name="x_label_size"><type><classname>svg_boxplot</classname> &amp;</type><parameter name="size"><paramtype>unsigned int</paramtype></parameter><description><para>Set the font size for the X axis label.</para><para>
</para></description><returns><para>Reference to <classname alt="boost::svg::svg_boxplot">svg_boxplot</classname> to make chainable. </para></returns></method>
<method name="x_label_text"><type>std::string</type><description><para>
</para></description><returns><para>Text of label for X axis. </para></returns></method>
<method name="x_label_units"><type><classname>svg_boxplot</classname> &amp;</type><parameter name="str"><paramtype>const std::string &amp;</paramtype></parameter><purpose>Set the text to add units to the X-axis label. </purpose></method>
<method name="x_label_units"><type>std::string</type><description><para>
</para></description><returns><para>the text to add units to the X-axis label. &lt;The label will only be shown if x_label_on() == true. </para></returns></method>
<method name="x_label_units_on"><type><classname>svg_boxplot</classname> &amp;</type><parameter name="cmd"><paramtype>bool</paramtype></parameter><purpose>Set true if want X axis label to include units (as well as label like "length"). &lt;. </purpose><description><para><para><emphasis role="bold">See Also:</emphasis><para>x_label_units which also sets true. </para></para>
</para></description></method>
<method name="x_label_units_on"><type>bool</type><purpose>Set true if want X axis label to include units (as well as label like "length"). </purpose></method>
<method name="x_label_width"><type><classname>svg_boxplot</classname> &amp;</type><parameter name="width"><paramtype>double</paramtype></parameter><purpose>Set the width (boldness) of X-axis label (including any units). (not recommended until browsers implement better). </purpose></method>
<method name="x_label_width"><type>double</type><description><para>
</para></description><returns><para>the width (boldness) of X-axis label (including any units). </para></returns></method>
<method name="x_labels_strip_e0s"><type><classname>svg_boxplot</classname> &amp;</type><parameter name="cmd"><paramtype>bool</paramtype></parameter><purpose>Set if to strip redundant zeros, signs and exponents, for example, reducing "1.2e+000" to "1.2" This markedly reduces visual clutter, and is the default. </purpose></method>
<method name="x_major_grid_color"><type><classname>svg_boxplot</classname> &amp;</type><parameter name="col"><paramtype>const <classname>svg_color</classname> &amp;</paramtype></parameter><purpose>Set the color of X-axis major grid lines. </purpose></method>
<method name="x_major_grid_color"><type><classname>svg_color</classname></type><purpose>Set the color of X-axis major grid lines. </purpose></method>
<method name="x_major_grid_on"><type><classname>svg_boxplot</classname> &amp;</type><parameter name="is"><paramtype>bool</paramtype></parameter><purpose>If set true, will include a major X-axis grid. </purpose></method>
<method name="x_major_grid_on"><type>bool</type><description><para>
</para></description><returns><para>true if will include a major X-axis grid. </para></returns></method>
<method name="x_major_grid_width"><type><classname>svg_boxplot</classname> &amp;</type><parameter name="w"><paramtype>double</paramtype></parameter><purpose>Set the width of X-axis major grid lines. </purpose></method>
<method name="x_major_grid_width"><type>double</type><description><para>
</para></description><returns><para>the color of X-axis major grid lines. </para></returns></method>
<method name="x_major_interval"><type><classname>svg_boxplot</classname> &amp;</type><parameter name="inter"><paramtype>double</paramtype></parameter><purpose>Set the interval between X-axis major ticks. </purpose></method>
<method name="x_major_interval"><type>double</type><description><para>
</para></description><returns><para>the interval between X-axis major ticks. </para></returns></method>
<method name="x_major_label_rotation"><type><classname>svg_boxplot</classname> &amp;</type><parameter name="rot"><paramtype>rotate_style</paramtype></parameter><description><para>Set rotation for X ticks major value labels. (Default horizontal). <para><emphasis role="bold">See Also:</emphasis><para>rotate_style </para></para>
</para></description></method>
<method name="x_major_label_rotation"><type>rotate_style</type><description><para>
<para><emphasis role="bold">See Also:</emphasis><para>rotate_style </para></para>
</para></description><returns><para>rotation for X ticks major value labels. </para></returns></method>
<method name="x_major_labels"><type>int</type><description><para>
</para></description><returns><para>which side of the X axis for labels. </para></returns></method>
<method name="x_major_labels_on"><type><classname>svg_boxplot</classname> &amp;</type><parameter name="cmd"><paramtype>int</paramtype></parameter><description><para>Set direction of X major labels.<sbr/>
 0 means to down (default), 0 (false) means none, &gt; 0 means to top.</para><para>
</para></description><returns><para>Reference to <classname alt="boost::svg::svg_boxplot">svg_boxplot</classname> to make chainable. </para></returns></method>
<method name="x_major_labels_side"><type><classname>svg_boxplot</classname> &amp;</type><parameter name="side"><paramtype>int</paramtype><description><para>&gt; 0 X tick value labels to left of Y axis line (default), 0 (false) no major X tick value labels on Y axis, 0 X tick labels to right of Y axis line. </para></description></parameter><description><para>Position of labels for X major ticks on horizontal X axis line. 
</para></description></method>
<method name="x_major_labels_side"><type>int</type><description><para>
</para></description><returns><para>the side for X ticks major value labels. </para></returns></method>
<method name="x_major_tick"><type><classname>svg_boxplot</classname> &amp;</type><parameter name="d"><paramtype>double</paramtype></parameter><purpose>Set interval (Cartesian units) between major ticks. </purpose></method>
<method name="x_major_tick"><type>double</type><description><para>
</para></description><returns><para>interval (Cartesian units) between major ticks. </para></returns></method>
<method name="x_major_tick_color"><type><classname>svg_boxplot</classname> &amp;</type><parameter name="col"><paramtype>const <classname>svg_color</classname> &amp;</paramtype></parameter><purpose>Set the color of X-axis major ticks. </purpose></method>
<method name="x_major_tick_color"><type><classname>svg_color</classname></type><description><para>
</para></description><returns><para>the color of X-axis major ticks. </para></returns></method>
<method name="x_major_tick_length"><type><classname>svg_boxplot</classname> &amp;</type><parameter name="length"><paramtype>double</paramtype></parameter><purpose>Set length of X major ticks (SVG units, default pixels). </purpose></method>
<method name="x_major_tick_length"><type>double</type><purpose>Set length of X major ticks (SVG units, default pixels). </purpose></method>
<method name="x_major_tick_width"><type><classname>svg_boxplot</classname> &amp;</type><parameter name="width"><paramtype>double</paramtype></parameter><purpose>Set width of X major ticks (SVG units, default pixels). </purpose></method>
<method name="x_major_tick_width"><type>double</type><description><para>
</para></description><returns><para>Width of major ticks on the X axis. </para></returns></method>
<method name="x_max"><type><classname>svg_boxplot</classname> &amp;</type><parameter name="x"><paramtype>double</paramtype></parameter><purpose>Set the maximum value on the X-axis. </purpose></method>
<method name="x_max"><type>double</type><purpose>autoscale set &amp; get parameters, &lt;Note: all these <emphasis>MUST</emphasis> preceed x_autoscale(data) call. </purpose><description><para>
</para></description><returns><para>the maximum value on the X-axis. </para></returns></method>
<method name="x_min"><type><classname>svg_boxplot</classname> &amp;</type><parameter name="min_x"><paramtype>double</paramtype></parameter><purpose>Set the minimum value on the X-axis. </purpose></method>
<method name="x_min"><type>double</type><description><para>
</para></description><returns><para>the minimum value on the X-axis. </para></returns></method>
<method name="x_min_ticks"><type><classname>svg_boxplot</classname> &amp;</type><parameter name="min_ticks"><paramtype>int</paramtype></parameter><purpose>Set X-axis autoscale to include at least minimum number of ticks (default = 6). </purpose></method>
<method name="x_min_ticks"><type>int</type><description><para>
</para></description><returns><para>X-axis autoscale minimum number of ticks. </para></returns></method>
<method name="x_minor_grid_color"><type><classname>svg_boxplot</classname> &amp;</type><parameter name="col"><paramtype>const <classname>svg_color</classname> &amp;</paramtype></parameter><purpose>Set the color of X-axis minor grid lines. </purpose></method>
<method name="x_minor_grid_color"><type><classname>svg_color</classname></type><description><para>
</para></description><returns><para>the color of X-axis minor grid lines. </para></returns></method>
<method name="x_minor_grid_on"><type><classname>svg_boxplot</classname> &amp;</type><parameter name="is"><paramtype>bool</paramtype></parameter><purpose>If set true, will include a minor X-axis grid. </purpose></method>
<method name="x_minor_grid_on"><type>bool</type><description><para>
</para></description><returns><para>true if will include a major X-axis grid. </para></returns></method>
<method name="x_minor_grid_width"><type><classname>svg_boxplot</classname> &amp;</type><parameter name="w"><paramtype>double</paramtype></parameter><purpose>Set the width of X-axis minor grid lines. </purpose></method>
<method name="x_minor_grid_width"><type>double</type><description><para>
</para></description><returns><para>the width of X-axis minor grid lines. </para></returns></method>
<method name="x_minor_interval"><type>double</type><description><para>
</para></description><returns><para>interval between X minor ticks. </para></returns></method>
<method name="x_minor_interval"><type><classname>svg_boxplot</classname> &amp;</type><parameter name="interval"><paramtype>double</paramtype></parameter><purpose>Set interval between X-axis minor ticks. </purpose></method>
<method name="x_minor_tick_color"><type><classname>svg_boxplot</classname> &amp;</type><parameter name="col"><paramtype>const <classname>svg_color</classname> &amp;</paramtype></parameter><purpose>Set the color of X-axis minor ticks. </purpose></method>
<method name="x_minor_tick_color"><type><classname>svg_color</classname></type><description><para>
</para></description><returns><para>the color of X-axis minor ticks. </para></returns></method>
<method name="x_minor_tick_length"><type><classname>svg_boxplot</classname> &amp;</type><parameter name="length"><paramtype>double</paramtype></parameter><purpose>Set length of X minor ticks (SVG units, default pixels). </purpose></method>
<method name="x_minor_tick_length"><type>double</type><description><para>
</para></description><returns><para>length of X minor ticks (SVG units, default pixels). </para></returns></method>
<method name="x_minor_tick_width"><type><classname>svg_boxplot</classname> &amp;</type><parameter name="width"><paramtype>double</paramtype></parameter><purpose>Set width of X minor ticks (SVG units, default pixels). </purpose></method>
<method name="x_minor_tick_width"><type>double</type><description><para>
</para></description><returns><para>width of X minor ticks (SVG units, default pixels). </para></returns></method>
<method name="x_num_minor_ticks"><type><classname>svg_boxplot</classname> &amp;</type><parameter name="num"><paramtype>unsigned int</paramtype></parameter><purpose>Set number of X-axis minor ticks between major ticks. </purpose></method>
<method name="x_num_minor_ticks"><type>unsigned int</type><description><para>
</para></description><returns><para>number of X-axis minor ticks between major ticks. </para></returns></method>
<method name="x_order_color"><type><classname>svg_boxplot</classname> &amp;</type><parameter name="col"><paramtype>const <classname>svg_color</classname> &amp;</paramtype></parameter><purpose>Set the color of X order #, for example, the color of #42. </purpose></method>
<method name="x_order_color"><type><classname>svg_color</classname></type><description><para>
</para></description><returns><para>the color of X order #, for example, the color of #42. </para></returns></method>
<method name="x_order_on"><type><classname>svg_boxplot</classname> &amp;</type><parameter name="b"><paramtype>bool</paramtype></parameter><purpose>Set true if to append append an order # to data point X values near data points markers. </purpose></method>
<method name="x_order_on"><type>bool</type><description><para>
</para></description><returns><para>true if to append an order # to data point X values near data points markers. </para></returns></method>
<method name="x_plusminus_color"><type><classname>svg_boxplot</classname> &amp;</type><parameter name="col"><paramtype>const <classname>svg_color</classname> &amp;</paramtype></parameter><purpose>Set the color of X std_dev of value, for example, the color of 0.02 in "1.23 +-0.02 (9)". </purpose></method>
<method name="x_plusminus_color"><type><classname>svg_color</classname></type><description><para>
</para></description><returns><para>the color of X std_dev of value, for example, the color of 0.02 in "1.23 +-0.02 (9)". </para></returns></method>
<method name="x_plusminus_on"><type><classname>svg_boxplot</classname> &amp;</type><parameter name="b"><paramtype>bool</paramtype></parameter><purpose>Set if to append std_dev estimate to data point X values near data points markers. </purpose></method>
<method name="x_plusminus_on"><type>bool</type><description><para>
</para></description><returns><para>true if to append std_dev estimate to data point X values near data points markers. </para></returns></method>
<method name="x_prefix"><type>const std::string</type><description><para>
</para></description><returns><para>the prefix. </para></returns></method>
<method name="x_range"><type><classname>svg_boxplot</classname> &amp;</type><parameter name="min_x"><paramtype>double</paramtype></parameter><parameter name="max_x"><paramtype>double</paramtype></parameter><description><para>Set the range of values on the X-axis. The minimum and maximum values must be finite and not too near to the minima or maxima that can be represented by floating point double, std::numeric_limits&lt;double&gt;::min() or std::numeric_limits&lt;double&gt;::max(), and the range must not be too small. </para></description></method>
<method name="x_range"><type>std::pair&lt; double, double &gt;</type><description><para>
</para></description><returns><para>the range of values on the X-axis. </para></returns></method>
<method name="x_separator"><type>const std::string</type><description><para>
</para></description><returns><para>the separator, perhaps including Unicode. </para></returns></method>
<method name="x_size"><type><classname>svg_boxplot</classname> &amp;</type><parameter name="i"><paramtype>unsigned int</paramtype></parameter><purpose>Set SVG image X-axis size (SVG units, default pixels). </purpose></method>
<method name="x_size"><type>unsigned int</type><description><para>
</para></description><returns><para>width of the SVG image. </para></returns></method>
<method name="x_steps"><type><classname>svg_boxplot</classname> &amp;</type><parameter name="steps"><paramtype>int</paramtype></parameter><description><para>Set autoscale to set ticks in steps multiples of:<sbr/>
2,4,6,8,10, if 2<sbr/>
or 1,5,10 if 5<sbr/>
or 2,5,10 if 10.<sbr/>
default = 0 (none). <note><para>: Must <emphasis role="bold">preceed</emphasis> x_autoscale(data) call). </para></note>
</para></description></method>
<method name="x_steps"><type>int</type><description><para>
</para></description><returns><para>autoscale to set ticks in steps. </para></returns></method>
<method name="x_suffix"><type>const std::string</type><description><para>
</para></description><returns><para>the suffix (only used if separator != "") </para></returns></method>
<method name="x_tick_color"><type><classname>svg_boxplot</classname> &amp;</type><parameter name="col"><paramtype>const <classname>svg_color</classname> &amp;</paramtype></parameter><description><para>

</para></description><returns><para>Y major ticks color.</para></returns><returns><para>Reference to <classname alt="boost::svg::svg_boxplot">svg_boxplot</classname> to make chainable. </para></returns></method>
<method name="x_tick_color"><type><classname>svg_color</classname></type><description><para>
</para></description><returns><para>Color of ticks on the X axis. </para></returns></method>
<method name="x_tick_length"><type><classname>svg_boxplot</classname> &amp;</type><parameter name="length"><paramtype>unsigned int</paramtype></parameter><description><para>Set the length of major ticks on the X axis.</para><para>
</para></description><returns><para>Reference to <classname alt="boost::svg::svg_boxplot">svg_boxplot</classname> to make chainable. </para></returns></method>
<method name="x_tick_length"><type>double</type><description><para>
</para></description><returns><para>Length of major ticks on the X axis. </para></returns></method>
<method name="x_tick_width"><type><classname>svg_boxplot</classname> &amp;</type><parameter name="width"><paramtype>unsigned int</paramtype></parameter><description><para>Set the width of major ticks on the X axis.</para><para>
</para></description><returns><para>Reference to <classname alt="boost::svg::svg_boxplot">svg_boxplot</classname> to make chainable. </para></returns></method>
<method name="x_ticks_down_on"><type><classname>svg_boxplot</classname> &amp;</type><parameter name="cmd"><paramtype>bool</paramtype></parameter><purpose>Set true if Y major ticks should mark upwards. </purpose></method>
<method name="x_ticks_down_on"><type>bool</type><description><para>
</para></description><returns><para>true if Y major ticks should mark upwards. </para></returns></method>
<method name="x_ticks_on_window_or_axis"><type><classname>svg_boxplot</classname> &amp;</type><parameter name="side"><paramtype>int</paramtype><description><para>-1 X ticks on bottom of plot window, 0 X ticks on X-axis horizontal line, +1 X ticks top of plot window. </para></description></parameter><description><para>Set position of X ticks on window or axis. 
</para></description></method>
<method name="x_ticks_on_window_or_axis"><type>int</type><description><para>
</para></description><returns><para>true if X axis ticks wanted on the window (rather than on axis).<sbr/>
&lt;-1 bottom of plot window, 0 on horiztonal X axis , +1 top of plot window. </para></returns></method>
<method name="x_ticks_up_on"><type><classname>svg_boxplot</classname> &amp;</type><parameter name="cmd"><paramtype>bool</paramtype></parameter><purpose>Set true if X major ticks should mark upwards. </purpose></method>
<method name="x_ticks_up_on"><type>bool</type><description><para>
</para></description><returns><para>true if X major ticks should mark upwards. </para></returns></method>
<method name="x_ticks_values_color"><type><classname>svg_boxplot</classname> &amp;</type><parameter name="col"><paramtype>const <classname>svg_color</classname> &amp;</paramtype></parameter><purpose>Set X axis tick value label color. </purpose></method>
<method name="x_ticks_values_color"><type><classname>svg_color</classname></type><description><para>
</para></description><returns><para>X-axis ticks value label color. </para></returns></method>
<method name="x_ticks_values_font_family"><type><classname>svg_boxplot</classname> &amp;</type><parameter name="family"><paramtype>const std::string &amp;</paramtype></parameter><description><para>Set X ticks value label font family. Available fonts depend on the program rendering the SVG XML, usually a browser. The default font (usually "default_font") is used if a render program does not provide the font specified. These are probably usable: <programlisting language="c++">"arial", "impact", "courier", "lucida console",  "Lucida sans unicode", "verdana", "calibri", "century",
"lucida calligraphy", "tahoma", "vivaldi", "informal roman", "lucida handwriting", "lucida bright", "helvetica"
</programlisting> </para></description></method>
<method name="x_ticks_values_font_family"><type>const std::string &amp;</type><description><para>
</para></description><returns><para>X ticks value label font family. </para></returns></method>
<method name="x_ticks_values_font_size"><type><classname>svg_boxplot</classname> &amp;</type><parameter name="i"><paramtype>unsigned int</paramtype></parameter><purpose>Set X ticks value label font size (svg units, default pixels). </purpose></method>
<method name="x_ticks_values_font_size"><type>unsigned int</type><purpose>Set X ticks value label font size (svg units, default pixels). </purpose></method>
<method name="x_ticks_values_ioflags"><type><classname>svg_boxplot</classname> &amp;</type><parameter name="f"><paramtype>std::ios_base::fmtflags</paramtype></parameter><purpose>Set iostream format flags of data point X values near data points markers. </purpose></method>
<method name="x_ticks_values_ioflags"><type>std::ios_base::fmtflags</type><description><para>
</para></description><returns><para>iostream format flags of data point X values near data points markers. </para></returns></method>
<method name="x_ticks_values_precision"><type><classname>svg_boxplot</classname> &amp;</type><parameter name="p"><paramtype>int</paramtype></parameter><purpose>Set iostream decimal digits precision of data point X values near data points markers. </purpose></method>
<method name="x_ticks_values_precision"><type>int</type><description><para>
</para></description><returns><para>iostream decimal digits precision of data point X values near data points markers. </para></returns></method>
<method name="x_tight"><type><classname>svg_boxplot</classname> &amp;</type><parameter name="tight"><paramtype>double</paramtype></parameter><purpose>Set tolerance to autoscale to permit data points slightly outside both end ticks. </purpose></method>
<method name="x_tight"><type>double</type><description><para>
</para></description><returns><para>tolerance given to autoscale to permit data points slightly outside both end ticks. &lt;Get results of autoscaling. </para></returns></method>
<method name="x_value_font_size"><type><classname>svg_boxplot</classname> &amp;</type><parameter name="i"><paramtype>unsigned int</paramtype></parameter><purpose>Set X tick value label font size (svg units, default pixels). </purpose></method>
<method name="x_value_font_size"><type>unsigned int</type><description><para>
</para></description><returns><para>X tick value label font size (svg units, default pixels). </para></returns></method>
<method name="x_value_ioflags"><type><classname>svg_boxplot</classname> &amp;</type><parameter name="flags"><paramtype>std::ios_base::fmtflags</paramtype></parameter><description><para>Set iostream std::ios::fmtflags for X value label (default decimal == 0X201). Mainly useful for changing to scientific, fixed or hexadecimal format. For example: <programlisting language="c++">myplot.x_value_ioflags(std::ios::dec | std::ios::scientific)
</programlisting> </para></description></method>
<method name="x_value_ioflags"><type>std::ios_base::fmtflags</type><description><para>
</para></description><returns><para>stream std::ios::fmtflags for control of format of X value labels. </para></returns></method>
<method name="x_value_precision"><type><classname>svg_boxplot</classname> &amp;</type><parameter name="digits"><paramtype>int</paramtype></parameter><description><para>Set precision of X-tick label values in decimal digits (default 3). 3 decimal digits precision is sufficient for small images. 4 or 5 decimal digits precision will give more cluttered plots. If the range of labels is very small, then more digits will be essential. </para></description></method>
<method name="x_value_precision"><type>int</type><description><para>
</para></description><returns><para>Precision of X-tick label values in decimal digits </para></returns></method>
<method name="x_values_color"><type><classname>svg_boxplot</classname> &amp;</type><parameter name="col"><paramtype>const <classname>svg_color</classname> &amp;</paramtype></parameter><purpose>Set the color of data point X values near data points markers. </purpose></method>
<method name="x_values_color"><type><classname>svg_color</classname></type><description><para>
</para></description><returns><para>the color of data point X values near data points markers. </para></returns></method>
<method name="x_values_font_family"><type><classname>svg_boxplot</classname> &amp;</type><parameter name="family"><paramtype>const std::string &amp;</paramtype></parameter><purpose>Set font family of data point X values near data points markers. </purpose></method>
<method name="x_values_font_family"><type>const std::string &amp;</type><description><para>
</para></description><returns><para>font family of data point X values near data points markers. </para></returns></method>
<method name="x_values_font_size"><type><classname>svg_boxplot</classname> &amp;</type><parameter name="i"><paramtype>unsigned int</paramtype></parameter><purpose>Set font size of data point X values near data points markers. </purpose></method>
<method name="x_values_font_size"><type>unsigned int</type><description><para>
</para></description><returns><para>font size of data point X values near data points markers. </para></returns></method>
<method name="x_values_ioflags"><type><classname>svg_boxplot</classname> &amp;</type><parameter name="f"><paramtype>std::ios_base::fmtflags</paramtype></parameter><purpose>Set iostream format flags of data point X values near data points markers. </purpose></method>
<method name="x_values_ioflags"><type>std::ios_base::fmtflags</type><description><para>
</para></description><returns><para>iostream format flags of data point X values near data points markers. </para></returns></method>
<method name="x_values_on"><type><classname>svg_boxplot</classname> &amp;</type><parameter name="b"><paramtype>bool</paramtype></parameter><purpose>Set true to show data point values near data points markers. </purpose></method>
<method name="x_values_on"><type>bool</type><description><para>
</para></description><returns><para>true if to show data point values near data points markers. </para></returns></method>
<method name="x_values_precision"><type><classname>svg_boxplot</classname> &amp;</type><parameter name="p"><paramtype>int</paramtype></parameter><purpose>Set iostream decimal digits precision of data point X values near data points markers. </purpose></method>
<method name="x_values_precision"><type>int</type><description><para>
</para></description><returns><para>iostream decimal digits precision of data point X values near data points markers. </para></returns></method>
<method name="x_values_rotation"><type><classname>svg_boxplot</classname> &amp;</type><parameter name="rotate"><paramtype>rotate_style</paramtype></parameter><description><para>
</para></description><returns><para>the rotation (rotate_style) of data point X values near data points markers. </para></returns></method>
<method name="x_values_rotation"><type>int</type><purpose>Set the rotation (rotate_style) of data point X values near data points markers. </purpose></method>
<method name="x_with_zero"><type><classname>svg_boxplot</classname> &amp;</type><parameter name="b"><paramtype>bool</paramtype></parameter><purpose>Set X-axis autoscale to include zero (default = false). </purpose></method>
<method name="x_with_zero"><type>bool</type><description><para>
</para></description><returns><para>true if X-axis autoscale to include zero (default = false). </para></returns></method>
<method name="y_autoscale"><type>bool</type><description><para>
</para></description><returns><para><computeroutput>true</computeroutput> if Y-axis to use autoscaling. </para></returns></method>
<method name="y_autoscale"><type><classname>svg_boxplot</classname> &amp;</type><parameter name="b"><paramtype>bool</paramtype></parameter><description><para>Set <computeroutput>true</computeroutput> if Y axis is to use autoscale. 
</para></description><returns><para>Reference to <computeroutput><classname alt="boost::svg::svg_boxplot">svg_boxplot</classname></computeroutput> to make chainable.</para></returns></method>
<method name="y_autoscale"><type><classname>svg_boxplot</classname> &amp;</type><parameter name="min"><paramtype>double</paramtype></parameter><parameter name="max"><paramtype>double</paramtype></parameter><description><para>Autoscale Y-axis using minimum and maximum provided as two doubles. </para></description><description><para>
</para></description><returns><para>Reference to <computeroutput><classname alt="boost::svg::svg_boxplot">svg_boxplot</classname></computeroutput> to make chainable. </para></returns></method>
<method name="y_autoscale"><type><classname>svg_boxplot</classname> &amp;</type><parameter name="p"><paramtype>std::pair&lt; double, double &gt;</paramtype></parameter><description><para>Set Y min &amp; max values (as a std::pair) to use for autoscaling Y-axis. </para></description><description><para>
</para></description><returns><para>Reference to <computeroutput><classname alt="boost::svg::svg_boxplot">svg_boxplot</classname></computeroutput> to make chainable. </para></returns></method>
<method name="y_autoscale"><type><classname>svg_boxplot</classname> &amp;</type><template>
          <template-type-parameter name="T"><purpose><para>an STL container: <computeroutput>array</computeroutput>, <computeroutput>vector</computeroutput> ... </para></purpose></template-type-parameter>
        </template><parameter name="begin"><paramtype>const T &amp;</paramtype><description><para>First element to use to calculate autoscaled values. </para></description></parameter><parameter name="end"><paramtype>const T &amp;</paramtype><description><para>Last element to use to calculate autoscaled values. </para></description></parameter><description><para>Autoscale using iterators into a container (allowing only a part of container values to be used to calculate minimum and maximum Y-axis). 

</para></description><description><para>
</para></description><returns><para>Reference to <computeroutput><classname alt="boost::svg::svg_boxplot">svg_boxplot</classname></computeroutput> to make chainable. </para></returns></method>
<method name="y_autoscale"><type><classname>svg_boxplot</classname> &amp;</type><template>
          <template-type-parameter name="T"><purpose><para>an STL container: <computeroutput>array</computeroutput>, <computeroutput>vector</computeroutput> ... </para></purpose></template-type-parameter>
        </template><parameter name="container"><paramtype>const T &amp;</paramtype></parameter><description><para>Autoscale using a whole container to calculate minimum and maximum autoscaled Y-axis values. 
</para></description><description><para>
</para></description><returns><para>Reference to <computeroutput><classname alt="boost::svg::svg_boxplot">svg_boxplot</classname></computeroutput> to make chainable. </para></returns></method>
<method name="y_axis_color"><type><classname>svg_boxplot</classname> &amp;</type><parameter name="col"><paramtype>const <classname>svg_color</classname> &amp;</paramtype></parameter><purpose>Set the color of the Y-axis line. </purpose></method>
<method name="y_axis_color"><type><classname>svg_color</classname></type><description><para>
</para></description><returns><para>the color of the Y-axis line. </para></returns></method>
<method name="y_axis_on"><type><classname>svg_boxplot</classname> &amp;</type><parameter name="is"><paramtype>bool</paramtype></parameter><purpose>If set true, draw a vertical Y-axis line. </purpose></method>
<method name="y_axis_on"><type>bool</type><description><para>
</para></description><returns><para>true if will draw a horizontal X-axis line. </para></returns></method>
<method name="y_axis_position"><type><classname>svg_boxplot</classname> &amp;</type><parameter name="pos"><paramtype>int</paramtype></parameter><description><para>Set position of the vertical Y-axis line (on the border). But controlled by the intersection with X-axis, so this only changes the default position from bottom to top, but will be changed if X-axis intersects the X-axis (that is if X-axis includes zero).</para><para>
</para></description><returns><para>Reference to <classname alt="boost::svg::svg_boxplot">svg_boxplot</classname> to make chainable. </para></returns></method>
<method name="y_axis_position"><type>double</type><description><para>
</para></description><returns><para>Position of the vertical Y-axis line (on the border). </para></returns></method>
<method name="y_label"><type>std::string</type><description><para>
</para></description><returns><para>the text for the Y-axis label. &lt; The label will only be shown if y_label_on() == true. </para></returns></method>
<method name="y_label"><type><classname>svg_boxplot</classname> &amp;</type><parameter name="str"><paramtype>const std::string &amp;</paramtype></parameter><description><para>Set Y axis label.</para><para>
</para></description><returns><para>Reference to <classname alt="boost::svg::svg_boxplot">svg_boxplot</classname> to make chainable. </para></returns></method>
<method name="y_label_color"><type><classname>svg_color</classname></type><description><para>
</para></description><returns><para>the color of Y-axis label (including any units). </para></returns></method>
<method name="y_label_color"><type><classname>svg_boxplot</classname> &amp;</type><parameter name="col"><paramtype>const <classname>svg_color</classname> &amp;</paramtype></parameter><description><para>Set font color for Y axis label.</para><para>
</para></description><returns><para>Reference to <classname alt="boost::svg::svg_boxplot">svg_boxplot</classname> to make chainable. </para></returns></method>
<method name="y_label_font_size"><type><classname>svg_boxplot</classname> &amp;</type><parameter name="size"><paramtype>unsigned int</paramtype></parameter><description><para>Set font size for Y axis label.</para><para>
</para></description><returns><para>Reference to <classname alt="boost::svg::svg_boxplot">svg_boxplot</classname> to make chainable. </para></returns></method>
<method name="y_label_on"><type><classname>svg_boxplot</classname> &amp;</type><parameter name="cmd"><paramtype>bool</paramtype></parameter><description><para>Set true if Y axis name or label, for example: "width of thing".</para><para>
</para></description><returns><para>Reference to <classname alt="boost::svg::svg_boxplot">svg_boxplot</classname> to make chainable. </para></returns></method>
<method name="y_label_text"><type>std::string</type><description><para>
</para></description><returns><para>Text of label for Y axis. </para></returns></method>
<method name="y_label_units"><type><classname>svg_boxplot</classname> &amp;</type><parameter name="str"><paramtype>const std::string &amp;</paramtype></parameter><purpose>Set the text to add units to the Y-axis label. </purpose></method>
<method name="y_label_units"><type>std::string</type><description><para>
</para></description><returns><para>the text to add units to the X-axis label. </para></returns></method>
<method name="y_labels_strip_e0s"><type>bool</type><description><para>
</para></description><returns><para>if to strip redundant zeros, signs and exponents, for example, reducing "1.2e+000" to "1.2" </para></returns></method>
<method name="y_major_interval"><type><classname>svg_boxplot</classname> &amp;</type><parameter name="inter"><paramtype>double</paramtype></parameter><description><para>Set the interval between major ticks on the Y axis. </para></description></method>
<method name="y_major_labels_on"><type><classname>svg_boxplot</classname> &amp;</type><parameter name="cmd"><paramtype>int</paramtype></parameter><description><para>Set direction of Y major labels. &lt; 0 means to left (default), 0 (false) means none, &gt; 0 means to right.</para><para>
</para></description><returns><para>Reference to <classname alt="boost::svg::svg_boxplot">svg_boxplot</classname> to make chainable. </para></returns></method>
<method name="y_major_tick_color"><type><classname>svg_boxplot</classname> &amp;</type><parameter name="col"><paramtype>const <classname>svg_color</classname> &amp;</paramtype></parameter><description><para>Set Y major ticks color.</para><para>
</para></description><returns><para>Reference to <classname alt="boost::svg::svg_boxplot">svg_boxplot</classname> to make chainable. </para></returns></method>
<method name="y_major_tick_length"><type><classname>svg_boxplot</classname> &amp;</type><parameter name="length"><paramtype>unsigned int</paramtype></parameter><description><para>Set the length of major ticks on the Y axis.</para><para>
</para></description><returns><para>Reference to <classname alt="boost::svg::svg_boxplot">svg_boxplot</classname> to make chainable. </para></returns></method>
<method name="y_major_tick_width"><type><classname>svg_boxplot</classname> &amp;</type><parameter name="width"><paramtype>unsigned int</paramtype></parameter><description><para>Set the width of major ticks on the Y axis.</para><para>
</para></description><returns><para>Reference to <classname alt="boost::svg::svg_boxplot">svg_boxplot</classname> to make chainable. </para></returns></method>
<method name="y_minor_interval"><type>double</type><description><para>
</para></description><returns><para>interval between Y minor ticks. </para></returns></method>
<method name="y_minor_tick_color"><type><classname>svg_boxplot</classname> &amp;</type><parameter name="col"><paramtype>const <classname>svg_color</classname> &amp;</paramtype></parameter><description><para>Set Y minor ticks color.</para><para>
</para></description><returns><para>Reference to <classname alt="boost::svg::svg_boxplot">svg_boxplot</classname> to make chainable. </para></returns></method>
<method name="y_minor_tick_length"><type><classname>svg_boxplot</classname> &amp;</type><parameter name="length"><paramtype>unsigned int</paramtype></parameter><description><para>Set the length of minor ticks on the Y axis.</para><para>
</para></description><returns><para>Reference to <classname alt="boost::svg::svg_boxplot">svg_boxplot</classname> to make chainable. </para></returns></method>
<method name="y_minor_tick_width"><type><classname>svg_boxplot</classname> &amp;</type><parameter name="width"><paramtype>unsigned int</paramtype></parameter><description><para>Set the width of minor ticks on the Y axis.</para><para>
</para></description><returns><para>Reference to <classname alt="boost::svg::svg_boxplot">svg_boxplot</classname> to make chainable. </para></returns></method>
<method name="y_num_minor_ticks"><type><classname>svg_boxplot</classname> &amp;</type><parameter name="num"><paramtype>unsigned int</paramtype></parameter><description><para>Set the number of minor ticks between major ticks on the Y axis. For example, 1 gives alternating major and minor ticks,<sbr/>
4 is more useful giving major ticks at 1, 5, 10, 15...<sbr/>
9 gives major ticks at 10, 20, 30...</para><para>
</para></description><returns><para>Reference to <classname alt="boost::svg::svg_boxplot">svg_boxplot</classname> to make chainable. </para></returns></method>
<method name="y_range"><type><classname>svg_boxplot</classname> &amp;</type><parameter name="min_y"><paramtype>double</paramtype></parameter><parameter name="max_y"><paramtype>double</paramtype></parameter><description><para>Set range of Y values for Y axis (and do not use autoscale).</para><para>
</para></description><returns><para>Reference to <classname alt="boost::svg::svg_boxplot">svg_boxplot</classname> to make chainable. </para></returns></method>
<method name="y_range"><type>std::pair&lt; double, double &gt;</type><description><para>Set y_range using a pair of doubles (and do not use autoscale). </para></description></method>
<method name="y_size"><type><classname>svg_boxplot</classname> &amp;</type><parameter name="i"><paramtype>unsigned int</paramtype></parameter><purpose>Set SVG image Y-axis size (SVG units, default pixels). </purpose></method>
<method name="y_size"><type>unsigned int</type><description><para>
</para></description><returns><para>height of the SVG image. </para></returns></method>
</method-group>
<constructor><description><para>Default constructor providing all the default colors, style etc, </para></description></constructor>
</class><class name="svg_boxplot_series"><description><para>Information about a series of data values to be displayed as a Box Plot. A Box Plot that can contain several boxplot data series. Median, whiskers and outliers are computed for each series. <para><emphasis role="bold">See Also:</emphasis><para><ulink url="http://en.wikipedia.org/wiki/Boxplot">http://en.wikipedia.org/wiki/Boxplot</ulink> </para></para>
</para></description><method-group name="public member functions">
<method name="axis_color"><type><classname>svg_boxplot_series</classname> &amp;</type><parameter name="color"><paramtype>const <classname>svg_color</classname> &amp;</paramtype></parameter><description><para>Set color of axis line.</para><para>
</para></description><returns><para>Reference to <computeroutput><classname alt="boost::svg::svg_boxplot_series">svg_boxplot_series</classname></computeroutput> to make chainable. </para></returns></method>
<method name="axis_color"><type><classname>svg_color</classname></type><description><para>
</para></description><returns><para>Color of axis line. </para></returns></method>
<method name="axis_width"><type><classname>svg_boxplot_series</classname> &amp;</type><parameter name="l"><paramtype>double</paramtype></parameter><description><para>Set width of axis line.</para><para>
</para></description><returns><para>Reference to <computeroutput><classname alt="boost::svg::svg_boxplot_series">svg_boxplot_series</classname></computeroutput> to make chainable. </para></returns></method>
<method name="axis_width"><type>double</type><description><para>
</para></description><returns><para>width of axis line. </para></returns></method>
<method name="box_border"><type><classname>svg_boxplot_series</classname> &amp;</type><parameter name="color"><paramtype>const <classname>svg_color</classname> &amp;</paramtype></parameter><description><para>Set color of box border.</para><para>
</para></description><returns><para>Reference to <computeroutput><classname alt="boost::svg::svg_boxplot_series">svg_boxplot_series</classname></computeroutput> to make chainable. </para></returns></method>
<method name="box_border"><type><classname>svg_color</classname></type><description><para>
</para></description><returns><para>color of box border. </para></returns></method>
<method name="box_fill"><type><classname>svg_boxplot_series</classname> &amp;</type><parameter name="color"><paramtype>const <classname>svg_color</classname> &amp;</paramtype></parameter><description><para>Set color of box fill (not border).</para><para>
</para></description><returns><para>Reference to <computeroutput><classname alt="boost::svg::svg_boxplot_series">svg_boxplot_series</classname></computeroutput> to make chainable. </para></returns></method>
<method name="box_fill"><type><classname>svg_color</classname></type><description><para>
</para></description><returns><para>color of box fill. </para></returns></method>
<method name="box_style"><type><classname>svg_style</classname> &amp;</type><description><para>
</para></description><returns><para>box style. </para></returns></method>
<method name="box_style"><type><classname>svg_boxplot_series</classname> &amp;</type><parameter name="bs"><paramtype><classname>svg_style</classname> &amp;</paramtype></parameter><description><para>Set entire box style.</para><para>
</para></description><returns><para>Reference to <computeroutput><classname alt="boost::svg::svg_boxplot_series">svg_boxplot_series</classname></computeroutput> to make chainable. </para></returns></method>
<method name="box_width"><type><classname>svg_boxplot_series</classname> &amp;</type><parameter name="l"><paramtype>double</paramtype></parameter><description><para>Set width of the box.</para><para>
</para></description><returns><para>Reference to <computeroutput><classname alt="boost::svg::svg_boxplot_series">svg_boxplot_series</classname></computeroutput> to make chainable. </para></returns></method>
<method name="box_width"><type>double</type><description><para>
</para></description><returns><para>width of the box. </para></returns></method>
<method name="calculate_quantiles"><type>void</type><description><para>Divide sorted data set into four equal parts, called quartiles, so each part represent 1/4th of the sampled population.</para><para>Michael Frigge, David C. Hoaglin and Boris Iglewicz<sbr/>
 The American Statistician, Vol. 43, No. 1 (Feb., 1989), pp. 50-54<sbr/>
 Tukey, J. W. Exploratory Data Analysis, Addison Wesley (1977, p 33)<sbr/>
 "Some Implementations of the Boxplot"</para><para>x[1] .. x[n] == series[0] ... series[n - 1] q1_ = (1 - g) * x[j] + g * [j+1];</para><para>Fences (beyond which lie outliers) are at q1 - k * (q3 - q1) and q3 - k * (q3 - q1) commonly k = 1.5, but can be 2.<sbr/>
Extreme outlier usually set at k = 3.</para></description></method>
<method name="extreme_outlier_color"><type><classname>svg_boxplot_series</classname> &amp;</type><parameter name="color"><paramtype>const <classname>svg_color</classname> &amp;</paramtype></parameter><description><para>Set fill color of extreme outlier line in box.</para><para>
</para></description><returns><para>Reference to <computeroutput><classname alt="boost::svg::svg_boxplot_series">svg_boxplot_series</classname></computeroutput> to make chainable. </para></returns></method>
<method name="extreme_outlier_color"><type><classname>svg_color</classname></type><description><para>
</para></description><returns><para>fill color of extreme outlier line in box. </para></returns></method>
<method name="extreme_outlier_fill"><type><classname>svg_boxplot_series</classname> &amp;</type><parameter name="color"><paramtype>const <classname>svg_color</classname> &amp;</paramtype></parameter><description><para>Set fill color of extreme outlier line in box.</para><para>
</para></description><returns><para>Reference to <computeroutput><classname alt="boost::svg::svg_boxplot_series">svg_boxplot_series</classname></computeroutput> to make chainable. </para></returns></method>
<method name="extreme_outlier_fill"><type><classname>svg_color</classname></type><description><para>
</para></description><returns><para>fill color of extreme outlier line in box. </para></returns></method>
<method name="extreme_outlier_shape"><type><classname>svg_boxplot_series</classname> &amp;</type><parameter name="shape"><paramtype>point_shape</paramtype></parameter><description><para>Set shape of extreme outlier marker.</para><para>
</para></description><returns><para>Reference to <computeroutput><classname alt="boost::svg::svg_boxplot_series">svg_boxplot_series</classname></computeroutput> to make chainable. </para></returns></method>
<method name="extreme_outlier_shape"><type>point_shape</type><description><para>
</para></description><returns><para>shape of extreme outlier marker. </para></returns></method>
<method name="extreme_outlier_size"><type><classname>svg_boxplot_series</classname> &amp;</type><parameter name="size"><paramtype>int</paramtype></parameter><description><para>Set size of extreme outlier marker.</para><para>
</para></description><returns><para>Reference to <computeroutput><classname alt="boost::svg::svg_boxplot_series">svg_boxplot_series</classname></computeroutput> to make chainable.. </para></returns></method>
<method name="extreme_outlier_size"><type>int</type><description><para>
</para></description><returns><para>Size of extreme outlier marker. </para></returns></method>
<method name="max_whisker_color"><type><classname>svg_boxplot_series</classname> &amp;</type><parameter name="col"><paramtype>const <classname>svg_color</classname> &amp;</paramtype></parameter><description><para>Set color of minimum whisker.</para><para>
</para></description><returns><para>Reference to <computeroutput><classname alt="boost::svg::svg_boxplot_series">svg_boxplot_series</classname></computeroutput> to make chainable. </para></returns></method>
<method name="max_whisker_color"><type><classname>svg_color</classname></type><description><para>
</para></description><returns><para>color of maximum whisker. </para></returns></method>
<method name="max_whisker_width"><type><classname>svg_boxplot_series</classname> &amp;</type><parameter name="l"><paramtype>double</paramtype></parameter><description><para>

</para></description><returns><para>line width of maximum whisker.</para></returns><returns><para>Reference to <computeroutput><classname alt="boost::svg::svg_boxplot_series">svg_boxplot_series</classname></computeroutput> to make chainable. </para></returns></method>
<method name="max_whisker_width"><type>double</type><description><para>
</para></description><returns><para>line width of maximum whisker. </para></returns></method>
<method name="median_color"><type><classname>svg_boxplot_series</classname> &amp;</type><parameter name="color"><paramtype>const <classname>svg_color</classname> &amp;</paramtype></parameter><description><para>Set color of median line in box.</para><para>
</para></description><returns><para>Reference to <computeroutput><classname alt="boost::svg::svg_boxplot_series">svg_boxplot_series</classname></computeroutput> to make chainable. </para></returns></method>
<method name="median_color"><type><classname>svg_color</classname></type><description><para>
</para></description><returns><para>color of median line in box. </para></returns></method>
<method name="median_style"><type><classname>svg_style</classname> &amp;</type><description><para>
</para></description><returns><para>median style. </para></returns></method>
<method name="median_style"><type><classname>svg_boxplot_series</classname> &amp;</type><parameter name="ms"><paramtype><classname>svg_style</classname> &amp;</paramtype></parameter><description><para>Set entire median style.</para><para>
</para></description><returns><para>Reference to <computeroutput><classname alt="boost::svg::svg_boxplot_series">svg_boxplot_series</classname></computeroutput> to make chainable. </para></returns></method>
<method name="median_width"><type><classname>svg_boxplot_series</classname> &amp;</type><parameter name="l"><paramtype>double</paramtype></parameter><description><para>Set width of median line in box.</para><para>
</para></description><returns><para>Reference to <computeroutput><classname alt="boost::svg::svg_boxplot_series">svg_boxplot_series</classname></computeroutput> to make chainable.. </para></returns></method>
<method name="median_width"><type>double</type><description><para>
</para></description><returns><para>Width of median line in box. </para></returns></method>
<method name="min_whisker_color"><type><classname>svg_boxplot_series</classname> &amp;</type><parameter name="col"><paramtype>const <classname>svg_color</classname> &amp;</paramtype></parameter><description><para>Set color of minimum whisker.</para><para>
</para></description><returns><para>Reference to <computeroutput><classname alt="boost::svg::svg_boxplot_series">svg_boxplot_series</classname></computeroutput> to make chainable. </para></returns></method>
<method name="min_whisker_color"><type><classname>svg_color</classname></type><description><para>
</para></description><returns><para>color of minimum whisker. </para></returns></method>
<method name="min_whisker_width"><type><classname>svg_boxplot_series</classname> &amp;</type><parameter name="l"><paramtype>double</paramtype></parameter><description><para>Set line width of minimum whisker.</para><para>
</para></description><returns><para>Reference to <computeroutput><classname alt="boost::svg::svg_boxplot_series">svg_boxplot_series</classname></computeroutput> to make chainable.. </para></returns></method>
<method name="min_whisker_width"><type>double</type><description><para>
</para></description><returns><para>line width of minimum whisker. </para></returns></method>
<method name="outlier_color"><type><classname>svg_boxplot_series</classname> &amp;</type><parameter name="color"><paramtype>const <classname>svg_color</classname> &amp;</paramtype></parameter><description><para>Set color of outlier line in box.</para><para>
</para></description><returns><para>Reference to <computeroutput><classname alt="boost::svg::svg_boxplot_series">svg_boxplot_series</classname></computeroutput> to make chainable. </para></returns></method>
<method name="outlier_color"><type><classname>svg_color</classname></type><description><para>
</para></description><returns><para>color of outlier line in box. </para></returns></method>
<method name="outlier_fill"><type><classname>svg_boxplot_series</classname> &amp;</type><parameter name="color"><paramtype>const <classname>svg_color</classname> &amp;</paramtype></parameter><description><para>Set fill color of mild outlier line in box.</para><para>
</para></description><returns><para>Reference to <computeroutput><classname alt="boost::svg::svg_boxplot_series">svg_boxplot_series</classname></computeroutput> to make chainable. </para></returns></method>
<method name="outlier_fill"><type><classname>svg_color</classname></type><description><para>
</para></description><returns><para>fill color of mild outlier line in box. </para></returns></method>
<method name="outlier_shape"><type><classname>svg_boxplot_series</classname> &amp;</type><parameter name="shape"><paramtype>point_shape</paramtype></parameter><description><para>Set shape of outlier marker.</para><para>
</para></description><returns><para>Reference to <computeroutput><classname alt="boost::svg::svg_boxplot_series">svg_boxplot_series</classname></computeroutput> to make chainable. </para></returns></method>
<method name="outlier_shape"><type>point_shape</type><description><para>
</para></description><returns><para>shape of outlier marker. </para></returns></method>
<method name="outlier_size"><type><classname>svg_boxplot_series</classname> &amp;</type><parameter name="size"><paramtype>int</paramtype></parameter><description><para>Set size of outlier marker.</para><para>
</para></description><returns><para>Reference to <computeroutput><classname alt="boost::svg::svg_boxplot_series">svg_boxplot_series</classname></computeroutput> to make chainable. </para></returns></method>
<method name="outlier_size"><type>int</type><description><para>
</para></description><returns><para>Size of outlier marker. </para></returns></method>
<method name="outlier_style"><type><classname>plot_point_style</classname> &amp;</type><description><para>Get current outlier style. </para></description><description><para>
</para></description><returns><para>outlier_style. </para></returns></method>
<method name="outlier_style"><type><classname>svg_boxplot_series</classname> &amp;</type><parameter name="os"><paramtype><classname>plot_point_style</classname> &amp;</paramtype></parameter><description><para>Set entire outlier style.. </para></description><description><para>Set entire outlier style.</para><para>
</para></description><returns><para>Reference to <computeroutput><classname alt="boost::svg::svg_boxplot_series">svg_boxplot_series</classname></computeroutput> to make chainable. </para></returns></method>
<method name="quartile_definition"><type><classname>svg_boxplot_series</classname> &amp;</type><parameter name="def"><paramtype>int</paramtype></parameter><description><para>set Choice of H&amp;F quartile definition.</para><para>
</para></description><returns><para>Reference to <computeroutput><classname alt="boost::svg::svg_boxplot_series">svg_boxplot_series</classname></computeroutput> to make chainable. </para></returns></method>
<method name="quartile_definition"><type>int</type><description><para>
</para></description><returns><para>Choice of H&amp;F quartile definition. </para></returns></method>
<method name="title"><type><classname>svg_boxplot_series</classname> &amp;</type><parameter name="t"><paramtype>const std::string &amp;</paramtype></parameter><description><para>Set title of a <emphasis role="bold">data</emphasis> series.</para><para>
</para></description><returns><para>Reference to <computeroutput><classname alt="boost::svg::svg_boxplot_series">svg_boxplot_series</classname></computeroutput> to make chainable. </para></returns></method>
<method name="title"><type>const std::string</type><description><para>Obtain current series title. 
</para></description><returns><para>title of a <emphasis role="bold">data</emphasis> series.</para></returns></method>
<method name="whisker_length"><type><classname>svg_boxplot_series</classname> &amp;</type><parameter name="l"><paramtype>double</paramtype></parameter><description><para>Set minimum and maximum whisker length.</para><para>
</para></description><returns><para>Reference to <computeroutput><classname alt="boost::svg::svg_boxplot_series">svg_boxplot_series</classname></computeroutput> to make chainable. </para></returns></method>
<method name="whisker_length"><type>double</type><purpose>Get current whisker length (Applies to BOTH min and max whisker). </purpose><description><para>
</para></description><returns><para>Both minimum and maximum whisker length. </para></returns></method>
</method-group>
<constructor><template>
          <template-type-parameter name="T"><purpose><para>An STL data container type, typically <computeroutput>double</computeroutput> or uncertain.All other parameters can also be added using chainable functions. </para></purpose></template-type-parameter>
        </template><parameter name="begin"><paramtype>T</paramtype></parameter><parameter name="end"><paramtype>T</paramtype></parameter><parameter name="title"><paramtype>const std::string &amp;</paramtype></parameter><parameter name="bw"><paramtype>double</paramtype></parameter><parameter name="bs"><paramtype><classname>svg_style</classname></paramtype></parameter><parameter name="ms"><paramtype><classname>svg_style</classname></paramtype></parameter><parameter name="as"><paramtype><classname>svg_style</classname></paramtype></parameter><parameter name="wl"><paramtype>double</paramtype></parameter><parameter name="minws"><paramtype><classname>svg_style</classname></paramtype></parameter><parameter name="maxws"><paramtype><classname>svg_style</classname></paramtype></parameter><parameter name="os"><paramtype><classname>plot_point_style</classname></paramtype></parameter><parameter name="extos"><paramtype><classname>plot_point_style</classname></paramtype></parameter><parameter name="q_def"><paramtype>int</paramtype></parameter><parameter name="vs"><paramtype><classname>value_style</classname></paramtype></parameter><parameter name="ss"><paramtype><classname>text_style</classname></paramtype></parameter><purpose>Constructor, providing default values for all data members.<sbr/>
. </purpose><description><para>Default Constructor sorts a copy of container, and uses the copy for fast lookup of quartile values.</para><para>
</para></description></constructor>
</class>




























































</namespace>
</namespace>
</header>
<header name="boost/svg_plot/svg_color.hpp">
<para>SVG standard names of colors, and functions to create and output colors. </para><para><para>9 Feb 2009 </para>
<para>Jacob Voytko &amp; Paul A. Bristow </para>
</para><namespace name="boost">
<namespace name="svg">
<class name="svg_color"><purpose>SVG standard colors, see also enum svg_color_constant. </purpose><description><para><classname alt="boost::svg::svg_color">svg_color</classname> is the struct that contains information about RGB colors. For the constructor, the SVG standard specifies that numbers outside the normal rgb range are to be accepted, but are constrained to acceptable range of integer values [0, 255]. </para></description><data-member name="b_"><type>unsigned char</type><purpose>blue unsigned char provides range [0 to 255]. </purpose></data-member>
<data-member name="g_"><type>unsigned char</type><purpose>green unsigned char provides range [0 to 255]. </purpose></data-member>
<data-member name="is_blank_"><type>bool</type><purpose>true means "Not to be displayed" a 'pseudo-color'. If is_blank_ == true should write output to SVG XML file as "none". </purpose></data-member>
<data-member name="r_"><type>unsigned char</type><purpose>red unsigned char provides range [0 to 255]. </purpose></data-member>
<method-group name="public member functions">
<method name="blue" cv="const"><type>unsigned int</type><description><para>return blue component of color [0, 255] </para></description></method>
<method name="green" cv="const"><type>unsigned int</type><description><para>return green component of color [0, 255] </para></description></method>
<method name="is_blank" cv="const"><type>bool</type><description><para>
</para></description><returns><para>true if color is blank. </para></returns></method>
<method name="operator!="><type>bool</type><parameter name="rhs"><paramtype>const <classname>svg_color</classname> &amp;</paramtype></parameter><description><para>Compare colors (for not equal). </para></description></method>
<method name="operator=="><type>bool</type><parameter name="rhs"><paramtype>const <classname>svg_color</classname> &amp;</paramtype></parameter><description><para>Compare colors (for equal). </para></description></method>
<method name="red" cv="const"><type>unsigned int</type><description><para>return red component of color [0, 255] </para></description></method>
<method name="write"><type>void</type><parameter name="os"><paramtype>std::ostream &amp;</paramtype></parameter><description><para>Write to ostream a color in svg format.</para><para>Usage: my_color.write(cout); Outputs: rgb(127,255,212)</para><para>Note lower case (whereas operator&lt;&lt; uses uppercase). </para></description></method>
</method-group>
<constructor><parameter name="red"><paramtype>int</paramtype></parameter><parameter name="green"><paramtype>int</paramtype></parameter><parameter name="blue"><paramtype>int</paramtype></parameter><description><para>Construct an SVG color from RGB values.</para><para>Constrain rgb to [0 .. 255]. Default is to construct a 'pseudo-color' blank.</para></description></constructor>
<constructor><parameter name="is"><paramtype>bool</paramtype></parameter><description><para>Constructor from bool permits <classname alt="boost::svg::svg_color">svg_color</classname> my_blank(false) as a (non-)color.</para><para>with same effect as <classname alt="boost::svg::svg_color">svg_color</classname> my_blank(blank); svg_color(true) means default (black?) svg_color(false) means blank. For example: plot.area_fill(false) will be a blank == no fill. plot.area_fill(true) will be a default(black) fill.</para></description></constructor>
<constructor><parameter name="col"><paramtype>svg_color_constant</paramtype></parameter><description><para>Set a color (including blank) using the SVG 'standard' colors defined in enum boost::svg::svg_color_constant </para></description></constructor>
</class><enum name="svg_color_constant"><enumvalue name="aliceblue"/><enumvalue name="antiquewhite"/><enumvalue name="aqua"/><enumvalue name="aquamarine"/><enumvalue name="azure"/><enumvalue name="beige"/><enumvalue name="bisque"/><enumvalue name="black"/><enumvalue name="blanchedalmond"/><enumvalue name="blue"/><enumvalue name="blueviolet"/><enumvalue name="brown"/><enumvalue name="burlywood"/><enumvalue name="cadetblue"/><enumvalue name="chartreuse"/><enumvalue name="chocolate"/><enumvalue name="coral"/><enumvalue name="cornflowerblue"/><enumvalue name="cornsilk"/><enumvalue name="crimson"/><enumvalue name="cyan"/><enumvalue name="darkblue"/><enumvalue name="darkcyan"/><enumvalue name="darkgoldenrod"/><enumvalue name="darkgray"/><enumvalue name="darkgreen"/><enumvalue name="darkgrey"/><enumvalue name="darkkhaki"/><enumvalue name="darkmagenta"/><enumvalue name="darkolivegreen"/><enumvalue name="darkorange"/><enumvalue name="darkorchid"/><enumvalue name="darkred"/><enumvalue name="darksalmon"/><enumvalue name="darkseagreen"/><enumvalue name="darkslateblue"/><enumvalue name="darkslategray"/><enumvalue name="darkslategrey"/><enumvalue name="darkturquoise"/><enumvalue name="darkviolet"/><enumvalue name="deeppink"/><enumvalue name="deepskyblue"/><enumvalue name="dimgray"/><enumvalue name="dimgrey"/><enumvalue name="dodgerblue"/><enumvalue name="firebrick"/><enumvalue name="floralwhite"/><enumvalue name="forestgreen"/><enumvalue name="fuchsia"/><enumvalue name="gainsboro"/><enumvalue name="ghostwhite"/><enumvalue name="gold"/><enumvalue name="goldenrod"/><enumvalue name="gray"/><enumvalue name="grey"/><enumvalue name="green"/><enumvalue name="greenyellow"/><enumvalue name="honeydew"/><enumvalue name="hotpink"/><enumvalue name="indianred"/><enumvalue name="indigo"/><enumvalue name="ivory"/><enumvalue name="khaki"/><enumvalue name="lavender"/><enumvalue name="lavenderblush"/><enumvalue name="lawngreen"/><enumvalue name="lemonchiffon"/><enumvalue name="lightblue"/><enumvalue name="lightcoral"/><enumvalue name="lightcyan"/><enumvalue name="lightgoldenrodyellow"/><enumvalue name="lightgray"/><enumvalue name="lightgreen"/><enumvalue name="lightgrey"/><enumvalue name="lightpink"/><enumvalue name="lightsalmon"/><enumvalue name="lightseagreen"/><enumvalue name="lightskyblue"/><enumvalue name="lightslategray"/><enumvalue name="lightslategrey"/><enumvalue name="lightsteelblue"/><enumvalue name="lightyellow"/><enumvalue name="lime"/><enumvalue name="limegreen"/><enumvalue name="linen"/><enumvalue name="magenta"/><enumvalue name="maroon"/><enumvalue name="mediumaquamarine"/><enumvalue name="mediumblue"/><enumvalue name="mediumorchid"/><enumvalue name="mediumpurple"/><enumvalue name="mediumseagreen"/><enumvalue name="mediumslateblue"/><enumvalue name="mediumspringgreen"/><enumvalue name="mediumturquoise"/><enumvalue name="mediumvioletred"/><enumvalue name="midnightblue"/><enumvalue name="mintcream"/><enumvalue name="mistyrose"/><enumvalue name="moccasin"/><enumvalue name="navajowhite"/><enumvalue name="navy"/><enumvalue name="oldlace"/><enumvalue name="olive"/><enumvalue name="olivedrab"/><enumvalue name="orange"/><enumvalue name="orangered"/><enumvalue name="orchid"/><enumvalue name="palegoldenrod"/><enumvalue name="palegreen"/><enumvalue name="paleturquoise"/><enumvalue name="palevioletred"/><enumvalue name="papayawhip"/><enumvalue name="peachpuff"/><enumvalue name="peru"/><enumvalue name="pink"/><enumvalue name="plum"/><enumvalue name="powderblue"/><enumvalue name="purple"/><enumvalue name="red"/><enumvalue name="rosybrown"/><enumvalue name="royalblue"/><enumvalue name="saddlebrown"/><enumvalue name="salmon"/><enumvalue name="sandybrown"/><enumvalue name="seagreen"/><enumvalue name="seashell"/><enumvalue name="sienna"/><enumvalue name="silver"/><enumvalue name="skyblue"/><enumvalue name="slateblue"/><enumvalue name="slategray"/><enumvalue name="slategrey"/><enumvalue name="snow"/><enumvalue name="springgreen"/><enumvalue name="steelblue"/><enumvalue name="tanned"/><enumvalue name="teal"/><enumvalue name="thistle"/><enumvalue name="tomato"/><enumvalue name="turquoise"/><enumvalue name="violet"/><enumvalue name="wheat"/><enumvalue name="white"/><enumvalue name="whitesmoke"/><enumvalue name="yellow"/><enumvalue name="yellowgreen"/><enumvalue name="blank"/><purpose>Colors that have SVG standard special names. </purpose><description><para>SVG standard names for some colors. See <ulink url="http://www.w3.org/TR/SVG/types.html#ColorKeywords">http://www.w3.org/TR/SVG/types.html#ColorKeywords</ulink>.</para><para>The reason that the underscore separator convention does not match the normal Boost format is that these names that are specified by the SVG standard. <ulink url="http://www.w3.org/TR/SVG/types.html#ColorKeywords">http://www.w3.org/TR/SVG/types.html#ColorKeywords</ulink> color "tan" is also renamed to "tanned" to avoid clash with global function name tan in math.h. </para></description></enum>
<data-member name="color_array"><type><classname>svg_color</classname></type><purpose>SVG standard colors,. </purpose><description><para><para><emphasis role="bold">See Also:</emphasis><para>svg_color_constant </para></para>
</para></description></data-member>
<function name="constant_to_rgb"><type>void</type><parameter name="c"><paramtype>svg_color_constant</paramtype></parameter><parameter name="r"><paramtype>unsigned char &amp;</paramtype></parameter><parameter name="g"><paramtype>unsigned char &amp;</paramtype></parameter><parameter name="b"><paramtype>unsigned char &amp;</paramtype></parameter><description><para>Convert a named SVG standard color, see enum boost::svg::svg_color_constant to update three variables (r, g, b) holding red, green and blue values. Asserts that c NOT the blank color.</para><para>Convert a named SVG standard color, see enum boost::svg::svg_color_constant to update three variables (r, g, b) holding red, green and blue values. Asserts that c NOT the blank color.</para></description></function>
<function name="constant_to_rgb"><type><classname>svg_color</classname></type><parameter name="c"><paramtype>svg_color_constant</paramtype></parameter><description><para>Convert a svg color constant enum boost::svg::svg_color_constant to a <classname alt="boost::svg::svg_color">svg_color</classname>. 
</para></description><returns><para><classname alt="boost::svg::svg_color">svg_color</classname> Example: constant_to_rgb(4) or constant_to_rgb(aquamarine) gives svg_color(127, 255, 212) // aquamarine.</para></returns></function>


<function name="is_blank"><type>bool</type><parameter name="col"><paramtype>const <classname>svg_color</classname> &amp;</paramtype></parameter><description><para>
</para></description><returns><para>true if color is blank. </para></returns></function>



<function name="operator!="><type>bool</type><parameter name="lhs"><paramtype>const <classname>svg_color</classname> &amp;</paramtype></parameter><parameter name="rhs"><paramtype>const <classname>svg_color</classname> &amp;</paramtype></parameter><description><para>Compare colors (for not equal). </para></description></function>


<function name="operator&lt;&lt;"><type>std::ostream &amp;</type><parameter name=""><paramtype>std::ostream &amp;</paramtype></parameter><parameter name=""><paramtype>const <classname>svg_color</classname> &amp;</paramtype></parameter><description><para>Output color to stream as RGB. See boost::svg::svg_color_constant</para><para>for example: "RGB(138, 43 , 226)" for blueviolet. This comment does not appear - for reasons entirely unclear.</para><para>Usage: <classname alt="boost::svg::svg_color">svg_color</classname> my_color(127, 255, 212); cout &lt;&lt; "my_color " &lt;&lt; my_color &lt;&lt; endl; Outputs: my_color RGB(127,255,212) cout &lt;&lt; "magenta " &lt;&lt; svg_color(magenta) &lt;&lt; endl; but caution! cout &lt;&lt; magenta &lt;&lt; endl; outputs 85 because magenta is an enum boost::svg::svg_color_constant !</para><para>Output color to stream as RGB. See boost::svg::svg_color_constant</para><para>for example: "RGB(138, 43 , 226)" for blueviolet. This comment does not appear - for reasons entirely unclear.</para><para>Usage: <classname alt="boost::svg::svg_color">svg_color</classname> my_color(127, 255, 212); cout &lt;&lt; "my_color " &lt;&lt; my_color &lt;&lt; endl; Outputs: my_color RGB(127,255,212) cout &lt;&lt; "magenta " &lt;&lt; svg_color(magenta) &lt;&lt; endl; but caution! cout &lt;&lt; magenta &lt;&lt; endl; outputs 85 because magenta is an enum boost::svg::svg_color_constant !</para></description></function>











<function name="operator=="><type>bool</type><parameter name="lhs"><paramtype>const <classname>svg_color</classname> &amp;</paramtype></parameter><parameter name="rhs"><paramtype>const <classname>svg_color</classname> &amp;</paramtype></parameter><description><para>Compare colors (for equal). </para></description></function>





































</namespace>
</namespace>
</header>
<header name="boost/svg_plot/svg_style.hpp">
<para>Styles for SVG specifying font, sizes, shape, color etc for text, values, lines, axes etc. </para><para>SVG style information is fill, stroke, width, line &amp; bezier curve. This module provides struct plot_point_style &amp; struct plot_line_style and class svg_style holding the styles. See <ulink url="http://www.w3.org/TR/SVG11/styling.html">http://www.w3.org/TR/SVG11/styling.html</ulink> <para>Mar 2009 </para>
<para>Jacob Voytko and Paul A. Bristow </para>
</para><namespace name="boost">
<namespace name="svg">
<class name="axis_line_style"><purpose>Style of the X or Y-axes lines. </purpose><description><para>(But NOT the ticks and value labels because different styles for X and Y-axes are possible). </para></description><data-member name="axis_"><type>double</type><purpose>Depending on value of dim, either X-axis (y = 0) transformed into SVG Y coordinates or Y-axis (x = 0) transformed into SVG X coordinates (-1 if not calculated yet). </purpose></data-member>
<data-member name="axis_line_on_"><type>bool</type><purpose>Draw an X horizontal or Y vertical axis line. </purpose></data-member>
<data-member name="axis_position_"><type>int</type><description><para>How the axes intersect with values as below:<sbr/>
enum x_axis_intersect {bottom = -1, x_intersects_y = 0, top = +1}; enum y_axis_intersect {left = -1, y_intersects_x = 0, right = +1}; If axes look like an L, then is bottom left. If a T then y intersects and X is at bottom. </para></description></data-member>
<data-member name="axis_width_"><type>double</type><purpose>Axis line width. </purpose></data-member>
<data-member name="color_"><type><classname>svg_color</classname></type><purpose>Axis line (stroke) color. </purpose></data-member>
<data-member name="dim_"><type>dim</type><purpose>None, X or Y. </purpose></data-member>
<data-member name="label_on_"><type>bool</type><purpose>Label axis with text - example: "length". </purpose></data-member>
<data-member name="label_units_on_"><type>bool</type><purpose>Label axis units, example: "cm". </purpose></data-member>
<data-member name="max_"><type>double</type><purpose>maximum Y value (Cartesian units). </purpose></data-member>
<data-member name="min_"><type>double</type><purpose>minimum X value (Cartesian units). </purpose></data-member>
<method-group name="public member functions">
<method name="axis_line_on" cv="const"><type>bool</type><description><para>If returns true, then either an X or a Y axis line to be drawn. </para></description></method>
<method name="color"><type><classname>axis_line_style</classname> &amp;</type><parameter name="color"><paramtype>const <classname>svg_color</classname> &amp;</paramtype></parameter><description><para>Set color of an axis line.</para><para>
</para></description><returns><para><classname alt="boost::svg::plot_line_style">plot_line_style</classname>&amp; to make chainable. </para></returns></method>
<method name="color"><type><classname>svg_color</classname></type><description><para>
</para></description><returns><para>color of an axis line. </para></returns></method>
<method name="label_on" cv="const"><type>bool</type><description><para>If returns true, then axis to be labelled, for example "X axis". </para></description></method>
<method name="label_on"><type><classname>axis_line_style</classname> &amp;</type><parameter name="is"><paramtype>bool</paramtype></parameter><description><para>If set true, then axis to be labelled with the label, for example "X axis" (but default "").</para><para>
</para></description><returns><para><classname alt="boost::svg::plot_line_style">plot_line_style</classname>&amp; to make chainable. </para></returns></method>
<method name="label_units_on" cv="const"><type>bool</type><description><para>If returns true, then axis to be labelled with unit, for example " (mm)" </para></description></method>
<method name="label_units_on"><type><classname>axis_line_style</classname> &amp;</type><parameter name="is"><paramtype>bool</paramtype></parameter><description><para>If set true, then axis to be labelled with the units label, for example " (mm)" (but default "").</para><para>
</para></description><returns><para><classname alt="boost::svg::plot_line_style">plot_line_style</classname>&amp; to make chainable. </para></returns></method>
<method name="position"><type><classname>axis_line_style</classname> &amp;</type><parameter name="pos"><paramtype>int</paramtype></parameter><description><para>How the axes intersect.</para><para>
</para></description><returns><para><classname alt="boost::svg::plot_line_style">plot_line_style</classname>&amp; to make chainable. </para></returns></method>
<method name="position"><type>double</type><description><para>
</para></description><returns><para>How the axes intersect.<sbr/>
enum x_axis_intersect {bottom = -1, x_intersects_y = 0, top = +1}; enum y_axis_intersect {left = -1, y_intersects_x = 0, right = +1}; If axes look like an L, then is bottom left. If a T then y intersects and X is at bottom. </para></returns></method>
<method name="width"><type><classname>axis_line_style</classname> &amp;</type><parameter name="w"><paramtype>double</paramtype></parameter><description><para>Set width of an axis line.</para><para>
</para></description><returns><para><classname alt="boost::svg::plot_line_style">plot_line_style</classname>&amp; to make chainable. </para></returns></method>
<method name="width"><type>double</type><description><para>
</para></description><returns><para>width of an axis line. </para></returns></method>
</method-group>
<constructor><parameter name="d"><paramtype>dim</paramtype><default>X</default></parameter><parameter name="min"><paramtype>double</paramtype><default>-10.</default></parameter><parameter name="max"><paramtype>double</paramtype><default>+10.</default></parameter><parameter name="col"><paramtype>const <classname>svg_color</classname></paramtype><default>black</default></parameter><parameter name="width"><paramtype>double</paramtype><default>1</default></parameter><parameter name="axis_position"><paramtype>int</paramtype><default>0</default></parameter><parameter name="label_on"><paramtype>bool</paramtype><default>true</default></parameter><parameter name="label_units_on"><paramtype>bool</paramtype><default>false</default></parameter><parameter name="axis_lines_on"><paramtype>bool</paramtype><default>true</default></parameter><parameter name="axis"><paramtype>double</paramtype><default>-1</default></parameter><purpose>Constructor that provides defaults all axis style items. </purpose></constructor>
</class><class name="bar_style"><purpose>Style (color, width, fill) of histogram bars. </purpose><data-member name="area_fill_"><type><classname>svg_color</classname></type><purpose>Fill color from line to axis. </purpose></data-member>
<data-member name="bar_option_"><type>bar_option</type><purpose>stick or bar. </purpose></data-member>
<data-member name="color_"><type><classname>svg_color</classname></type><purpose>Color of line (stroke) (no fill color for lines). </purpose></data-member>
<data-member name="width_"><type>double</type><purpose>Width of bar, not enclosing line width. </purpose></data-member>
<method-group name="public member functions">
<method name="area_fill"><type><classname>bar_style</classname> &amp;</type><parameter name="f"><paramtype>const <classname>svg_color</classname> &amp;</paramtype></parameter><description><para>
</para></description><returns><para><classname alt="boost::svg::box_style">box_style</classname>&amp; to make chainable. </para></returns></method>
<method name="area_fill"><type><classname>svg_color</classname> &amp;</type><description><para>
</para></description><returns><para>bar rectangle fill color. </para></returns></method>
<method name="bar_opt"><type><classname>bar_style</classname> &amp;</type><parameter name="option"><paramtype>bar_option</paramtype></parameter><description><para>
</para></description><returns><para><classname alt="boost::svg::box_style">box_style</classname>&amp; to make chainable. </para></returns></method>
<method name="bar_opt"><type>double</type><description><para>
</para></description><returns><para>If to use stick or bar for histograms. </para></returns></method>
<method name="color"><type><classname>bar_style</classname> &amp;</type><parameter name="f"><paramtype>const <classname>svg_color</classname> &amp;</paramtype></parameter><description><para>
</para></description><returns><para><classname alt="boost::svg::box_style">box_style</classname>&amp; to make chainable. </para></returns></method>
<method name="color"><type><classname>svg_color</classname> &amp;</type><description><para>
</para></description><returns><para>Color of bar line or enclosing line. </para></returns></method>
<method name="width"><type><classname>bar_style</classname> &amp;</type><parameter name="w"><paramtype>double</paramtype></parameter><description><para>
</para></description><returns><para><classname alt="boost::svg::box_style">box_style</classname>&amp; to make chainable. </para></returns></method>
<method name="width"><type>double</type><description><para>
</para></description><returns><para>Width of bar, not enclosing line width. </para></returns></method>
</method-group>
<constructor><parameter name="col"><paramtype>const <classname>svg_color</classname> &amp;</paramtype><default>black</default></parameter><parameter name="acol"><paramtype>const <classname>svg_color</classname> &amp;</paramtype><default>true</default></parameter><parameter name="width"><paramtype>double</paramtype><default>2</default></parameter><parameter name="opt"><paramtype>bar_option</paramtype><default>no_bar</default></parameter><purpose>Construct with defaults for all member variables. </purpose><description><para>Constructor, setting defaults for all member variables. </para></description></constructor>
</class><class name="box_style"><purpose>a rectangular box. (Used for boxplot image and plot window). </purpose><data-member name="border_on_"><type>bool</type><purpose>Display the border of the box. </purpose></data-member>
<data-member name="fill_"><type><classname>svg_color</classname></type><purpose>Box fill color. </purpose></data-member>
<data-member name="fill_on_"><type>bool</type><purpose>Color fill the box. </purpose></data-member>
<data-member name="margin_"><type>double</type><purpose>Marginal (pixels) space around the box (inside or out). </purpose></data-member>
<data-member name="stroke_"><type><classname>svg_color</classname></type><purpose>Box line (stroke) color. </purpose></data-member>
<data-member name="width_"><type>double</type><purpose>plot border rectangle width. </purpose></data-member>
<method-group name="public member functions">
<method name="border_on" cv="const"><type>bool</type><description><para>
</para></description><returns><para>If the box border should be shown. </para></returns></method>
<method name="border_on"><type><classname>box_style</classname> &amp;</type><parameter name="is"><paramtype>bool</paramtype></parameter><description><para>Set true if the box border should be shown.</para><para>
</para></description><returns><para><classname alt="boost::svg::box_style">box_style</classname>&amp; to make chainable. </para></returns></method>
<method name="fill"><type><classname>box_style</classname> &amp;</type><parameter name="color"><paramtype>const <classname>svg_color</classname> &amp;</paramtype></parameter><description><para>Set fill color for box.</para><para>
</para></description><returns><para><classname alt="boost::svg::box_style">box_style</classname>&amp; to make chainable. </para></returns></method>
<method name="fill"><type><classname>svg_color</classname></type><description><para>
</para></description><returns><para>Fill color for box. </para></returns></method>
<method name="fill_on" cv="const"><type>bool</type><description><para>
</para></description><returns><para>if the box should be filled. </para></returns></method>
<method name="fill_on"><type><classname>box_style</classname> &amp;</type><parameter name="is"><paramtype>bool</paramtype></parameter><description><para>Set true if the box should be filled.</para><para>
</para></description><returns><para><classname alt="boost::svg::box_style">box_style</classname>&amp; to make chainable. </para></returns></method>
<method name="margin"><type><classname>box_style</classname> &amp;</type><parameter name="w"><paramtype>double</paramtype></parameter><description><para>Set marginal (default pixels) space around the box (inside or out).</para><para>
</para></description><returns><para><classname alt="boost::svg::box_style">box_style</classname>&amp; to make chainable. </para></returns></method>
<method name="margin"><type>double</type><description><para>
</para></description><returns><para>marginal (default pixels) space around the box (inside or out). </para></returns></method>
<method name="stroke"><type><classname>box_style</classname> &amp;</type><parameter name="color"><paramtype>const <classname>svg_color</classname> &amp;</paramtype></parameter><description><para>Set (stroke) color for box outline.</para><para>
</para></description><returns><para><classname alt="boost::svg::box_style">box_style</classname>&amp; to make chainable. </para></returns></method>
<method name="stroke"><type><classname>svg_color</classname></type><description><para>
</para></description><returns><para>(stroke) color for box outline. </para></returns></method>
<method name="width"><type><classname>box_style</classname> &amp;</type><parameter name="w"><paramtype>double</paramtype></parameter><description><para>Set width for box.</para><para>
</para></description><returns><para><classname alt="boost::svg::box_style">box_style</classname>&amp; to make chainable. </para></returns></method>
<method name="width"><type>double</type><description><para>
</para></description><returns><para>width for box. </para></returns></method>
</method-group>
<constructor><parameter name="scolor"><paramtype>const <classname>svg_color</classname> &amp;</paramtype><default>black</default></parameter><parameter name="fcolor"><paramtype>const <classname>svg_color</classname> &amp;</paramtype><default>white</default></parameter><parameter name="width"><paramtype>double</paramtype><default>1</default></parameter><parameter name="margin"><paramtype>double</paramtype><default>4.</default></parameter><parameter name="border_on"><paramtype>bool</paramtype><default>true</default></parameter><parameter name="fill_on"><paramtype>bool</paramtype><default>false</default></parameter><purpose>Constructor to set parameters but provides defaults for all variables. </purpose></constructor>
</class><class name="histogram_style"><purpose>Histogram options. </purpose><data-member name="histogram_option_"><type>histogram_option</type><purpose>default bar, no_histogram or column. </purpose></data-member>
<method-group name="public member functions">
<method name="histogram"><type><classname>histogram_style</classname> &amp;</type><parameter name="opt"><paramtype>histogram_option</paramtype></parameter><purpose>Set any histogram option. </purpose><description><para>Histogram to be shown as sticks or bars.</para><para>
</para></description><returns><para><classname alt="boost::svg::box_style">box_style</classname>&amp; to make chainable. </para></returns></method>
<method name="histogram"><type>double</type><description><para>
</para></description><description><para>&lt; 
</para></description><returns><para>Histogram option. </para></returns><returns><para>Histogram option. </para></returns></method>
</method-group>
<constructor><parameter name="opt"><paramtype>histogram_option</paramtype><default>no_histogram</default></parameter><purpose>Set any histogram option. </purpose><description><para>Constructor providing defaults for all private data. Line width and area-fill are taken from the <classname alt="boost::svg::plot_line_style">plot_line_style</classname> style. </para></description></constructor>
</class><class name="plot_line_style"><purpose>line joining data series values. </purpose><data-member name="area_fill_"><type><classname>svg_color</classname></type><purpose>Fill color from line to axis. == false means color.is_blank = true, or = blank. </purpose></data-member>
<data-member name="bezier_on_"><type>bool</type><purpose>If true, data points will be joined by bezier curved line(s). </purpose></data-member>
<data-member name="line_on_"><type>bool</type><purpose>If true, data points will be joined by straight line(s). </purpose></data-member>
<data-member name="stroke_color_"><type><classname>svg_color</classname></type><purpose>Stroke color of line. (no fill color for lines) </purpose></data-member>
<data-member name="width_"><type>double</type><purpose>Width of line joining data series values. </purpose></data-member>
<method-group name="public member functions">
<method name="area_fill"><type><classname>plot_line_style</classname> &amp;</type><parameter name="f"><paramtype>const <classname>svg_color</classname> &amp;</paramtype></parameter><description><para>Set if area under line joining data points is to be color filled.</para><para>
</para></description><returns><para><classname alt="boost::svg::plot_line_style">plot_line_style</classname>&amp; to make chainable. </para></returns></method>
<method name="area_fill"><type><classname>svg_color</classname> &amp;</type><description><para>
</para></description><returns><para>if area under line joining data points is to be color filled. </para></returns></method>
<method name="bezier_on" cv="const"><type>bool</type><description><para>
</para></description><returns><para>true if bezier curved line(s) are to join data points. </para></returns></method>
<method name="bezier_on"><type><classname>plot_line_style</classname> &amp;</type><parameter name="is"><paramtype>bool</paramtype></parameter><description><para>Set true if bezier curved line(s) are to join data points.</para><para>
</para></description><returns><para><classname alt="boost::svg::plot_line_style">plot_line_style</classname>&amp; to make chainable. </para></returns></method>
<method name="color"><type><classname>plot_line_style</classname> &amp;</type><parameter name="f"><paramtype>const <classname>svg_color</classname> &amp;</paramtype></parameter><description><para>Set color of line(s) joining data points.</para><para>
</para></description><returns><para><classname alt="boost::svg::plot_line_style">plot_line_style</classname>&amp; to make chainable. </para></returns></method>
<method name="color"><type><classname>svg_color</classname> &amp;</type><description><para>
</para></description><returns><para>color of line(s) joining data points. </para></returns></method>
<method name="line_on" cv="const"><type>bool</type><description><para>
</para></description><returns><para>True if line(s) will join data points. </para></returns></method>
<method name="line_on"><type><classname>plot_line_style</classname> &amp;</type><parameter name="is"><paramtype>bool</paramtype></parameter><description><para>Set true if line(s) are to join data points.</para><para>
</para></description><returns><para><classname alt="boost::svg::plot_line_style">plot_line_style</classname>&amp; to make chainable. </para></returns></method>
<method name="width"><type><classname>plot_line_style</classname> &amp;</type><parameter name="w"><paramtype>double</paramtype></parameter><description><para>Set width of line(s) joining data points.</para><para>
</para></description><returns><para><classname alt="boost::svg::plot_line_style">plot_line_style</classname>&amp; to make chainable. </para></returns></method>
<method name="width"><type>double</type><description><para>
</para></description><returns><para>width of line(s) joining data points. </para></returns></method>
</method-group>
<constructor><parameter name="col"><paramtype>const <classname>svg_color</classname> &amp;</paramtype><default>black</default></parameter><parameter name="fill_col"><paramtype>const <classname>svg_color</classname> &amp;</paramtype><default>blank</default></parameter><parameter name="width"><paramtype>double</paramtype><default>2</default></parameter><parameter name="line_on"><paramtype>bool</paramtype><default>true</default></parameter><parameter name="bezier_on"><paramtype>bool</paramtype><default>false</default></parameter><purpose>Constructor to set plot line style, but providing defaults for all member data. </purpose></constructor>
</class><class name="plot_point_style"><purpose>Shape, color, of data point markers. </purpose><description><para>(optional value &amp; uncertainty) not implemented yet. </para></description><data-member name="fill_color_"><type><classname>svg_color</classname></type><purpose>Fill color of the centre of the shape. </purpose></data-member>
<data-member name="shape_"><type>point_shape</type><purpose>shape: round, square, point... </purpose></data-member>
<data-member name="show_x_value_"><type>bool</type><purpose>If true, show the X value like "1.2" near the point. (If both true, then show both X and Y as a pair like "1.2, 3.4".) </purpose></data-member>
<data-member name="show_y_value_"><type>bool</type><purpose>If true, show the Y value like "3.4" near the point. (If both true, then show both X and Y as a pair like "1.2, 3.4".) </purpose></data-member>
<data-member name="size_"><type>int</type><purpose>Diameter of circle, height of square, font_size ... </purpose></data-member>
<data-member name="stroke_color_"><type><classname>svg_color</classname></type><purpose>Color of circumference of shape. </purpose></data-member>
<data-member name="symbols_"><type>std::string</type><purpose>Unicode symbol(s) (letters, digits, squiggles etc).<sbr/>
Caution: not all Unicode symbols are output by all browsers!<sbr/>
Example: U2721 is Star of David or hexagram, see <ulink url="http://en.wikipedia.org/wiki/Hexagram,">http://en.wikipedia.org/wiki/Hexagram,</ulink> symbols("&amp;#x2721;") Positioning of symbols (especially &gt; 1 symbols) may be imprecise. </purpose></data-member>
<data-member name="symbols_style_"><type><classname>text_style</classname></type><purpose>font, size, decoration of symbols. </purpose></data-member>
<method-group name="public member functions">
<method name="fill_color"><type><classname>plot_point_style</classname> &amp;</type><parameter name="f"><paramtype>const <classname>svg_color</classname> &amp;</paramtype></parameter><description><para>Set fill color of shape or symbol used to mark data value plot point(s).</para><para>
</para></description><returns><para><classname alt="boost::svg::plot_point_style">plot_point_style</classname>&amp; to make chainable. </para></returns></method>
<method name="fill_color"><type><classname>svg_color</classname> &amp;</type><description><para>
</para></description><returns><para>fill color of shape or symbol used to mark data value plot point(s). </para></returns></method>
<method name="shape"><type><classname>plot_point_style</classname> &amp;</type><parameter name="s"><paramtype>point_shape</paramtype></parameter><description><para>Set shape used to mark data value plot point(s).</para><para>
</para></description><returns><para><classname alt="boost::svg::plot_point_style">plot_point_style</classname>&amp; to make chainable. </para></returns></method>
<method name="shape"><type>point_shape</type><description><para>
</para></description><returns><para>shape used to mark data value plot point(s). </para></returns></method>
<method name="size"><type><classname>plot_point_style</classname> &amp;</type><parameter name="i"><paramtype>int</paramtype></parameter><description><para>Set size of shape or symbol used to mark data value plot point(s).</para><para>&lt; Diameter of circle, height of square, font_size ...</para><para>
</para></description><returns><para><classname alt="boost::svg::plot_point_style">plot_point_style</classname>&amp; to make chainable. </para></returns></method>
<method name="size"><type>int</type><description><para>
</para></description><returns><para>size of shape or symbol used to mark data value plot point(s). </para></returns></method>
<method name="stroke_color"><type><classname>plot_point_style</classname> &amp;</type><parameter name="f"><paramtype>const <classname>svg_color</classname> &amp;</paramtype></parameter><description><para>Set stroke color of shape or symbol used to mark data value plot point(s).</para><para>
</para></description><returns><para><classname alt="boost::svg::plot_point_style">plot_point_style</classname>&amp; to make chainable. </para></returns></method>
<method name="stroke_color"><type><classname>svg_color</classname> &amp;</type><description><para>
</para></description><returns><para>stroke color of shape or symbol used to mark data value plot point(s). </para></returns></method>
<method name="style"><type><classname>plot_point_style</classname> &amp;</type><parameter name="ts"><paramtype><classname>text_style</classname></paramtype></parameter><description><para>
</para></description><returns><para><classname alt="boost::svg::plot_point_style">plot_point_style</classname>&amp; to make chainable. </para></returns></method>
<method name="style" cv="const"><type><classname>text_style</classname> &amp;</type><description><para>
</para></description><returns><para><classname alt="boost::svg::text_style">text_style</classname>&amp; To allow control of symbol font, size, decoration etc. </para></returns></method>
<method name="symbols"><type><classname>plot_point_style</classname> &amp;</type><parameter name="s"><paramtype>const std::string</paramtype></parameter><description><para>Override default symbol "X" - only effective if .shape(symbol) used.</para><para>
</para></description><returns><para><classname alt="boost::svg::plot_point_style">plot_point_style</classname>&amp; to make chainable. </para></returns></method>
<method name="symbols"><type>std::string &amp;</type><description><para>
</para></description><returns><para>plot point marking symbol (only effective if .shape(symbol) used). </para></returns></method>
</method-group>
<constructor><parameter name="stroke"><paramtype>const <classname>svg_color</classname> &amp;</paramtype><default>black</default></parameter><parameter name="fill"><paramtype>const <classname>svg_color</classname> &amp;</paramtype><default>blank</default></parameter><parameter name="size"><paramtype>int</paramtype><default>5</default></parameter><parameter name="shape"><paramtype>point_shape</paramtype><default>circlet</default></parameter><parameter name="symbols"><paramtype>const std::string &amp;</paramtype><default>"X"</default></parameter><purpose>Unicode symbol(s) (letters, digits, squiggles etc). </purpose></constructor>
</class><class name="svg_style"><purpose>basic SVG stroke, fill colors and width, and their switches. </purpose><description><para>This is the style information for any group (g) tag. This could be expanded to include more data from the SVG standard.</para><para>There are some strange effects for text on some browsers (Firefox especially) when only stroke is specified. fill is interpreted as black, and the font outline is fuzzy and bolder.    &lt;g id="title" stroke="rgb(255,0,0)"&gt; .. is red border and black fill.
   (because created as a graphic not a builtin font?)
   &lt;g id="title" fill="rgb(255,0,0)"&gt; .. is red sharp font.
   &lt;g id="title" stroke="rgb(255,0,0)" fill="rgb(255,0,0)"&gt; red and red fill also fuzzy.
   So for text, only specific the fill unless a different outline is really wanted.
   Defaults for text provide a built-in glyph, for example for title:
   &lt;g id="title"&gt;
     &lt;text x="250" y="36" text-anchor="middle" font-size="18" font-family="Verdana"&gt;
       Plot of data
     &lt;/text&gt;
   &lt;/g&gt;
   and this is not a graphic. </para></description><method-group name="public member functions">
<method name="fill_color"><type><classname>svg_style</classname> &amp;</type><parameter name="col"><paramtype>const <classname>svg_color</classname> &amp;</paramtype></parameter><description><para>Set fill color (and set fill on true, unless color is blank).</para><para>
</para></description><returns><para><classname alt="boost::svg::svg_style">svg_style</classname>&amp; to make chainable. </para></returns></method>
<method name="fill_color" cv="const"><type><classname>svg_color</classname></type><description><para>
</para></description><returns><para>SVG fill color. </para></returns></method>
<method name="fill_on"><type><classname>svg_style</classname> &amp;</type><parameter name="is"><paramtype>bool</paramtype></parameter><description><para>Set fill is wanted.</para><para>
</para></description><returns><para><classname alt="boost::svg::svg_style">svg_style</classname>&amp; to make chainable. </para></returns></method>
<method name="fill_on" cv="const"><type>bool</type><description><para>
</para></description><returns><para>true if fill wanted. </para></returns></method>
<method name="operator!="><type>bool</type><parameter name="s"><paramtype><classname>svg_style</classname> &amp;</paramtype></parameter><description><para>Compare svg_styles (for inequality). </para></description></method>
<method name="operator=="><type>bool</type><parameter name="s"><paramtype><classname>svg_style</classname> &amp;</paramtype></parameter><description><para>Compare svg_styles. </para></description></method>
<method name="stroke_color"><type><classname>svg_style</classname> &amp;</type><parameter name="col"><paramtype>const <classname>svg_color</classname> &amp;</paramtype></parameter><description><para>Set stroke color (and set stroke on).</para><para>
</para></description><returns><para><classname alt="boost::svg::svg_style">svg_style</classname>&amp; to make chainable. </para></returns></method>
<method name="stroke_color" cv="const"><type><classname>svg_color</classname></type><description><para>
</para></description><returns><para>SVG stroke color. </para></returns></method>
<method name="stroke_on"><type><classname>svg_style</classname> &amp;</type><parameter name="is"><paramtype>bool</paramtype></parameter><description><para>Set true if SVG stroke is wanted.</para><para>
</para></description><returns><para><classname alt="boost::svg::svg_style">svg_style</classname>&amp; to make chainable. </para></returns></method>
<method name="stroke_on" cv="const"><type>bool</type><description><para>
</para></description><returns><para>true if SVG stroke is on. </para></returns></method>
<method name="stroke_width"><type><classname>svg_style</classname> &amp;</type><parameter name="width"><paramtype>double</paramtype></parameter><description><para>Set stroke width (and set width on).</para><para>
</para></description><returns><para><classname alt="boost::svg::svg_style">svg_style</classname>&amp; to make chainable. </para></returns></method>
<method name="stroke_width" cv="const"><type>double</type><description><para>
</para></description><returns><para>SVG stroke width. </para></returns></method>
<method name="width_on"><type><classname>svg_style</classname> &amp;</type><parameter name="is"><paramtype>bool</paramtype></parameter><description><para>Set true to use SVG stroke width.</para><para>
</para></description><returns><para><classname alt="boost::svg::svg_style">svg_style</classname>&amp; to make chainable. </para></returns></method>
<method name="width_on" cv="const"><type>bool</type><description><para>
</para></description><returns><para>true if to use SVG stroke width. </para></returns></method>
<method name="write"><type>void</type><parameter name="os"><paramtype>std::ostream &amp;</paramtype></parameter><description><para>Write any stroke, fill colors and/or width info to SVG XML document.</para><para>Example output: &lt;g id="yMinorTicks" stroke="rgb(0,0,0)" stroke-width="1"&gt;</para></description></method>
</method-group>
<constructor/>
<constructor><parameter name="stroke"><paramtype>const <classname>svg_color</classname> &amp;</paramtype></parameter><parameter name="fill"><paramtype>const <classname>svg_color</classname> &amp;</paramtype></parameter><parameter name="width"><paramtype>unsigned int</paramtype></parameter><description><para>Construct <classname alt="boost::svg::svg_style">svg_style</classname> with specified fill and stroke colors, and width. </para></description></constructor>
</class><class name="text_style"><purpose>Font family, font size, weight, style, stretch &amp; decoration. </purpose><data-member name="decoration_"><type>std::string</type><purpose>Font decoration, examples: "underline" | "overline" | "line-through". </purpose></data-member>
<data-member name="font_family_"><type>std::string</type><purpose>Font family, examples: "Arial", "Times New Roman", "Verdana", "Lucida Sans Unicode". </purpose></data-member>
<data-member name="font_size_"><type>int</type><purpose>Font size (SVG units, default pixels). </purpose></data-member>
<data-member name="stretch_"><type>std::string</type><purpose>Font stretch, examples: normal | wider | narrower. </purpose></data-member>
<data-member name="style_"><type>std::string</type><purpose>Font weight, examples: normal | bold | italic | oblique. </purpose></data-member>
<data-member name="weight_"><type>std::string</type><purpose>Font style, examples: "bold", "normal". </purpose></data-member>
<method-group name="public member functions">
<method name="font_decoration"><type><classname>text_style</classname> &amp;</type><parameter name="s"><paramtype>const std::string &amp;</paramtype></parameter><description><para>Set font decoration. Examples: "underline" | "overline" | "line-through" <ulink url="http://www.croczilla.com/~alex/conformance_suite/svg/text-deco-01-b.svg">http://www.croczilla.com/~alex/conformance_suite/svg/text-deco-01-b.svg</ulink> tests line-through and underline. But implementation varies.</para><para>
</para></description><returns><para>reference to <classname alt="boost::svg::text_style">text_style</classname> to make chainable. </para></returns></method>
<method name="font_decoration" cv="const"><type>const std::string &amp;</type><description><para>
</para></description><returns><para>font decoration. </para></returns></method>
<method name="font_family"><type><classname>text_style</classname> &amp;</type><parameter name="s"><paramtype>const std::string &amp;</paramtype></parameter><description><para>Set font family, for example: "Arial", "Times New Roman", "Verdana", "Lucida Sans Unicode".</para><para>Default for browser is sans with Firefox &amp; IE but serif with Opera.<sbr/>
 See also browser conformance test at<sbr/>
 <ulink url="http://www.croczilla.com/~alex/conformance_suite/svg/text-fonts-01-t.svg">http://www.croczilla.com/~alex/conformance_suite/svg/text-fonts-01-t.svg</ulink><sbr/>
 which tests three styles of font, serif, sans-serif and mono-spaced.<sbr/>
    &lt;text font-family="Georgia, 'Minion Web', 'Times New Roman', Times, 'MS PMincho', Heisei-Mincho, serif " x="20" y="80"&gt;A serifed face&lt;/text&gt;\n
    &lt;text font-family="Arial, 'Arial Unicode', 'Myriad Web', Geneva, 'Lucida Sans Unicode', 'MS PGothic', Osaka, sans-serif " x="20" y="160"&gt;A sans-serif face&lt;/text&gt;\n
    &lt;text font-family="'Lucida Console', 'Courier New', Courier, Monaco, 'MS Gothic', Osaka-Mono, monospace" x="20" y="240"&gt;A mono (iW) face&lt;/text&gt;</para><para>
</para></description><returns><para>reference to <classname alt="boost::svg::text_style">text_style</classname> to make chainable. </para></returns></method>
<method name="font_family" cv="const"><type>const std::string &amp;</type><description><para>
</para></description><returns><para>font family as string. </para></returns></method>
<method name="font_size"><type><classname>text_style</classname> &amp;</type><parameter name="i"><paramtype>unsigned int</paramtype></parameter><description><para>Set font size (svg units usually pixels) default 10.              \return text_style&amp; to make chainable.
 
</para></description><returns><para>reference to <classname alt="boost::svg::text_style">text_style</classname> to make chainable. </para></returns></method>
<method name="font_size" cv="const"><type>int</type><description><para>
</para></description><returns><para>font size (svg units, usually pixels). </para></returns></method>
<method name="font_stretch"><type><classname>text_style</classname> &amp;</type><parameter name="s"><paramtype>const std::string &amp;</paramtype></parameter><description><para>Examples: "wider" but implementation by browsers varies. font-stretch: normal | wider | narrower ...</para><para>
</para></description><returns><para>reference to <classname alt="boost::svg::text_style">text_style</classname> to make chainable. </para></returns></method>
<method name="font_stretch" cv="const"><type>const std::string &amp;</type><description><para>
</para></description><returns><para>font stretch, for example: normal | wider | narrower . </para></returns></method>
<method name="font_style"><type><classname>text_style</classname> &amp;</type><parameter name="s"><paramtype>const std::string &amp;</paramtype></parameter><description><para>Set font style. Example: my_text_style.font_style("italic");<sbr/>
See also browser conformance tests:<sbr/>
<ulink url="http://www.croczilla.com/~alex/conformance_suite/svg/text-fonts-02-t.svg">http://www.croczilla.com/~alex/conformance_suite/svg/text-fonts-02-t.svg</ulink></para><para>
</para></description><returns><para>reference to <classname alt="boost::svg::text_style">text_style</classname> to make chainable. </para></returns></method>
<method name="font_style" cv="const"><type>const std::string &amp;</type><description><para>
font-style: normal | bold | italic | oblique. Example "normal" is default.</para></description><returns><para>font style.</para></returns></method>
<method name="font_weight"><type><classname>text_style</classname> &amp;</type><parameter name="s"><paramtype>const std::string &amp;</paramtype></parameter><description><para>svg font-weight: normal | bold | bolder | lighter | 100 | 200 .. 900 Examples: "bold", "normal" <ulink url="http://www.croczilla.com/~alex/conformance_suite/svg/text-fonts-02-t.svg">http://www.croczilla.com/~alex/conformance_suite/svg/text-fonts-02-t.svg</ulink> tests conformance. Only two weights, "bold", "normal", are supported by Firefox, Opera, Inkscape.</para><para>
</para></description><returns><para>reference to <classname alt="boost::svg::text_style">text_style</classname> to make chainable. </para></returns></method>
<method name="font_weight" cv="const"><type>const std::string &amp;</type><description><para>Set font weight. Example: my_text_style.font_style("bold");<sbr/>
See also browser conformance tests:<sbr/>
<ulink url="http://www.croczilla.com/~alex/conformance_suite/svg/text-fonts-02-t.svg">http://www.croczilla.com/~alex/conformance_suite/svg/text-fonts-02-t.svg</ulink></para></description></method>
<method name="operator!="><type>bool</type><parameter name="ts"><paramtype>const <classname>text_style</classname> &amp;</paramtype></parameter><description><para>Compare <classname alt="boost::svg::text_style">text_style</classname> for inequality (needed for testing). </para></description></method>
<method name="operator=="><type>bool</type><parameter name="ts"><paramtype>const <classname>text_style</classname> &amp;</paramtype></parameter><description><para>Compare <classname alt="boost::svg::text_style">text_style</classname> for equality (needed for testing). </para></description></method>
</method-group>
<constructor><parameter name="size"><paramtype>int</paramtype><default>12</default></parameter><parameter name="font"><paramtype>const std::string &amp;</paramtype><default>default_font</default></parameter><parameter name="weight"><paramtype>const std::string &amp;</paramtype><default>""</default></parameter><parameter name="style"><paramtype>const std::string &amp;</paramtype><default>""</default></parameter><parameter name="stretch"><paramtype>const std::string &amp;</paramtype><default>""</default></parameter><parameter name="decoration"><paramtype>const std::string &amp;</paramtype><default>""</default></parameter><purpose>Examples: "underline" | "overline" | "line-through". </purpose><description><para>Default constructor only sets font size = 20, and leaves other font details as SVG defaults. </para></description></constructor>
</class><class name="ticks_labels_style"><purpose>Style of the X and Y axes ticks, grids and their tick value labels. </purpose><description><para>But NOT the X and Y axes lines. These can be either on the axis lines or on the plot window edge(s), (because different styles for x and y are possible). </para></description><data-member name="dim_"><type>dim</type><purpose>X, Y, or None. </purpose></data-member>
<data-member name="down_ticks_on_"><type>bool</type><purpose>Draw ticks down from horizontal X-axis line. </purpose></data-member>
<data-member name="label_max_length_"><type>double</type><purpose>width (in SVG units, pixels) of longest value label text on axis. </purpose></data-member>
<data-member name="label_max_space_"><type>double</type><purpose>Space (SVG units, pixels) needed for value label adjusted for rotation. </purpose></data-member>
<data-member name="label_rotation_"><type>rotate_style</type><purpose>Direction axis value labels written. </purpose></data-member>
<data-member name="left_ticks_on_"><type>bool</type><purpose>Draw ticks left from vertical Y-axis line. </purpose></data-member>
<data-member name="major_grid_color_"><type><classname>svg_color</classname></type><purpose>Color of major grid lines. </purpose></data-member>
<data-member name="major_grid_on_"><type>bool</type><purpose>Draw X grid at major ticks. </purpose></data-member>
<data-member name="major_grid_width_"><type>double</type><purpose>Width of major grid lines. </purpose></data-member>
<data-member name="major_interval_"><type>double</type><purpose>Stride or interval between major x ticks (Cartesian units). </purpose></data-member>
<data-member name="major_tick_color_"><type><classname>svg_color</classname></type><purpose>Color (stroke) of tick lines. </purpose></data-member>
<data-member name="major_tick_length_"><type>double</type><purpose>Length of major tick lines. </purpose></data-member>
<data-member name="major_tick_width_"><type>double</type><purpose>Width of major tick lines. </purpose></data-member>
<data-member name="major_value_labels_side_"><type>int</type><purpose>Which side of axis for label values for major ticks. </purpose></data-member>
<data-member name="max_"><type>double</type><purpose>Maximum x value (Cartesian units). </purpose></data-member>
<data-member name="min_"><type>double</type><purpose>Minimum x value (Cartesian units). </purpose></data-member>
<data-member name="minor_grid_color_"><type><classname>svg_color</classname></type><purpose>color of minor grid lines. </purpose></data-member>
<data-member name="minor_grid_on_"><type>bool</type><purpose>Draw X grid at minor ticks. </purpose></data-member>
<data-member name="minor_grid_width_"><type>double</type><purpose>Wdith of minor grid lines. </purpose></data-member>
<data-member name="minor_interval_"><type>double</type><purpose>Interval (Cartesian units) between minor ticks. </purpose></data-member>
<data-member name="minor_tick_color_"><type><classname>svg_color</classname></type><purpose>Color (stroke) of tick lines. </purpose></data-member>
<data-member name="minor_tick_length_"><type>double</type><purpose>Length of minor tick lines. </purpose></data-member>
<data-member name="minor_tick_width_"><type>double</type><purpose>Width of minor tick lines. </purpose></data-member>
<data-member name="num_minor_ticks_"><type>unsigned int</type><purpose>number of minor ticks, eg 4 gives major 0, minor 1,2,3,4, major 5 (All units in svg units, default pixels). </purpose></data-member>
<data-member name="right_ticks_on_"><type>bool</type><purpose>Draw ticks right from vertical Y-axis line. </purpose></data-member>
<data-member name="strip_e0s_"><type>bool</type><purpose>If redundant zero, + and e are to be stripped, for example "+1.000e3" to "1e3". </purpose></data-member>
<data-member name="ticks_on_window_or_on_axis_"><type>int</type><purpose>Value labels &amp; ticks on a plot window border (rather than on X or Y-axis). For Y-axis -1 = left, 0 = false = on X-axis, +1 = right. Default -1 to left of plot window. For X-axis -1 = bottom, 0 = false = on Y-axis, +1 = top. Default -1 below bottom of plot window. 0 = false puts the ticks and their labels on the X or Y axis line which may be in the middle of the plot. For 1D the default overrides the constructor default of -1 below, to tick and value label the X-axis. For 2D the default is left at -1, to use bottom and left of plot window to tick and value label X and Y-axis. </purpose></data-member>
<data-member name="up_ticks_on_"><type>bool</type><purpose>Draw ticks up from horizontal X-axis line. </purpose></data-member>
<data-member name="value_ioflags_"><type>std::ios_base::fmtflags</type><purpose>IO formatting flags for the axis default std::ios::dec. </purpose></data-member>
<data-member name="value_label_style_"><type><classname>text_style</classname></type><purpose>text style (font, size...) for value labels. </purpose></data-member>
<data-member name="value_precision_"><type>int</type><purpose>Precision for tick value labels, usually 3 will suffice. </purpose></data-member>
<data-member name="values_color_"><type><classname>svg_color</classname></type><purpose>Color of tick values labels. </purpose></data-member>
<method-group name="public member functions">
<method name="label_length"><type>double</type><parameter name="value"><paramtype>double</paramtype></parameter><description><para>Find the length of label (like "1.23E-5") for a value. </para></description></method>
<method name="longest_label"><type>double</type><description><para>Update label_max_length_ with the longest value label as pixels, return the count of digits etc. </para></description></method>
<method name="major_value_labels_side" cv="const"><type>int</type><description><para>
</para></description><returns><para>side for tick value labels: left (&lt;0), none (==0) or right (&gt;0). </para></returns></method>
<method name="major_value_labels_side"><type><classname>ticks_labels_style</classname> &amp;</type><parameter name="is"><paramtype>int</paramtype></parameter><description><para>Set side for tick value labels: left (&lt;0), none (==0) or right (&gt;0).</para><para>
</para></description><returns><para><classname alt="boost::svg::ticks_labels_style">ticks_labels_style</classname>&amp; to make chainable. </para></returns></method>
<method name="use_down_ticks" cv="const"><type>bool</type><description><para>
</para></description><returns><para>true if to draw ticks down from horizontal X-axis line. </para></returns></method>
<method name="use_down_ticks"><type><classname>ticks_labels_style</classname> &amp;</type><parameter name="side"><paramtype>bool</paramtype></parameter><description><para>Set true if to draw ticks down from horizontal X-axis line.</para><para>
</para></description><returns><para><classname alt="boost::svg::ticks_labels_style">ticks_labels_style</classname>&amp; to make chainable. </para></returns></method>
<method name="use_up_ticks" cv="const"><type>bool</type><description><para>
</para></description><returns><para>true if to draw ticks up from horizontal X-axis line. </para></returns></method>
<method name="use_up_ticks"><type><classname>ticks_labels_style</classname> &amp;</type><parameter name="is"><paramtype>bool</paramtype></parameter><description><para>Set true to draw ticks up from horizontal X-axis line.</para><para>
</para></description><returns><para><classname alt="boost::svg::ticks_labels_style">ticks_labels_style</classname>&amp; to make chainable. </para></returns></method>
</method-group>
<constructor><parameter name="d"><paramtype>dim</paramtype><default>X</default></parameter><parameter name="style"><paramtype>const <classname>text_style</classname> &amp;</paramtype><default>no_style</default></parameter><parameter name="max"><paramtype>double</paramtype><default>10.</default></parameter><parameter name="min"><paramtype>double</paramtype><default>-10.</default></parameter><parameter name="major_interval"><paramtype>double</paramtype><default>2.</default></parameter><parameter name="num_minor_ticks"><paramtype>unsigned int</paramtype><default>4</default></parameter><purpose>Constructor setting several parameters, but providing default values for all member data. </purpose></constructor>
</class><class name="value_style"><purpose>Data series point value label information, text, color, orientation, (uncertainty &amp; df), name ID string, order in sequence, time and date. </purpose><description><para>For example, to output: 5.123 +- 0.01 (19). Uncertainty and degrees of freedom estimate. Prefix, separator and suffix allow X and Y values to be together on one line, for example<sbr/>
 [1.23+- 0.01 (3), 4.56 +-0.2 (10)]<sbr/>
 Used in draw_plot_point_values (note plural - not used in singular draw_plot_point_value) where X <classname alt="boost::svg::value_style">value_style</classname> is used to provide the prefix and separator, and Y <classname alt="boost::svg::value_style">value_style</classname> to provide the suffix. Prefix, separator and suffix are ignored when X or Y are shown separately using draw_plot_point_value. "4.5+- 0.01 (3) Second #2, 2012-Mar-13 13:01:00" </para></description><data-member name="addlimits_color_"><type><classname>svg_color</classname></type><purpose>Color for confidence interval. </purpose></data-member>
<data-member name="addlimits_on_"><type>bool</type><purpose>If an confidence interval is to be added, for example &lt;4.5, 4.8&gt;. </purpose></data-member>
<data-member name="datetime_color_"><type><classname>svg_color</classname></type><purpose>Color for time and date string". </purpose></data-member>
<data-member name="datetime_on_"><type>bool</type><purpose>If an time and/or date string to be appended. default == false,. </purpose></data-member>
<data-member name="df_color_"><type><classname>svg_color</classname></type><purpose>Color for degrees for freedom, for example: 99 in "1.23 +-0.02 (99)". </purpose></data-member>
<data-member name="df_on_"><type>bool</type><purpose>If a degrees of freedom estimate is to be appended. </purpose></data-member>
<data-member name="fill_color_"><type><classname>svg_color</classname></type><purpose>Fill color for value. </purpose></data-member>
<data-member name="id_color_"><type><classname>svg_color</classname></type><purpose>Color for id or name string". </purpose></data-member>
<data-member name="id_on_"><type>bool</type><purpose>If an id or name string to be appended. default == false,. </purpose></data-member>
<data-member name="order_color_"><type><classname>svg_color</classname></type><purpose>Color for sequence number #". </purpose></data-member>
<data-member name="order_on_"><type>bool</type><purpose>If an order in sequence number # to be appended. default == false,. </purpose></data-member>
<data-member name="plusminus_color_"><type><classname>svg_color</classname></type><purpose>Color for uncertainty, for example: 0.02 in "1.23 +-0.02". </purpose></data-member>
<data-member name="plusminus_on_"><type>bool</type><description><para>If an uncertainty estimate is to be appended (as + or - value).</para><para>See <ulink url="http://en.wikipedia.org/wiki/Plus-minus_sign">http://en.wikipedia.org/wiki/Plus-minus_sign</ulink> </para></description></data-member>
<data-member name="prefix_"><type>std::string</type><purpose>Prefix to data point value, default none, but typically "[". </purpose></data-member>
<data-member name="separator_"><type>std::string</type><purpose>Separator between x and y values, if both on same line (none if only X or only Y, or Y below X). </purpose></data-member>
<data-member name="strip_e0s_"><type>bool</type><purpose>If true, then unnecessary zeros and + sign will be stripped to reduce length. </purpose></data-member>
<data-member name="stroke_color_"><type><classname>svg_color</classname></type><purpose>Stroke color for value. </purpose></data-member>
<data-member name="suffix_"><type>std::string</type><purpose>Suffix to data point value, default none, but typically "]". </purpose></data-member>
<data-member name="value_ioflags_"><type>std::ios_base::fmtflags</type><purpose>Control of scientific, fixed, hex etc. </purpose></data-member>
<data-member name="value_label_rotation_"><type>rotate_style</type><purpose>Direction point value labels written. </purpose></data-member>
<data-member name="value_precision_"><type>int</type><purpose>Decimal digits of precision of value. </purpose></data-member>
<data-member name="values_text_style_"><type><classname>text_style</classname></type><purpose>Font etc used for data point value marking. </purpose></data-member>
<method-group name="public member functions">
</method-group>
<constructor><purpose>Default style for a data point value label. </purpose><description><para>&lt; Constructor Data point value label style (provides default color and font).</para><para>Constructor Data point value label style (provides default color and font). </para></description><description><para>Default constructor initialises all private data. </para></description></constructor>
<constructor><parameter name="r"><paramtype>rotate_style</paramtype></parameter><parameter name="p"><paramtype>int</paramtype></parameter><parameter name="f"><paramtype>std::ios_base::fmtflags</paramtype></parameter><parameter name="s"><paramtype>bool</paramtype></parameter><parameter name="ts"><paramtype><classname>text_style</classname></paramtype></parameter><parameter name="scol"><paramtype>const <classname>svg_color</classname> &amp;</paramtype></parameter><parameter name="fcol"><paramtype>const <classname>svg_color</classname> &amp;</paramtype></parameter><parameter name="pm"><paramtype>bool</paramtype></parameter><parameter name="plusminus_color"><paramtype>const <classname>svg_color</classname> &amp;</paramtype></parameter><parameter name="lim"><paramtype>bool</paramtype></parameter><parameter name="addlimits_color"><paramtype>const <classname>svg_color</classname> &amp;</paramtype></parameter><parameter name="df"><paramtype>bool</paramtype></parameter><parameter name="df_color"><paramtype>const <classname>svg_color</classname> &amp;</paramtype></parameter><parameter name="id"><paramtype>bool</paramtype></parameter><parameter name="id_color"><paramtype>const <classname>svg_color</classname> &amp;</paramtype></parameter><parameter name="dt"><paramtype>bool</paramtype></parameter><parameter name="dt_color"><paramtype>const <classname>svg_color</classname> &amp;</paramtype></parameter><parameter name="ordno"><paramtype>bool</paramtype></parameter><parameter name="ordno_color"><paramtype>const <classname>svg_color</classname> &amp;</paramtype></parameter><parameter name="pre"><paramtype>std::string</paramtype></parameter><parameter name="sep"><paramtype>std::string</paramtype></parameter><parameter name="suf"><paramtype>std::string</paramtype></parameter><description><para>Constructor setting parameters with some defaults. </para></description></constructor>
</class><enum name="bar_option"><enumvalue name="y_block"><default>= -2</default><purpose>Rectangular (optionally filled) block style horizontal to Y-axis,. </purpose></enumvalue><enumvalue name="y_stick"><default>= -1</default><purpose>Bar or row line (stroke width) horizontal to Y-axis. </purpose></enumvalue><enumvalue name="no_bar"><default>= 0</default><purpose>No bar. </purpose></enumvalue><enumvalue name="x_stick"><default>= +1</default><purpose>Stick or column line (stroke width) vertical to X-axis. </purpose></enumvalue><enumvalue name="x_block"><default>= +2</default><purpose>Rectangular (optionally filled) block style vertical to X-axis,. </purpose></enumvalue><purpose>Options for bar to draw bar charts. </purpose></enum>
<enum name="dim"><enumvalue name="N"><default>= 0</default></enumvalue><enumvalue name="X"><default>= 1</default></enumvalue><enumvalue name="Y"><default>= 2</default></enumvalue><purpose>dimension of plot. (Used so that an axis knows what type it is, or none = N). </purpose></enum>
<enum name="histogram_option"><enumvalue name="no_histogram"><default>= 0</default><purpose>No histogram. </purpose></enumvalue><enumvalue name="column"><default>= +1</default><purpose>Stick or column line (stroke width) vertically to/from X-axis. Column is the most common histogram style. </purpose></enumvalue><purpose>options for histograms. </purpose></enum>
<enum name="place"><enumvalue name="left_side"><default>= -1</default></enumvalue><enumvalue name="on_axis"><default>= 0</default></enumvalue><enumvalue name="right_side"><default>= +1</default></enumvalue><enumvalue name="bottom_side"><default>= -1</default></enumvalue><enumvalue name="top_side"><default>= +1</default></enumvalue><purpose>The place for ticks value labels on the axis. </purpose></enum>
<enum name="point_shape"><enumvalue name="none"><default>= 0</default><purpose>No marker for data point. </purpose></enumvalue><enumvalue name="circlet"><description><para>Circle. Name was changed to round to avoid clash with function named circle, but was then found to clash with C++ Standard numeric function round. Full qualification <computeroutput>point_shape::round</computeroutput> requires C++11 support to compile, so then changed to circlet. </para></description></enumvalue><enumvalue name="square"><purpose>Square. </purpose></enumvalue><enumvalue name="point"><purpose>Small solid point. </purpose></enumvalue><enumvalue name="egg"><purpose>Ellipse. </purpose></enumvalue><enumvalue name="unc_ellipse"><purpose>Ellipse sized using uncertainty estimate of x and y, typically about twice standard deviation or 95% confidence interval. </purpose></enumvalue><enumvalue name="vertical_line"><purpose>Vertical line up &amp; down from axis. </purpose></enumvalue><enumvalue name="horizontal_line"><purpose>Horizontal line left &amp; right from axis. </purpose></enumvalue><enumvalue name="vertical_tick"><purpose>Vertical tick up from axis. </purpose></enumvalue><enumvalue name="horizontal_tick"><purpose>Horizontal line right from axis. &lt; Note horizontal will not be useful for 1D plot - will be on the axis. </purpose></enumvalue><enumvalue name="cone"><purpose>Cone pointing up - 'rightwayup'. </purpose></enumvalue><enumvalue name="triangle"><purpose>Triangle pointing down 'upsidedown'. </purpose></enumvalue><enumvalue name="star"><purpose>Star (using polygon). </purpose></enumvalue><enumvalue name="lozenge"><purpose>Lozenge or square with corners pointing up and down.. </purpose></enumvalue><enumvalue name="diamond"><purpose>Diamond card shape. </purpose></enumvalue><enumvalue name="heart"><purpose>Heart playing card shape. </purpose></enumvalue><enumvalue name="club"><purpose>Club playing card shape. </purpose></enumvalue><enumvalue name="spade"><purpose>Spade playing card shape. </purpose></enumvalue><enumvalue name="asterisk"><purpose>Asterix as * symbol. </purpose></enumvalue><enumvalue name="cross"><purpose>cross </purpose></enumvalue><enumvalue name="symbol"><description><para>Unicode symbol including letters, digits, greek &amp; 'squiggles'.   Default letter "X".\n
  Other examples: "&amp;#x3A9;"= greek omega, "&amp;#x2721;" = Star of David hexagram
  &amp;#2720 Maltese cross &amp; other dingbats. \n
  See also http://en.wikipedia.org/wiki/List_of_Unicode_characters#Basic_Latin geometric shapes
  that may be a better way to make these symbols: &amp;#25A0 black square ...to &amp;#25FF
  But unclear how many browsers implement these properly.
 </para></description></enumvalue><purpose>used for marking a data point. </purpose></enum>
<enum name="rotate_style"><enumvalue name="horizontal"><default>= 0</default><purpose>normal horizontal left to right, centered. </purpose></enumvalue><enumvalue name="slopeup"><default>= -30</default><purpose>slope up. </purpose></enumvalue><enumvalue name="uphill"><default>= -45</default><purpose>45 up. </purpose></enumvalue><enumvalue name="steepup"><default>= -60</default><purpose>up near vertical. </purpose></enumvalue><enumvalue name="upward"><default>= -90</default><purpose>vertical writing up. </purpose></enumvalue><enumvalue name="backup"><default>= -135</default><purpose>slope up backwards - upside down! </purpose></enumvalue><enumvalue name="leftward"><default>= -180</default><purpose>horizontal to left. </purpose></enumvalue><enumvalue name="rightward"><default>= 360</default><purpose>horizontal to right. </purpose></enumvalue><enumvalue name="slopedownhill"><default>= 30</default><purpose>30 gentle slope down. </purpose></enumvalue><enumvalue name="downhill"><default>= 45</default><purpose>45 down. </purpose></enumvalue><enumvalue name="steepdown"><default>= 60</default><purpose>60 steeply down. </purpose></enumvalue><enumvalue name="downward"><default>= 90</default><purpose>vertical writing down. </purpose></enumvalue><enumvalue name="backdown"><default>= 135</default><purpose>slope down backwards. </purpose></enumvalue><enumvalue name="upsidedown"><default>= 180</default><purpose>upside down! (== -180) </purpose></enumvalue><purpose>Rotation of text (in degrees clockwise from horizontal). </purpose></enum>
<data-member name="no_style"><type><classname>text_style</classname></type><purpose>Text style that uses all constructor defaults. </purpose></data-member>
<data-member name="wh" specifiers="static"><type>const double</type><purpose>font text width/height ratio. </purpose></data-member>


<function name="default_font"><type>const char *</type><parameter name=""><paramtype>"Lucida Sans Unicode"</paramtype></parameter><description><para>Default font chosen is a Unicode font like ['Lucida Sans Unicode] that has the best chance of ['symbols] being rendered corrrectly. Used for title, legend, axes ... unless overridden by an explicit font specification. </para></description></function>
<function name="default_plot_point_style"><type><classname>plot_point_style</classname></type><purpose><classname alt="boost::svg::plot_point_style">plot_point_style</classname> that uses all the defaults. </purpose></function>






<function name="operator!="><type>bool</type><parameter name="lhs"><paramtype>const <classname>text_style</classname> &amp;</paramtype></parameter><parameter name="rhs"><paramtype>const <classname>text_style</classname> &amp;</paramtype></parameter><description><para>Compare two <classname alt="boost::svg::text_style">text_style</classname> for equality. Note operator== and operator &lt;&lt; both needed to use Boost.Test. (But can be avoided with a macro define). </para></description></function>


<function name="operator&lt;&lt;"><type>std::ostream &amp;</type><parameter name="os"><paramtype>std::ostream &amp;</paramtype></parameter><parameter name="s"><paramtype>const <classname>svg_style</classname> &amp;</paramtype></parameter><description><para>Output a string description of a <classname alt="boost::svg::svg_style">svg_style</classname>. Usage: <classname alt="boost::svg::svg_style">svg_style</classname> my_svg_style; cout &lt;&lt; my_svg_style &lt;&lt; endl; Outputs: <classname alt="boost::svg::svg_style">svg_style</classname>(RGB(0,0,0), RGB(0,0,0), 0, no fill, no stroke, no width)</para></description></function>


<function name="operator&lt;&lt;"><type>std::ostream &amp;</type><parameter name="os"><paramtype>std::ostream &amp;</paramtype></parameter><parameter name="ts"><paramtype>const <classname>text_style</classname> &amp;</paramtype></parameter><description><para>Output a text style as a text string (mainly useful for diagnostic use).</para><para>Usage: <classname alt="boost::svg::text_style">text_style</classname> ts(12, "Arial", "italic", "bold", "", ""); cout &lt;&lt; t &lt;&lt; endl; Outputs: <classname alt="boost::svg::text_style">text_style</classname>(18, "Arial", "italic", "bold", "", "")</para></description></function>
<function name="operator&lt;&lt;"><type>std::ostream &amp;</type><parameter name="os"><paramtype>std::ostream &amp;</paramtype></parameter><parameter name="p"><paramtype><classname>plot_point_style</classname></paramtype></parameter><description><para>Output description of data value plot point marker(s).</para><para>Example: <classname alt="boost::svg::plot_point_style">plot_point_style</classname> p; cout &lt;&lt; p &lt;&lt; endl; Outputs: point_style(1, RGB(0,0,0), RGB(0,0,0), 10, X)</para></description></function>
<function name="operator&lt;&lt;"><type>std::ostream &amp;</type><parameter name="os"><paramtype>std::ostream &amp;</paramtype></parameter><parameter name="p"><paramtype><classname>plot_line_style</classname></paramtype></parameter><description><para>Output description of <classname alt="boost::svg::plot_line_style">plot_line_style</classname>. (mainly useful for diagnosis).</para><para>Example Usage: <classname alt="boost::svg::plot_line_style">plot_line_style</classname> p; cout &lt;&lt; p &lt;&lt; endl; Outputs: point_line_style(RGB(0,0,0), blank, line, no bezier)</para></description></function>






<function name="operator=="><type>bool</type><parameter name="lhs"><paramtype>const <classname>text_style</classname> &amp;</paramtype></parameter><parameter name="rhs"><paramtype>const <classname>text_style</classname> &amp;</paramtype></parameter><description><para>Compare two <classname alt="boost::svg::text_style">text_style</classname> for equality Note operator== and operator &lt;&lt; both needed to use Boost.text. (But can be avoided with a macro define). </para></description></function>




















<function name="string_svg_length"><type>double</type><parameter name="s"><paramtype>const std::string &amp;</paramtype></parameter><parameter name="style"><paramtype>const <classname>text_style</classname> &amp;</paramtype></parameter><description><para><ulink url="http://www.w3.org/TR/SVG/text.html#FontSizeProperty">http://www.w3.org/TR/SVG/text.html#FontSizeProperty</ulink> Font size is the height of the text's font, so width = wh * font_size.</para><para>Even after reading <ulink url="http://www.w3.org/TR/SVG/fonts.html,">http://www.w3.org/TR/SVG/fonts.html,</ulink><sbr/>
unclear how to determine the exact width of digits, so an arbitrary average width height ratio wh = 0.7 is used as a good approximation. </para></description></function>
<function name="strip_e0s"><type>const std::string</type><parameter name="s"><paramtype>std::string</paramtype></parameter><description><para>

</para></description><returns><para>length of trimmed string (perhaps unchanged).</para></returns><returns><para>length of trimmed string (perhaps unchanged). </para></returns></function>













</namespace>
</namespace>
</header>
<header name="boost/svg_plot/uncertain.hpp">
<para>Class for storing Uncertainties and simple propagation according to a pure Gaussian model. </para><para>This simplifed version assuming uncorrelated uncertainties (the common case) is based on code by Evan Manning (<ulink url="mailto:manning@alumni.caltech.edu">manning@alumni.caltech.edu</ulink>) Evan Marshal Manning, C/C++ Users Journal, March 1996 page 29 to 38. original downloaded from <ulink url="ftp://beowulf.jpl.nasa.gov/pub/manning">ftp://beowulf.jpl.nasa.gov/pub/manning</ulink> This is a simple model of uncertainties, designed to accompany an article published in C/C++ Users Journal March 1996. A fuller collection of even fancier classes also given in UReal.h. And also based on a extended version including uncertainty as standard deviation &amp; its uncertainty as degrees of freedom, and other information about the value added Paul A Bristow from 31 Mar 98. <para><emphasis role="bold">See Also:</emphasis><para><ulink url="http://en.wikipedia.org/wiki/Plus-minus_sign">http://en.wikipedia.org/wiki/Plus-minus_sign</ulink></para></para>
<para>Paul A. Bristow </para>
<para>Mar 2009 </para>
</para><namespace name="boost">
<namespace name="svg">
<class name="unc"><template>
      <template-nontype-parameter name="correlated"><type>bool</type><default>false</default></template-nontype-parameter>
    </template><inherit access="public">std::char_traits&lt; char &gt;</inherit><purpose>Uncertain class for storing an observed or measured value together with information about its uncertainty (previously called 'error' or 'plusminus', but now deprecated) represented nominally one standard deviation (but displayed as a multiple, usually two standard deviations). </purpose><description><para>This version assumes uncorrelated uncertainties (by far the most common case). <para><emphasis role="bold">See Also:</emphasis><para><ulink url="http://www.measurementuncertainty.org/">http://www.measurementuncertainty.org/</ulink> <sbr/>
International Vocabulary of Basic and General Terms in Metrology; ISO/TAG 4 1994<sbr/>
ISO, Guide to the expression of uncertainty in measurement, ISO, Geneva, 1993.<sbr/>
Eurochem, Quantifying uncertainty in analytical measurements. </para></para>
</para></description><method-group name="public member functions">
<method name="deg_free" cv="const"><type>short unsigned</type><description><para>
</para></description><returns><para>Degrees of freedom, usually the number of observations -1. </para></returns></method>
<method name="deg_free"><type>void</type><parameter name="unsigned"><paramtype>short</paramtype></parameter><purpose>Set degrees of freedom, usually = number of observations -1;. </purpose><description><para>Set degrees of freedom, usually = number of observations -1; </para></description></method>
<method name="operator&lt;" cv="const"><type>bool</type><parameter name="rhs"><paramtype>const <classname>unc</classname> &amp;</paramtype></parameter><description><para>Less operator only compares the value, ignoring any uncertainty information. </para></description></method>
<method name="operator&lt;" cv="const"><type>bool</type><parameter name="rhs"><paramtype><classname>unc</classname> &amp;</paramtype></parameter><description><para>Less operator only compares the value, ignoring any uncertainty information. </para></description></method>
<method name="operator==" cv="const"><type>bool</type><parameter name="rhs"><paramtype>const <classname>unc</classname> &amp;</paramtype></parameter><description><para>Equality operator only compares the value, ignoring any uncertainty information. </para></description></method>
<method name="types" cv="const"><type>short unsigned</type><description><para>
</para></description><description><para>
</para></description><returns><para>degrees of freedom, usually = number of observations -1; </para></returns><returns><para>Other information about the uncertain value. </para></returns></method>
<method name="types"><type>void</type><parameter name="unsigned"><paramtype>short</paramtype></parameter><purpose>Set other information about the value. </purpose><description><para>Set other information about the uncertain value. </para></description></method>
<method name="uncertainty" cv="const"><type>float</type><description><para>
</para></description><description><para>
</para></description><returns><para>estimate of uncertainty, typically one standard deviation. </para></returns><returns><para>Estimate of uncertainty, typically standard deviation. </para></returns></method>
<method name="uncertainty"><type>void</type><parameter name=""><paramtype>float</paramtype></parameter><purpose>Set estimate of uncertainty, typically standard deviation. </purpose><description><para>Set estimate of uncertainty, typically standard deviation. </para></description></method>
<method name="value" cv="const"><type>double</type><description><para>
</para></description><description><para>
</para></description><returns><para>most likely value, typically the mean. </para></returns><returns><para>Most likely value, typically the mean. </para></returns></method>
<method name="value"><type>void</type><parameter name=""><paramtype>double</paramtype></parameter><purpose>Set most likely value, typically the mean. </purpose><description><para>
</para></description><description><para>Set most likely value, typically the mean. </para></description><returns><para>other information about the value. </para></returns></method>
</method-group>
<copy-assignment><type><classname>unc</classname> &amp;</type><parameter name="rhs"><paramtype>const <classname>unc</classname> &amp;</paramtype></parameter><description><para>Assignment simply copies all values, including those with 'undefined' status.</para><para>to make chainable. </para></description></copy-assignment>
<constructor><parameter name="v"><paramtype>double</paramtype><default>0.</default></parameter><parameter name="u"><paramtype>float</paramtype><default>-1.f</default></parameter><parameter name="df"><paramtype>short unsigned</paramtype><default>(std::numeric_limits&lt; unsigned short int &gt;::max)()</default></parameter><parameter name="ty"><paramtype>short unsigned</paramtype><default>0U</default></parameter><description><para>Constructor allowing an unc to be constructed from just value providing defaults for all other parameters. Note the defaults so that unspecified variables have 'undefined' status. </para></description></constructor>
<method-group name="friend functions">
<method name="operator&lt;&lt;"><type>friend std::ostream &amp;</type><parameter name="os"><paramtype>std::ostream &amp;</paramtype></parameter><parameter name="u"><paramtype>const <classname>unc</classname>&lt; correlated &gt; &amp;</paramtype></parameter><purpose>Output an value with (if defined) uncertainty and degrees of freedom (and type). For example: "1.23 +/- 0.01 (13)".<sbr/>
. </purpose><description><para>Note that the uncertainty is input and stored as one standard deviation, but output multiplied for a user configurable 'confidence factor' plusminus, default is two standard deviation for about 95% confidence (but could also be one for 67% or 3 for 99% confidence). </para></description><description><para>Output a single value with (if defined) uncertainty and degrees of freedom (and type). For example: "1.23 +/- 0.01 (13)".<sbr/>
/details Note that the uncertainty is input and stored as one standard deviation, but output multiplied for a user configurable 'confidence factor' plusminus, default two for about 95% confidence (but could also be one for 67% or 3 for 99% confidence).</para><para>Note that the plus or minus can be output using several methods.</para><para>256 character 8-bit codepage plusminus symbol octal 361, or os &lt;&lt; char(241) decimal 241 or os &lt;&lt; char(0xF1) hexadecimal F1, or os &lt;&lt; "&amp;#x00A0;&amp;#x00B1;" Unicode space plusminus glyph, or<sbr/>
os &lt;&lt; " +or-" &lt;&lt; u.uncertainty_; Plain ANSI 7 bit code chars.</para></description></method>
<method name="operator&lt;&lt;"><type>friend std::ostream &amp;</type><parameter name="os"><paramtype>std::ostream &amp;</paramtype></parameter><parameter name="u"><paramtype>const std::pair&lt; <classname>unc</classname>, <classname>unc</classname> &gt; &amp;</paramtype></parameter><description><para>Output a pair of (X and Y) values with (if defined) uncertainty and degrees of freedom.</para><para>For example: "1.23 +/- 0.01 (13), 3.45 +/- 0.06 (78)". </para></description></method>
</method-group>
</class><data-member name="plusminus" specifiers="static"><type>const double</type><purpose>Nominal factor of 2 (strictly 1.96) corresponds to 95% confidence limit. </purpose><description><para>Number of standard deviations used for plusminus text display.<sbr/>
 </para></description></data-member>












<function name="operator&lt;&lt;"><type>std::ostream &amp;</type><template>
          <template-nontype-parameter name="correlated"><type>bool</type></template-nontype-parameter>
        </template><parameter name="os"><paramtype>std::ostream &amp;</paramtype></parameter><parameter name="u"><paramtype>const <classname>unc</classname>&lt; correlated &gt; &amp;</paramtype></parameter><description><para>Note that the uncertainty is input and stored as one standard deviation, but output multiplied for a user configurable 'confidence factor' plusminus, default is two standard deviation for about 95% confidence (but could also be one for 67% or 3 for 99% confidence). </para></description><description><para>Output a single value with (if defined) uncertainty and degrees of freedom (and type). For example: "1.23 +/- 0.01 (13)".<sbr/>
/details Note that the uncertainty is input and stored as one standard deviation, but output multiplied for a user configurable 'confidence factor' plusminus, default two for about 95% confidence (but could also be one for 67% or 3 for 99% confidence).</para><para>Note that the plus or minus can be output using several methods.</para><para>256 character 8-bit codepage plusminus symbol octal 361, or os &lt;&lt; char(241) decimal 241 or os &lt;&lt; char(0xF1) hexadecimal F1, or os &lt;&lt; "&amp;#x00A0;&amp;#x00B1;" Unicode space plusminus glyph, or<sbr/>
os &lt;&lt; " +or-" &lt;&lt; u.uncertainty_; Plain ANSI 7 bit code chars.</para></description></function>

<function name="operator&lt;&lt;"><type>std::ostream &amp;</type><template>
          <template-nontype-parameter name="correlated"><type>bool</type></template-nontype-parameter>
        </template><parameter name="os"><paramtype>std::ostream &amp;</paramtype></parameter><parameter name="u"><paramtype>const std::pair&lt; <classname>unc</classname>&lt; correlated &gt;, <classname>unc</classname>&lt; correlated &gt; &gt; &amp;</paramtype></parameter><description><para>Output a pair (X and Y) value with (if defined) uncertainty and degrees of freedom.</para><para>For example: "1.23 +/- 0.01 (13), 3.45 +/- 0.06 (78)".</para></description></function>


































<function name="unc_of"><type>float</type><template>
          <template-type-parameter name="T"><purpose><para>Built-in floating-point type, float, double or long double, or uncertain type unc. </para></purpose></template-type-parameter>
        </template><parameter name=""><paramtype>T</paramtype></parameter><description><para>Allow uncertainty (standard deviation) part of variables of class unc to be assigned to, and compared with float. 
</para></description><description><para>

</para></description><returns><para>zero always (because no uncertainty information is available for built-in double, float, or long double).</para></returns><returns><para>zero always (because no uncertainty information is available for built-in double, float, or long double). </para></returns></function>
<function name="unc_of"><type>float</type><template>
          <template-nontype-parameter name="correlated"><type>bool</type></template-nontype-parameter>
        </template><parameter name="v"><paramtype><classname>unc</classname>&lt; correlated &gt;</paramtype></parameter><description><para>
</para></description><returns><para>unc.uncertainty() as a float. (Can be cast or converted to double without loss of accuracy). </para></returns></function>
<function name="uncs_of"><type>std::pair&lt; float, float &gt;</type><template>
          <template-type-parameter name="T"><purpose><para>Built-infloating-point type or unc. </para></purpose></template-type-parameter>
        </template><parameter name=""><paramtype>T</paramtype></parameter><purpose>Get uncertainties (standard deviation) of a pair of values. </purpose><description><para>
</para></description></function>
<function name="uncs_of"><type>std::pair&lt; float, float &gt;</type><template>
          <template-type-parameter name="T"><purpose><para>Built-in floating-point type or unc. </para></purpose></template-type-parameter>
        </template><parameter name="vp"><paramtype>std::pair&lt; T, T &gt;</paramtype></parameter><purpose>Get uncertainties (standard deviation) of a pair of values. </purpose><description><para>
</para></description></function>
<function name="uncs_of"><type>std::pair&lt; const float, float &gt;</type><template>
          <template-type-parameter name="T"><purpose><para>Builtin-floating point type or unc. </para></purpose></template-type-parameter>
        </template><parameter name="vp"><paramtype>std::pair&lt; const T, T &gt;</paramtype></parameter><purpose>Get uncertainties (standard deviation) of a pair of values. </purpose><description><para>
</para></description><description><para>
</para></description><returns><para>uncertainty parts (if any) as a pair of floats. </para></returns></function>
<function name="value_of"><type>double</type><template>
          <template-type-parameter name="T"><purpose><para>Built-in floating-point type, float, double or long double, or uncertain type unc.</para></purpose><purpose><para>value type convertible to double. </para></purpose></template-type-parameter>
        </template><parameter name="v"><paramtype>T</paramtype></parameter><purpose>&lt; </purpose><description><para>Allow value part of variables of class unc to be assigned to, and compared with double. 
</para></description><description><para>

</para></description><returns><para>value as a double.</para></returns><returns><para>value as a double. </para></returns></function>
<function name="value_of"><type>double</type><template>
        </template><parameter name="v"><paramtype><classname>unc</classname>&lt; true &gt;</paramtype></parameter><description><para>
</para></description><returns><para>unc.value() as a double. </para></returns></function>
<function name="value_of"><type>double</type><template>
        </template><parameter name="v"><paramtype><classname>unc</classname>&lt; false &gt;</paramtype></parameter><description><para>
</para></description><returns><para>unc.value() as a double. </para></returns></function>
<function name="values_of"><type>std::pair&lt; double, double &gt;</type><template>
          <template-type-parameter name="T"><purpose><para>Built-in floating-point type, float, double, long double or unc. </para></purpose></template-type-parameter>
        </template><parameter name=""><paramtype>T</paramtype></parameter><purpose>Get double values of a pair of values. </purpose><description><para>
</para></description></function>
<function name="values_of"><type>std::pair&lt; double, double &gt;</type><template>
          <template-type-parameter name="T"><purpose><para>Built-infloating-point type, float, double, long double or unc. </para></purpose></template-type-parameter>
        </template><parameter name="vp"><paramtype>std::pair&lt; const T, T &gt;</paramtype></parameter><description><para>
</para></description><description><para>&lt; 
</para></description><returns><para>values of a pair of double values. </para></returns></function>
<function name="values_of"><type>std::pair&lt; double, double &gt;</type><template>
          <template-type-parameter name="T"/>
        </template><parameter name="vp"><paramtype>std::pair&lt; T, T &gt;</paramtype></parameter></function>
<function name="values_of"><type>std::pair&lt; double, double &gt;</type><template>
          <template-nontype-parameter name="correlated"><type>bool</type></template-nontype-parameter>
        </template><parameter name="up"><paramtype>std::pair&lt; <classname>unc</classname>&lt; correlated &gt;, <classname>unc</classname>&lt; correlated &gt; &gt;</paramtype></parameter><description><para>
</para></description><returns><para>value (part) as a pair of doubles. </para></returns></function>
</namespace>
</namespace>
</header>
</library-reference>
